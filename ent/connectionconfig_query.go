// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.authbricks.com/bricks/ent/connectionconfig"
	"go.authbricks.com/bricks/ent/emailpasswordconnection"
	"go.authbricks.com/bricks/ent/oidcconnection"
	"go.authbricks.com/bricks/ent/predicate"
	"go.authbricks.com/bricks/ent/service"
)

// ConnectionConfigQuery is the builder for querying ConnectionConfig entities.
type ConnectionConfigQuery struct {
	config
	ctx                         *QueryContext
	order                       []connectionconfig.OrderOption
	inters                      []Interceptor
	predicates                  []predicate.ConnectionConfig
	withService                 *ServiceQuery
	withOidcConnections         *OIDCConnectionQuery
	withEmailPasswordConnection *EmailPasswordConnectionQuery
	withFKs                     bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ConnectionConfigQuery builder.
func (ccq *ConnectionConfigQuery) Where(ps ...predicate.ConnectionConfig) *ConnectionConfigQuery {
	ccq.predicates = append(ccq.predicates, ps...)
	return ccq
}

// Limit the number of records to be returned by this query.
func (ccq *ConnectionConfigQuery) Limit(limit int) *ConnectionConfigQuery {
	ccq.ctx.Limit = &limit
	return ccq
}

// Offset to start from.
func (ccq *ConnectionConfigQuery) Offset(offset int) *ConnectionConfigQuery {
	ccq.ctx.Offset = &offset
	return ccq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ccq *ConnectionConfigQuery) Unique(unique bool) *ConnectionConfigQuery {
	ccq.ctx.Unique = &unique
	return ccq
}

// Order specifies how the records should be ordered.
func (ccq *ConnectionConfigQuery) Order(o ...connectionconfig.OrderOption) *ConnectionConfigQuery {
	ccq.order = append(ccq.order, o...)
	return ccq
}

// QueryService chains the current query on the "service" edge.
func (ccq *ConnectionConfigQuery) QueryService() *ServiceQuery {
	query := (&ServiceClient{config: ccq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ccq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ccq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(connectionconfig.Table, connectionconfig.FieldID, selector),
			sqlgraph.To(service.Table, service.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, connectionconfig.ServiceTable, connectionconfig.ServiceColumn),
		)
		fromU = sqlgraph.SetNeighbors(ccq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOidcConnections chains the current query on the "oidc_connections" edge.
func (ccq *ConnectionConfigQuery) QueryOidcConnections() *OIDCConnectionQuery {
	query := (&OIDCConnectionClient{config: ccq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ccq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ccq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(connectionconfig.Table, connectionconfig.FieldID, selector),
			sqlgraph.To(oidcconnection.Table, oidcconnection.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, connectionconfig.OidcConnectionsTable, connectionconfig.OidcConnectionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(ccq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEmailPasswordConnection chains the current query on the "email_password_connection" edge.
func (ccq *ConnectionConfigQuery) QueryEmailPasswordConnection() *EmailPasswordConnectionQuery {
	query := (&EmailPasswordConnectionClient{config: ccq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ccq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ccq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(connectionconfig.Table, connectionconfig.FieldID, selector),
			sqlgraph.To(emailpasswordconnection.Table, emailpasswordconnection.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, connectionconfig.EmailPasswordConnectionTable, connectionconfig.EmailPasswordConnectionColumn),
		)
		fromU = sqlgraph.SetNeighbors(ccq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ConnectionConfig entity from the query.
// Returns a *NotFoundError when no ConnectionConfig was found.
func (ccq *ConnectionConfigQuery) First(ctx context.Context) (*ConnectionConfig, error) {
	nodes, err := ccq.Limit(1).All(setContextOp(ctx, ccq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{connectionconfig.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ccq *ConnectionConfigQuery) FirstX(ctx context.Context) *ConnectionConfig {
	node, err := ccq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ConnectionConfig ID from the query.
// Returns a *NotFoundError when no ConnectionConfig ID was found.
func (ccq *ConnectionConfigQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = ccq.Limit(1).IDs(setContextOp(ctx, ccq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{connectionconfig.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ccq *ConnectionConfigQuery) FirstIDX(ctx context.Context) string {
	id, err := ccq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ConnectionConfig entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ConnectionConfig entity is found.
// Returns a *NotFoundError when no ConnectionConfig entities are found.
func (ccq *ConnectionConfigQuery) Only(ctx context.Context) (*ConnectionConfig, error) {
	nodes, err := ccq.Limit(2).All(setContextOp(ctx, ccq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{connectionconfig.Label}
	default:
		return nil, &NotSingularError{connectionconfig.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ccq *ConnectionConfigQuery) OnlyX(ctx context.Context) *ConnectionConfig {
	node, err := ccq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ConnectionConfig ID in the query.
// Returns a *NotSingularError when more than one ConnectionConfig ID is found.
// Returns a *NotFoundError when no entities are found.
func (ccq *ConnectionConfigQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = ccq.Limit(2).IDs(setContextOp(ctx, ccq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{connectionconfig.Label}
	default:
		err = &NotSingularError{connectionconfig.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ccq *ConnectionConfigQuery) OnlyIDX(ctx context.Context) string {
	id, err := ccq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ConnectionConfigs.
func (ccq *ConnectionConfigQuery) All(ctx context.Context) ([]*ConnectionConfig, error) {
	ctx = setContextOp(ctx, ccq.ctx, "All")
	if err := ccq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ConnectionConfig, *ConnectionConfigQuery]()
	return withInterceptors[[]*ConnectionConfig](ctx, ccq, qr, ccq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ccq *ConnectionConfigQuery) AllX(ctx context.Context) []*ConnectionConfig {
	nodes, err := ccq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ConnectionConfig IDs.
func (ccq *ConnectionConfigQuery) IDs(ctx context.Context) (ids []string, err error) {
	if ccq.ctx.Unique == nil && ccq.path != nil {
		ccq.Unique(true)
	}
	ctx = setContextOp(ctx, ccq.ctx, "IDs")
	if err = ccq.Select(connectionconfig.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ccq *ConnectionConfigQuery) IDsX(ctx context.Context) []string {
	ids, err := ccq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ccq *ConnectionConfigQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ccq.ctx, "Count")
	if err := ccq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ccq, querierCount[*ConnectionConfigQuery](), ccq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ccq *ConnectionConfigQuery) CountX(ctx context.Context) int {
	count, err := ccq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ccq *ConnectionConfigQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ccq.ctx, "Exist")
	switch _, err := ccq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ccq *ConnectionConfigQuery) ExistX(ctx context.Context) bool {
	exist, err := ccq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ConnectionConfigQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ccq *ConnectionConfigQuery) Clone() *ConnectionConfigQuery {
	if ccq == nil {
		return nil
	}
	return &ConnectionConfigQuery{
		config:                      ccq.config,
		ctx:                         ccq.ctx.Clone(),
		order:                       append([]connectionconfig.OrderOption{}, ccq.order...),
		inters:                      append([]Interceptor{}, ccq.inters...),
		predicates:                  append([]predicate.ConnectionConfig{}, ccq.predicates...),
		withService:                 ccq.withService.Clone(),
		withOidcConnections:         ccq.withOidcConnections.Clone(),
		withEmailPasswordConnection: ccq.withEmailPasswordConnection.Clone(),
		// clone intermediate query.
		sql:  ccq.sql.Clone(),
		path: ccq.path,
	}
}

// WithService tells the query-builder to eager-load the nodes that are connected to
// the "service" edge. The optional arguments are used to configure the query builder of the edge.
func (ccq *ConnectionConfigQuery) WithService(opts ...func(*ServiceQuery)) *ConnectionConfigQuery {
	query := (&ServiceClient{config: ccq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ccq.withService = query
	return ccq
}

// WithOidcConnections tells the query-builder to eager-load the nodes that are connected to
// the "oidc_connections" edge. The optional arguments are used to configure the query builder of the edge.
func (ccq *ConnectionConfigQuery) WithOidcConnections(opts ...func(*OIDCConnectionQuery)) *ConnectionConfigQuery {
	query := (&OIDCConnectionClient{config: ccq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ccq.withOidcConnections = query
	return ccq
}

// WithEmailPasswordConnection tells the query-builder to eager-load the nodes that are connected to
// the "email_password_connection" edge. The optional arguments are used to configure the query builder of the edge.
func (ccq *ConnectionConfigQuery) WithEmailPasswordConnection(opts ...func(*EmailPasswordConnectionQuery)) *ConnectionConfigQuery {
	query := (&EmailPasswordConnectionClient{config: ccq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ccq.withEmailPasswordConnection = query
	return ccq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (ccq *ConnectionConfigQuery) GroupBy(field string, fields ...string) *ConnectionConfigGroupBy {
	ccq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ConnectionConfigGroupBy{build: ccq}
	grbuild.flds = &ccq.ctx.Fields
	grbuild.label = connectionconfig.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (ccq *ConnectionConfigQuery) Select(fields ...string) *ConnectionConfigSelect {
	ccq.ctx.Fields = append(ccq.ctx.Fields, fields...)
	sbuild := &ConnectionConfigSelect{ConnectionConfigQuery: ccq}
	sbuild.label = connectionconfig.Label
	sbuild.flds, sbuild.scan = &ccq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ConnectionConfigSelect configured with the given aggregations.
func (ccq *ConnectionConfigQuery) Aggregate(fns ...AggregateFunc) *ConnectionConfigSelect {
	return ccq.Select().Aggregate(fns...)
}

func (ccq *ConnectionConfigQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ccq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ccq); err != nil {
				return err
			}
		}
	}
	for _, f := range ccq.ctx.Fields {
		if !connectionconfig.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ccq.path != nil {
		prev, err := ccq.path(ctx)
		if err != nil {
			return err
		}
		ccq.sql = prev
	}
	return nil
}

func (ccq *ConnectionConfigQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ConnectionConfig, error) {
	var (
		nodes       = []*ConnectionConfig{}
		withFKs     = ccq.withFKs
		_spec       = ccq.querySpec()
		loadedTypes = [3]bool{
			ccq.withService != nil,
			ccq.withOidcConnections != nil,
			ccq.withEmailPasswordConnection != nil,
		}
	)
	if ccq.withService != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, connectionconfig.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ConnectionConfig).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ConnectionConfig{config: ccq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ccq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ccq.withService; query != nil {
		if err := ccq.loadService(ctx, query, nodes, nil,
			func(n *ConnectionConfig, e *Service) { n.Edges.Service = e }); err != nil {
			return nil, err
		}
	}
	if query := ccq.withOidcConnections; query != nil {
		if err := ccq.loadOidcConnections(ctx, query, nodes,
			func(n *ConnectionConfig) { n.Edges.OidcConnections = []*OIDCConnection{} },
			func(n *ConnectionConfig, e *OIDCConnection) {
				n.Edges.OidcConnections = append(n.Edges.OidcConnections, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := ccq.withEmailPasswordConnection; query != nil {
		if err := ccq.loadEmailPasswordConnection(ctx, query, nodes, nil,
			func(n *ConnectionConfig, e *EmailPasswordConnection) { n.Edges.EmailPasswordConnection = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ccq *ConnectionConfigQuery) loadService(ctx context.Context, query *ServiceQuery, nodes []*ConnectionConfig, init func(*ConnectionConfig), assign func(*ConnectionConfig, *Service)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*ConnectionConfig)
	for i := range nodes {
		if nodes[i].service_service_connection_config == nil {
			continue
		}
		fk := *nodes[i].service_service_connection_config
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(service.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "service_service_connection_config" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ccq *ConnectionConfigQuery) loadOidcConnections(ctx context.Context, query *OIDCConnectionQuery, nodes []*ConnectionConfig, init func(*ConnectionConfig), assign func(*ConnectionConfig, *OIDCConnection)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*ConnectionConfig)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.OIDCConnection(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(connectionconfig.OidcConnectionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.connection_config_oidc_connections
		if fk == nil {
			return fmt.Errorf(`foreign-key "connection_config_oidc_connections" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "connection_config_oidc_connections" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (ccq *ConnectionConfigQuery) loadEmailPasswordConnection(ctx context.Context, query *EmailPasswordConnectionQuery, nodes []*ConnectionConfig, init func(*ConnectionConfig), assign func(*ConnectionConfig, *EmailPasswordConnection)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*ConnectionConfig)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.EmailPasswordConnection(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(connectionconfig.EmailPasswordConnectionColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.connection_config_email_password_connection
		if fk == nil {
			return fmt.Errorf(`foreign-key "connection_config_email_password_connection" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "connection_config_email_password_connection" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (ccq *ConnectionConfigQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ccq.querySpec()
	_spec.Node.Columns = ccq.ctx.Fields
	if len(ccq.ctx.Fields) > 0 {
		_spec.Unique = ccq.ctx.Unique != nil && *ccq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ccq.driver, _spec)
}

func (ccq *ConnectionConfigQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(connectionconfig.Table, connectionconfig.Columns, sqlgraph.NewFieldSpec(connectionconfig.FieldID, field.TypeString))
	_spec.From = ccq.sql
	if unique := ccq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ccq.path != nil {
		_spec.Unique = true
	}
	if fields := ccq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, connectionconfig.FieldID)
		for i := range fields {
			if fields[i] != connectionconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ccq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ccq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ccq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ccq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ccq *ConnectionConfigQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ccq.driver.Dialect())
	t1 := builder.Table(connectionconfig.Table)
	columns := ccq.ctx.Fields
	if len(columns) == 0 {
		columns = connectionconfig.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ccq.sql != nil {
		selector = ccq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ccq.ctx.Unique != nil && *ccq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ccq.predicates {
		p(selector)
	}
	for _, p := range ccq.order {
		p(selector)
	}
	if offset := ccq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ccq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ConnectionConfigGroupBy is the group-by builder for ConnectionConfig entities.
type ConnectionConfigGroupBy struct {
	selector
	build *ConnectionConfigQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ccgb *ConnectionConfigGroupBy) Aggregate(fns ...AggregateFunc) *ConnectionConfigGroupBy {
	ccgb.fns = append(ccgb.fns, fns...)
	return ccgb
}

// Scan applies the selector query and scans the result into the given value.
func (ccgb *ConnectionConfigGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ccgb.build.ctx, "GroupBy")
	if err := ccgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ConnectionConfigQuery, *ConnectionConfigGroupBy](ctx, ccgb.build, ccgb, ccgb.build.inters, v)
}

func (ccgb *ConnectionConfigGroupBy) sqlScan(ctx context.Context, root *ConnectionConfigQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ccgb.fns))
	for _, fn := range ccgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ccgb.flds)+len(ccgb.fns))
		for _, f := range *ccgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ccgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ccgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ConnectionConfigSelect is the builder for selecting fields of ConnectionConfig entities.
type ConnectionConfigSelect struct {
	*ConnectionConfigQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ccs *ConnectionConfigSelect) Aggregate(fns ...AggregateFunc) *ConnectionConfigSelect {
	ccs.fns = append(ccs.fns, fns...)
	return ccs
}

// Scan applies the selector query and scans the result into the given value.
func (ccs *ConnectionConfigSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ccs.ctx, "Select")
	if err := ccs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ConnectionConfigQuery, *ConnectionConfigSelect](ctx, ccs.ConnectionConfigQuery, ccs, ccs.inters, v)
}

func (ccs *ConnectionConfigSelect) sqlScan(ctx context.Context, root *ConnectionConfigQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ccs.fns))
	for _, fn := range ccs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ccs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ccs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
