// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"go.authbricks.com/bricks/ent/keyset"
	"go.authbricks.com/bricks/ent/oauthserver"
)

// OAuthServer is the model entity for the OAuthServer schema.
type OAuthServer struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OAuthServerQuery when eager-loading is set.
	Edges        OAuthServerEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OAuthServerEdges holds the relations/edges for other nodes in the graph.
type OAuthServerEdges struct {
	// KeySet holds the value of the key_set edge.
	KeySet *KeySet `json:"key_set,omitempty"`
	// Clients holds the value of the clients edge.
	Clients []*OAuthClient `json:"clients,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// KeySetOrErr returns the KeySet value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OAuthServerEdges) KeySetOrErr() (*KeySet, error) {
	if e.KeySet != nil {
		return e.KeySet, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: keyset.Label}
	}
	return nil, &NotLoadedError{edge: "key_set"}
}

// ClientsOrErr returns the Clients value or an error if the edge
// was not loaded in eager-loading.
func (e OAuthServerEdges) ClientsOrErr() ([]*OAuthClient, error) {
	if e.loadedTypes[1] {
		return e.Clients, nil
	}
	return nil, &NotLoadedError{edge: "clients"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OAuthServer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oauthserver.FieldID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OAuthServer fields.
func (os *OAuthServer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oauthserver.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			os.ID = int(value.Int64)
		default:
			os.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OAuthServer.
// This includes values selected through modifiers, order, etc.
func (os *OAuthServer) Value(name string) (ent.Value, error) {
	return os.selectValues.Get(name)
}

// QueryKeySet queries the "key_set" edge of the OAuthServer entity.
func (os *OAuthServer) QueryKeySet() *KeySetQuery {
	return NewOAuthServerClient(os.config).QueryKeySet(os)
}

// QueryClients queries the "clients" edge of the OAuthServer entity.
func (os *OAuthServer) QueryClients() *OAuthClientQuery {
	return NewOAuthServerClient(os.config).QueryClients(os)
}

// Update returns a builder for updating this OAuthServer.
// Note that you need to call OAuthServer.Unwrap() before calling this method if this OAuthServer
// was returned from a transaction, and the transaction was committed or rolled back.
func (os *OAuthServer) Update() *OAuthServerUpdateOne {
	return NewOAuthServerClient(os.config).UpdateOne(os)
}

// Unwrap unwraps the OAuthServer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (os *OAuthServer) Unwrap() *OAuthServer {
	_tx, ok := os.config.driver.(*txDriver)
	if !ok {
		panic("ent: OAuthServer is not a transactional entity")
	}
	os.config.driver = _tx.drv
	return os
}

// String implements the fmt.Stringer.
func (os *OAuthServer) String() string {
	var builder strings.Builder
	builder.WriteString("OAuthServer(")
	builder.WriteString(fmt.Sprintf("id=%v", os.ID))
	builder.WriteByte(')')
	return builder.String()
}

// OAuthServers is a parsable slice of OAuthServer.
type OAuthServers []*OAuthServer
