// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.authbricks.com/bricks/ent/predicate"
	"go.authbricks.com/bricks/ent/servicejwksendpointconfig"
)

// ServiceJWKSEndpointConfigDelete is the builder for deleting a ServiceJWKSEndpointConfig entity.
type ServiceJWKSEndpointConfigDelete struct {
	config
	hooks    []Hook
	mutation *ServiceJWKSEndpointConfigMutation
}

// Where appends a list predicates to the ServiceJWKSEndpointConfigDelete builder.
func (sjecd *ServiceJWKSEndpointConfigDelete) Where(ps ...predicate.ServiceJWKSEndpointConfig) *ServiceJWKSEndpointConfigDelete {
	sjecd.mutation.Where(ps...)
	return sjecd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sjecd *ServiceJWKSEndpointConfigDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, sjecd.sqlExec, sjecd.mutation, sjecd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sjecd *ServiceJWKSEndpointConfigDelete) ExecX(ctx context.Context) int {
	n, err := sjecd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sjecd *ServiceJWKSEndpointConfigDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(servicejwksendpointconfig.Table, sqlgraph.NewFieldSpec(servicejwksendpointconfig.FieldID, field.TypeString))
	if ps := sjecd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, sjecd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	sjecd.mutation.done = true
	return affected, err
}

// ServiceJWKSEndpointConfigDeleteOne is the builder for deleting a single ServiceJWKSEndpointConfig entity.
type ServiceJWKSEndpointConfigDeleteOne struct {
	sjecd *ServiceJWKSEndpointConfigDelete
}

// Where appends a list predicates to the ServiceJWKSEndpointConfigDelete builder.
func (sjecdo *ServiceJWKSEndpointConfigDeleteOne) Where(ps ...predicate.ServiceJWKSEndpointConfig) *ServiceJWKSEndpointConfigDeleteOne {
	sjecdo.sjecd.mutation.Where(ps...)
	return sjecdo
}

// Exec executes the deletion query.
func (sjecdo *ServiceJWKSEndpointConfigDeleteOne) Exec(ctx context.Context) error {
	n, err := sjecdo.sjecd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{servicejwksendpointconfig.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sjecdo *ServiceJWKSEndpointConfigDeleteOne) ExecX(ctx context.Context) {
	if err := sjecdo.Exec(ctx); err != nil {
		panic(err)
	}
}
