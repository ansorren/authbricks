// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.authbricks.com/bricks/ent/predicate"
	"go.authbricks.com/bricks/ent/serviceauthorizationendpointconfig"
)

// ServiceAuthorizationEndpointConfigDelete is the builder for deleting a ServiceAuthorizationEndpointConfig entity.
type ServiceAuthorizationEndpointConfigDelete struct {
	config
	hooks    []Hook
	mutation *ServiceAuthorizationEndpointConfigMutation
}

// Where appends a list predicates to the ServiceAuthorizationEndpointConfigDelete builder.
func (saecd *ServiceAuthorizationEndpointConfigDelete) Where(ps ...predicate.ServiceAuthorizationEndpointConfig) *ServiceAuthorizationEndpointConfigDelete {
	saecd.mutation.Where(ps...)
	return saecd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (saecd *ServiceAuthorizationEndpointConfigDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, saecd.sqlExec, saecd.mutation, saecd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (saecd *ServiceAuthorizationEndpointConfigDelete) ExecX(ctx context.Context) int {
	n, err := saecd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (saecd *ServiceAuthorizationEndpointConfigDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(serviceauthorizationendpointconfig.Table, sqlgraph.NewFieldSpec(serviceauthorizationendpointconfig.FieldID, field.TypeString))
	if ps := saecd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, saecd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	saecd.mutation.done = true
	return affected, err
}

// ServiceAuthorizationEndpointConfigDeleteOne is the builder for deleting a single ServiceAuthorizationEndpointConfig entity.
type ServiceAuthorizationEndpointConfigDeleteOne struct {
	saecd *ServiceAuthorizationEndpointConfigDelete
}

// Where appends a list predicates to the ServiceAuthorizationEndpointConfigDelete builder.
func (saecdo *ServiceAuthorizationEndpointConfigDeleteOne) Where(ps ...predicate.ServiceAuthorizationEndpointConfig) *ServiceAuthorizationEndpointConfigDeleteOne {
	saecdo.saecd.mutation.Where(ps...)
	return saecdo
}

// Exec executes the deletion query.
func (saecdo *ServiceAuthorizationEndpointConfigDeleteOne) Exec(ctx context.Context) error {
	n, err := saecdo.saecd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{serviceauthorizationendpointconfig.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (saecdo *ServiceAuthorizationEndpointConfigDeleteOne) ExecX(ctx context.Context) {
	if err := saecdo.Exec(ctx); err != nil {
		panic(err)
	}
}
