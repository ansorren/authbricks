// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.authbricks.com/bricks/ent/authorizationpayload"
	"go.authbricks.com/bricks/ent/predicate"
	"go.authbricks.com/bricks/ent/session"
)

// AuthorizationPayloadUpdate is the builder for updating AuthorizationPayload entities.
type AuthorizationPayloadUpdate struct {
	config
	hooks    []Hook
	mutation *AuthorizationPayloadMutation
}

// Where appends a list predicates to the AuthorizationPayloadUpdate builder.
func (apu *AuthorizationPayloadUpdate) Where(ps ...predicate.AuthorizationPayload) *AuthorizationPayloadUpdate {
	apu.mutation.Where(ps...)
	return apu
}

// SetCodeChallenge sets the "code_challenge" field.
func (apu *AuthorizationPayloadUpdate) SetCodeChallenge(s string) *AuthorizationPayloadUpdate {
	apu.mutation.SetCodeChallenge(s)
	return apu
}

// SetNillableCodeChallenge sets the "code_challenge" field if the given value is not nil.
func (apu *AuthorizationPayloadUpdate) SetNillableCodeChallenge(s *string) *AuthorizationPayloadUpdate {
	if s != nil {
		apu.SetCodeChallenge(*s)
	}
	return apu
}

// SetCodeChallengeMethod sets the "code_challenge_method" field.
func (apu *AuthorizationPayloadUpdate) SetCodeChallengeMethod(s string) *AuthorizationPayloadUpdate {
	apu.mutation.SetCodeChallengeMethod(s)
	return apu
}

// SetNillableCodeChallengeMethod sets the "code_challenge_method" field if the given value is not nil.
func (apu *AuthorizationPayloadUpdate) SetNillableCodeChallengeMethod(s *string) *AuthorizationPayloadUpdate {
	if s != nil {
		apu.SetCodeChallengeMethod(*s)
	}
	return apu
}

// SetClientID sets the "client_id" field.
func (apu *AuthorizationPayloadUpdate) SetClientID(s string) *AuthorizationPayloadUpdate {
	apu.mutation.SetClientID(s)
	return apu
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (apu *AuthorizationPayloadUpdate) SetNillableClientID(s *string) *AuthorizationPayloadUpdate {
	if s != nil {
		apu.SetClientID(*s)
	}
	return apu
}

// SetNonce sets the "nonce" field.
func (apu *AuthorizationPayloadUpdate) SetNonce(s string) *AuthorizationPayloadUpdate {
	apu.mutation.SetNonce(s)
	return apu
}

// SetNillableNonce sets the "nonce" field if the given value is not nil.
func (apu *AuthorizationPayloadUpdate) SetNillableNonce(s *string) *AuthorizationPayloadUpdate {
	if s != nil {
		apu.SetNonce(*s)
	}
	return apu
}

// SetRedirectURI sets the "redirect_uri" field.
func (apu *AuthorizationPayloadUpdate) SetRedirectURI(s string) *AuthorizationPayloadUpdate {
	apu.mutation.SetRedirectURI(s)
	return apu
}

// SetNillableRedirectURI sets the "redirect_uri" field if the given value is not nil.
func (apu *AuthorizationPayloadUpdate) SetNillableRedirectURI(s *string) *AuthorizationPayloadUpdate {
	if s != nil {
		apu.SetRedirectURI(*s)
	}
	return apu
}

// SetResponseType sets the "response_type" field.
func (apu *AuthorizationPayloadUpdate) SetResponseType(s string) *AuthorizationPayloadUpdate {
	apu.mutation.SetResponseType(s)
	return apu
}

// SetNillableResponseType sets the "response_type" field if the given value is not nil.
func (apu *AuthorizationPayloadUpdate) SetNillableResponseType(s *string) *AuthorizationPayloadUpdate {
	if s != nil {
		apu.SetResponseType(*s)
	}
	return apu
}

// SetScope sets the "scope" field.
func (apu *AuthorizationPayloadUpdate) SetScope(s string) *AuthorizationPayloadUpdate {
	apu.mutation.SetScope(s)
	return apu
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (apu *AuthorizationPayloadUpdate) SetNillableScope(s *string) *AuthorizationPayloadUpdate {
	if s != nil {
		apu.SetScope(*s)
	}
	return apu
}

// SetServiceName sets the "service_name" field.
func (apu *AuthorizationPayloadUpdate) SetServiceName(s string) *AuthorizationPayloadUpdate {
	apu.mutation.SetServiceName(s)
	return apu
}

// SetNillableServiceName sets the "service_name" field if the given value is not nil.
func (apu *AuthorizationPayloadUpdate) SetNillableServiceName(s *string) *AuthorizationPayloadUpdate {
	if s != nil {
		apu.SetServiceName(*s)
	}
	return apu
}

// SetState sets the "state" field.
func (apu *AuthorizationPayloadUpdate) SetState(s string) *AuthorizationPayloadUpdate {
	apu.mutation.SetState(s)
	return apu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (apu *AuthorizationPayloadUpdate) SetNillableState(s *string) *AuthorizationPayloadUpdate {
	if s != nil {
		apu.SetState(*s)
	}
	return apu
}

// SetResponseMode sets the "response_mode" field.
func (apu *AuthorizationPayloadUpdate) SetResponseMode(s string) *AuthorizationPayloadUpdate {
	apu.mutation.SetResponseMode(s)
	return apu
}

// SetNillableResponseMode sets the "response_mode" field if the given value is not nil.
func (apu *AuthorizationPayloadUpdate) SetNillableResponseMode(s *string) *AuthorizationPayloadUpdate {
	if s != nil {
		apu.SetResponseMode(*s)
	}
	return apu
}

// SetSessionID sets the "session" edge to the Session entity by ID.
func (apu *AuthorizationPayloadUpdate) SetSessionID(id string) *AuthorizationPayloadUpdate {
	apu.mutation.SetSessionID(id)
	return apu
}

// SetNillableSessionID sets the "session" edge to the Session entity by ID if the given value is not nil.
func (apu *AuthorizationPayloadUpdate) SetNillableSessionID(id *string) *AuthorizationPayloadUpdate {
	if id != nil {
		apu = apu.SetSessionID(*id)
	}
	return apu
}

// SetSession sets the "session" edge to the Session entity.
func (apu *AuthorizationPayloadUpdate) SetSession(s *Session) *AuthorizationPayloadUpdate {
	return apu.SetSessionID(s.ID)
}

// Mutation returns the AuthorizationPayloadMutation object of the builder.
func (apu *AuthorizationPayloadUpdate) Mutation() *AuthorizationPayloadMutation {
	return apu.mutation
}

// ClearSession clears the "session" edge to the Session entity.
func (apu *AuthorizationPayloadUpdate) ClearSession() *AuthorizationPayloadUpdate {
	apu.mutation.ClearSession()
	return apu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (apu *AuthorizationPayloadUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, apu.sqlSave, apu.mutation, apu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (apu *AuthorizationPayloadUpdate) SaveX(ctx context.Context) int {
	affected, err := apu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (apu *AuthorizationPayloadUpdate) Exec(ctx context.Context) error {
	_, err := apu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apu *AuthorizationPayloadUpdate) ExecX(ctx context.Context) {
	if err := apu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (apu *AuthorizationPayloadUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(authorizationpayload.Table, authorizationpayload.Columns, sqlgraph.NewFieldSpec(authorizationpayload.FieldID, field.TypeString))
	if ps := apu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := apu.mutation.CodeChallenge(); ok {
		_spec.SetField(authorizationpayload.FieldCodeChallenge, field.TypeString, value)
	}
	if value, ok := apu.mutation.CodeChallengeMethod(); ok {
		_spec.SetField(authorizationpayload.FieldCodeChallengeMethod, field.TypeString, value)
	}
	if value, ok := apu.mutation.ClientID(); ok {
		_spec.SetField(authorizationpayload.FieldClientID, field.TypeString, value)
	}
	if value, ok := apu.mutation.Nonce(); ok {
		_spec.SetField(authorizationpayload.FieldNonce, field.TypeString, value)
	}
	if value, ok := apu.mutation.RedirectURI(); ok {
		_spec.SetField(authorizationpayload.FieldRedirectURI, field.TypeString, value)
	}
	if value, ok := apu.mutation.ResponseType(); ok {
		_spec.SetField(authorizationpayload.FieldResponseType, field.TypeString, value)
	}
	if value, ok := apu.mutation.Scope(); ok {
		_spec.SetField(authorizationpayload.FieldScope, field.TypeString, value)
	}
	if value, ok := apu.mutation.ServiceName(); ok {
		_spec.SetField(authorizationpayload.FieldServiceName, field.TypeString, value)
	}
	if value, ok := apu.mutation.State(); ok {
		_spec.SetField(authorizationpayload.FieldState, field.TypeString, value)
	}
	if value, ok := apu.mutation.ResponseMode(); ok {
		_spec.SetField(authorizationpayload.FieldResponseMode, field.TypeString, value)
	}
	if apu.mutation.SessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   authorizationpayload.SessionTable,
			Columns: []string{authorizationpayload.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   authorizationpayload.SessionTable,
			Columns: []string{authorizationpayload.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, apu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authorizationpayload.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	apu.mutation.done = true
	return n, nil
}

// AuthorizationPayloadUpdateOne is the builder for updating a single AuthorizationPayload entity.
type AuthorizationPayloadUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AuthorizationPayloadMutation
}

// SetCodeChallenge sets the "code_challenge" field.
func (apuo *AuthorizationPayloadUpdateOne) SetCodeChallenge(s string) *AuthorizationPayloadUpdateOne {
	apuo.mutation.SetCodeChallenge(s)
	return apuo
}

// SetNillableCodeChallenge sets the "code_challenge" field if the given value is not nil.
func (apuo *AuthorizationPayloadUpdateOne) SetNillableCodeChallenge(s *string) *AuthorizationPayloadUpdateOne {
	if s != nil {
		apuo.SetCodeChallenge(*s)
	}
	return apuo
}

// SetCodeChallengeMethod sets the "code_challenge_method" field.
func (apuo *AuthorizationPayloadUpdateOne) SetCodeChallengeMethod(s string) *AuthorizationPayloadUpdateOne {
	apuo.mutation.SetCodeChallengeMethod(s)
	return apuo
}

// SetNillableCodeChallengeMethod sets the "code_challenge_method" field if the given value is not nil.
func (apuo *AuthorizationPayloadUpdateOne) SetNillableCodeChallengeMethod(s *string) *AuthorizationPayloadUpdateOne {
	if s != nil {
		apuo.SetCodeChallengeMethod(*s)
	}
	return apuo
}

// SetClientID sets the "client_id" field.
func (apuo *AuthorizationPayloadUpdateOne) SetClientID(s string) *AuthorizationPayloadUpdateOne {
	apuo.mutation.SetClientID(s)
	return apuo
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (apuo *AuthorizationPayloadUpdateOne) SetNillableClientID(s *string) *AuthorizationPayloadUpdateOne {
	if s != nil {
		apuo.SetClientID(*s)
	}
	return apuo
}

// SetNonce sets the "nonce" field.
func (apuo *AuthorizationPayloadUpdateOne) SetNonce(s string) *AuthorizationPayloadUpdateOne {
	apuo.mutation.SetNonce(s)
	return apuo
}

// SetNillableNonce sets the "nonce" field if the given value is not nil.
func (apuo *AuthorizationPayloadUpdateOne) SetNillableNonce(s *string) *AuthorizationPayloadUpdateOne {
	if s != nil {
		apuo.SetNonce(*s)
	}
	return apuo
}

// SetRedirectURI sets the "redirect_uri" field.
func (apuo *AuthorizationPayloadUpdateOne) SetRedirectURI(s string) *AuthorizationPayloadUpdateOne {
	apuo.mutation.SetRedirectURI(s)
	return apuo
}

// SetNillableRedirectURI sets the "redirect_uri" field if the given value is not nil.
func (apuo *AuthorizationPayloadUpdateOne) SetNillableRedirectURI(s *string) *AuthorizationPayloadUpdateOne {
	if s != nil {
		apuo.SetRedirectURI(*s)
	}
	return apuo
}

// SetResponseType sets the "response_type" field.
func (apuo *AuthorizationPayloadUpdateOne) SetResponseType(s string) *AuthorizationPayloadUpdateOne {
	apuo.mutation.SetResponseType(s)
	return apuo
}

// SetNillableResponseType sets the "response_type" field if the given value is not nil.
func (apuo *AuthorizationPayloadUpdateOne) SetNillableResponseType(s *string) *AuthorizationPayloadUpdateOne {
	if s != nil {
		apuo.SetResponseType(*s)
	}
	return apuo
}

// SetScope sets the "scope" field.
func (apuo *AuthorizationPayloadUpdateOne) SetScope(s string) *AuthorizationPayloadUpdateOne {
	apuo.mutation.SetScope(s)
	return apuo
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (apuo *AuthorizationPayloadUpdateOne) SetNillableScope(s *string) *AuthorizationPayloadUpdateOne {
	if s != nil {
		apuo.SetScope(*s)
	}
	return apuo
}

// SetServiceName sets the "service_name" field.
func (apuo *AuthorizationPayloadUpdateOne) SetServiceName(s string) *AuthorizationPayloadUpdateOne {
	apuo.mutation.SetServiceName(s)
	return apuo
}

// SetNillableServiceName sets the "service_name" field if the given value is not nil.
func (apuo *AuthorizationPayloadUpdateOne) SetNillableServiceName(s *string) *AuthorizationPayloadUpdateOne {
	if s != nil {
		apuo.SetServiceName(*s)
	}
	return apuo
}

// SetState sets the "state" field.
func (apuo *AuthorizationPayloadUpdateOne) SetState(s string) *AuthorizationPayloadUpdateOne {
	apuo.mutation.SetState(s)
	return apuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (apuo *AuthorizationPayloadUpdateOne) SetNillableState(s *string) *AuthorizationPayloadUpdateOne {
	if s != nil {
		apuo.SetState(*s)
	}
	return apuo
}

// SetResponseMode sets the "response_mode" field.
func (apuo *AuthorizationPayloadUpdateOne) SetResponseMode(s string) *AuthorizationPayloadUpdateOne {
	apuo.mutation.SetResponseMode(s)
	return apuo
}

// SetNillableResponseMode sets the "response_mode" field if the given value is not nil.
func (apuo *AuthorizationPayloadUpdateOne) SetNillableResponseMode(s *string) *AuthorizationPayloadUpdateOne {
	if s != nil {
		apuo.SetResponseMode(*s)
	}
	return apuo
}

// SetSessionID sets the "session" edge to the Session entity by ID.
func (apuo *AuthorizationPayloadUpdateOne) SetSessionID(id string) *AuthorizationPayloadUpdateOne {
	apuo.mutation.SetSessionID(id)
	return apuo
}

// SetNillableSessionID sets the "session" edge to the Session entity by ID if the given value is not nil.
func (apuo *AuthorizationPayloadUpdateOne) SetNillableSessionID(id *string) *AuthorizationPayloadUpdateOne {
	if id != nil {
		apuo = apuo.SetSessionID(*id)
	}
	return apuo
}

// SetSession sets the "session" edge to the Session entity.
func (apuo *AuthorizationPayloadUpdateOne) SetSession(s *Session) *AuthorizationPayloadUpdateOne {
	return apuo.SetSessionID(s.ID)
}

// Mutation returns the AuthorizationPayloadMutation object of the builder.
func (apuo *AuthorizationPayloadUpdateOne) Mutation() *AuthorizationPayloadMutation {
	return apuo.mutation
}

// ClearSession clears the "session" edge to the Session entity.
func (apuo *AuthorizationPayloadUpdateOne) ClearSession() *AuthorizationPayloadUpdateOne {
	apuo.mutation.ClearSession()
	return apuo
}

// Where appends a list predicates to the AuthorizationPayloadUpdate builder.
func (apuo *AuthorizationPayloadUpdateOne) Where(ps ...predicate.AuthorizationPayload) *AuthorizationPayloadUpdateOne {
	apuo.mutation.Where(ps...)
	return apuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (apuo *AuthorizationPayloadUpdateOne) Select(field string, fields ...string) *AuthorizationPayloadUpdateOne {
	apuo.fields = append([]string{field}, fields...)
	return apuo
}

// Save executes the query and returns the updated AuthorizationPayload entity.
func (apuo *AuthorizationPayloadUpdateOne) Save(ctx context.Context) (*AuthorizationPayload, error) {
	return withHooks(ctx, apuo.sqlSave, apuo.mutation, apuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (apuo *AuthorizationPayloadUpdateOne) SaveX(ctx context.Context) *AuthorizationPayload {
	node, err := apuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (apuo *AuthorizationPayloadUpdateOne) Exec(ctx context.Context) error {
	_, err := apuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apuo *AuthorizationPayloadUpdateOne) ExecX(ctx context.Context) {
	if err := apuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (apuo *AuthorizationPayloadUpdateOne) sqlSave(ctx context.Context) (_node *AuthorizationPayload, err error) {
	_spec := sqlgraph.NewUpdateSpec(authorizationpayload.Table, authorizationpayload.Columns, sqlgraph.NewFieldSpec(authorizationpayload.FieldID, field.TypeString))
	id, ok := apuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AuthorizationPayload.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := apuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, authorizationpayload.FieldID)
		for _, f := range fields {
			if !authorizationpayload.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != authorizationpayload.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := apuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := apuo.mutation.CodeChallenge(); ok {
		_spec.SetField(authorizationpayload.FieldCodeChallenge, field.TypeString, value)
	}
	if value, ok := apuo.mutation.CodeChallengeMethod(); ok {
		_spec.SetField(authorizationpayload.FieldCodeChallengeMethod, field.TypeString, value)
	}
	if value, ok := apuo.mutation.ClientID(); ok {
		_spec.SetField(authorizationpayload.FieldClientID, field.TypeString, value)
	}
	if value, ok := apuo.mutation.Nonce(); ok {
		_spec.SetField(authorizationpayload.FieldNonce, field.TypeString, value)
	}
	if value, ok := apuo.mutation.RedirectURI(); ok {
		_spec.SetField(authorizationpayload.FieldRedirectURI, field.TypeString, value)
	}
	if value, ok := apuo.mutation.ResponseType(); ok {
		_spec.SetField(authorizationpayload.FieldResponseType, field.TypeString, value)
	}
	if value, ok := apuo.mutation.Scope(); ok {
		_spec.SetField(authorizationpayload.FieldScope, field.TypeString, value)
	}
	if value, ok := apuo.mutation.ServiceName(); ok {
		_spec.SetField(authorizationpayload.FieldServiceName, field.TypeString, value)
	}
	if value, ok := apuo.mutation.State(); ok {
		_spec.SetField(authorizationpayload.FieldState, field.TypeString, value)
	}
	if value, ok := apuo.mutation.ResponseMode(); ok {
		_spec.SetField(authorizationpayload.FieldResponseMode, field.TypeString, value)
	}
	if apuo.mutation.SessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   authorizationpayload.SessionTable,
			Columns: []string{authorizationpayload.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   authorizationpayload.SessionTable,
			Columns: []string{authorizationpayload.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AuthorizationPayload{config: apuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, apuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authorizationpayload.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	apuo.mutation.done = true
	return _node, nil
}
