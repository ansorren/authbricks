// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"go.authbricks.com/bricks/ent/keyset"
	"go.authbricks.com/bricks/ent/signingkey"
)

// SigningKey is the model entity for the SigningKey schema.
type SigningKey struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id"`
	// Key holds the value of the "key" field.
	Key string `json:"-"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SigningKeyQuery when eager-loading is set.
	Edges                SigningKeyEdges `json:"edges"`
	key_set_signing_keys *string
	selectValues         sql.SelectValues
}

// SigningKeyEdges holds the relations/edges for other nodes in the graph.
type SigningKeyEdges struct {
	// KeySet holds the value of the key_set edge.
	KeySet *KeySet `json:"key_set,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// KeySetOrErr returns the KeySet value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SigningKeyEdges) KeySetOrErr() (*KeySet, error) {
	if e.KeySet != nil {
		return e.KeySet, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: keyset.Label}
	}
	return nil, &NotLoadedError{edge: "key_set"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SigningKey) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case signingkey.FieldID, signingkey.FieldKey:
			values[i] = new(sql.NullString)
		case signingkey.ForeignKeys[0]: // key_set_signing_keys
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SigningKey fields.
func (sk *SigningKey) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case signingkey.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				sk.ID = value.String
			}
		case signingkey.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				sk.Key = value.String
			}
		case signingkey.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key_set_signing_keys", values[i])
			} else if value.Valid {
				sk.key_set_signing_keys = new(string)
				*sk.key_set_signing_keys = value.String
			}
		default:
			sk.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SigningKey.
// This includes values selected through modifiers, order, etc.
func (sk *SigningKey) Value(name string) (ent.Value, error) {
	return sk.selectValues.Get(name)
}

// QueryKeySet queries the "key_set" edge of the SigningKey entity.
func (sk *SigningKey) QueryKeySet() *KeySetQuery {
	return NewSigningKeyClient(sk.config).QueryKeySet(sk)
}

// Update returns a builder for updating this SigningKey.
// Note that you need to call SigningKey.Unwrap() before calling this method if this SigningKey
// was returned from a transaction, and the transaction was committed or rolled back.
func (sk *SigningKey) Update() *SigningKeyUpdateOne {
	return NewSigningKeyClient(sk.config).UpdateOne(sk)
}

// Unwrap unwraps the SigningKey entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sk *SigningKey) Unwrap() *SigningKey {
	_tx, ok := sk.config.driver.(*txDriver)
	if !ok {
		panic("ent: SigningKey is not a transactional entity")
	}
	sk.config.driver = _tx.drv
	return sk
}

// String implements the fmt.Stringer.
func (sk *SigningKey) String() string {
	var builder strings.Builder
	builder.WriteString("SigningKey(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sk.ID))
	builder.WriteString("key=<sensitive>")
	builder.WriteByte(')')
	return builder.String()
}

// SigningKeys is a parsable slice of SigningKey.
type SigningKeys []*SigningKey
