// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ApplicationsColumns holds the columns for the "applications" table.
	ApplicationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "public", Type: field.TypeBool, Default: false},
		{Name: "description", Type: field.TypeString},
		{Name: "redirect_uris", Type: field.TypeJSON},
		{Name: "response_types", Type: field.TypeJSON},
		{Name: "grant_types", Type: field.TypeJSON},
		{Name: "scopes", Type: field.TypeJSON},
		{Name: "pkce_required", Type: field.TypeBool, Default: false},
		{Name: "s256_code_challenge_method_required", Type: field.TypeBool, Default: false},
		{Name: "allowed_authentication_methods", Type: field.TypeJSON},
		{Name: "service_applications", Type: field.TypeString, Nullable: true},
	}
	// ApplicationsTable holds the schema information for the "applications" table.
	ApplicationsTable = &schema.Table{
		Name:       "applications",
		Columns:    ApplicationsColumns,
		PrimaryKey: []*schema.Column{ApplicationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "applications_services_applications",
				Columns:    []*schema.Column{ApplicationsColumns[11]},
				RefColumns: []*schema.Column{ServicesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// AuthorizationCodesColumns holds the columns for the "authorization_codes" table.
	AuthorizationCodesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "client_name", Type: field.TypeString},
		{Name: "code_challenge", Type: field.TypeString},
		{Name: "code_challenge_method", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "auth_time", Type: field.TypeTime},
		{Name: "redirect_uri", Type: field.TypeString},
		{Name: "nonce", Type: field.TypeString},
		{Name: "server_name", Type: field.TypeString},
		{Name: "state", Type: field.TypeString},
		{Name: "subject", Type: field.TypeString},
		{Name: "granted_scopes", Type: field.TypeString},
	}
	// AuthorizationCodesTable holds the schema information for the "authorization_codes" table.
	AuthorizationCodesTable = &schema.Table{
		Name:       "authorization_codes",
		Columns:    AuthorizationCodesColumns,
		PrimaryKey: []*schema.Column{AuthorizationCodesColumns[0]},
	}
	// AuthorizationPayloadsColumns holds the columns for the "authorization_payloads" table.
	AuthorizationPayloadsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "code_challenge", Type: field.TypeString},
		{Name: "code_challenge_method", Type: field.TypeString},
		{Name: "client_id", Type: field.TypeString},
		{Name: "nonce", Type: field.TypeString},
		{Name: "redirect_uri", Type: field.TypeString},
		{Name: "response_type", Type: field.TypeString},
		{Name: "scope", Type: field.TypeString},
		{Name: "server_name", Type: field.TypeString},
		{Name: "state", Type: field.TypeString},
		{Name: "response_mode", Type: field.TypeString},
		{Name: "session_authorization_payload", Type: field.TypeString, Unique: true, Nullable: true},
	}
	// AuthorizationPayloadsTable holds the schema information for the "authorization_payloads" table.
	AuthorizationPayloadsTable = &schema.Table{
		Name:       "authorization_payloads",
		Columns:    AuthorizationPayloadsColumns,
		PrimaryKey: []*schema.Column{AuthorizationPayloadsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "authorization_payloads_sessions_authorization_payload",
				Columns:    []*schema.Column{AuthorizationPayloadsColumns[11]},
				RefColumns: []*schema.Column{SessionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// CookieStoresColumns holds the columns for the "cookie_stores" table.
	CookieStoresColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "auth_key", Type: field.TypeString},
		{Name: "encryption_key", Type: field.TypeString},
	}
	// CookieStoresTable holds the schema information for the "cookie_stores" table.
	CookieStoresTable = &schema.Table{
		Name:       "cookie_stores",
		Columns:    CookieStoresColumns,
		PrimaryKey: []*schema.Column{CookieStoresColumns[0]},
	}
	// CredentialsColumns holds the columns for the "credentials" table.
	CredentialsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "client_id", Type: field.TypeString, Unique: true},
		{Name: "client_secret", Type: field.TypeString},
		{Name: "application_credentials", Type: field.TypeString, Nullable: true},
	}
	// CredentialsTable holds the schema information for the "credentials" table.
	CredentialsTable = &schema.Table{
		Name:       "credentials",
		Columns:    CredentialsColumns,
		PrimaryKey: []*schema.Column{CredentialsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "credentials_applications_credentials",
				Columns:    []*schema.Column{CredentialsColumns[3]},
				RefColumns: []*schema.Column{ApplicationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// KeySetsColumns holds the columns for the "key_sets" table.
	KeySetsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "service_key_set", Type: field.TypeString, Unique: true, Nullable: true},
	}
	// KeySetsTable holds the schema information for the "key_sets" table.
	KeySetsTable = &schema.Table{
		Name:       "key_sets",
		Columns:    KeySetsColumns,
		PrimaryKey: []*schema.Column{KeySetsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "key_sets_services_key_set",
				Columns:    []*schema.Column{KeySetsColumns[1]},
				RefColumns: []*schema.Column{ServicesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// RefreshTokensColumns holds the columns for the "refresh_tokens" table.
	RefreshTokensColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "client_name", Type: field.TypeString},
		{Name: "server_name", Type: field.TypeString},
		{Name: "scopes", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeInt64},
		{Name: "access_token_id", Type: field.TypeString},
		{Name: "lifetime", Type: field.TypeInt64},
		{Name: "subject", Type: field.TypeString},
		{Name: "key_id", Type: field.TypeString},
		{Name: "auth_time", Type: field.TypeTime},
	}
	// RefreshTokensTable holds the schema information for the "refresh_tokens" table.
	RefreshTokensTable = &schema.Table{
		Name:       "refresh_tokens",
		Columns:    RefreshTokensColumns,
		PrimaryKey: []*schema.Column{RefreshTokensColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "refreshtoken_access_token_id",
				Unique:  true,
				Columns: []*schema.Column{RefreshTokensColumns[5]},
			},
		},
	}
	// ServicesColumns holds the columns for the "services" table.
	ServicesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "issuer", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString},
		{Name: "scopes", Type: field.TypeJSON},
		{Name: "service_metadata", Type: field.TypeString},
		{Name: "allowed_client_metadata", Type: field.TypeJSON},
		{Name: "grant_types", Type: field.TypeJSON},
		{Name: "response_types", Type: field.TypeJSON},
	}
	// ServicesTable holds the schema information for the "services" table.
	ServicesTable = &schema.Table{
		Name:       "services",
		Columns:    ServicesColumns,
		PrimaryKey: []*schema.Column{ServicesColumns[0]},
	}
	// ServiceAuthorizationEndpointConfigsColumns holds the columns for the "service_authorization_endpoint_configs" table.
	ServiceAuthorizationEndpointConfigsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "endpoint", Type: field.TypeString, Unique: true},
		{Name: "pkce_required", Type: field.TypeBool},
		{Name: "pkce_s256_code_challenge_method_required", Type: field.TypeBool},
		{Name: "service_service_authorization_endpoint_config", Type: field.TypeString, Unique: true},
	}
	// ServiceAuthorizationEndpointConfigsTable holds the schema information for the "service_authorization_endpoint_configs" table.
	ServiceAuthorizationEndpointConfigsTable = &schema.Table{
		Name:       "service_authorization_endpoint_configs",
		Columns:    ServiceAuthorizationEndpointConfigsColumns,
		PrimaryKey: []*schema.Column{ServiceAuthorizationEndpointConfigsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "service_authorization_endpoint_configs_services_service_authorization_endpoint_config",
				Columns:    []*schema.Column{ServiceAuthorizationEndpointConfigsColumns[4]},
				RefColumns: []*schema.Column{ServicesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// ServiceIntrospectionEndpointConfigsColumns holds the columns for the "service_introspection_endpoint_configs" table.
	ServiceIntrospectionEndpointConfigsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "endpoint", Type: field.TypeString, Unique: true},
		{Name: "service_service_introspection_endpoint_config", Type: field.TypeString, Unique: true},
	}
	// ServiceIntrospectionEndpointConfigsTable holds the schema information for the "service_introspection_endpoint_configs" table.
	ServiceIntrospectionEndpointConfigsTable = &schema.Table{
		Name:       "service_introspection_endpoint_configs",
		Columns:    ServiceIntrospectionEndpointConfigsColumns,
		PrimaryKey: []*schema.Column{ServiceIntrospectionEndpointConfigsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "service_introspection_endpoint_configs_services_service_introspection_endpoint_config",
				Columns:    []*schema.Column{ServiceIntrospectionEndpointConfigsColumns[2]},
				RefColumns: []*schema.Column{ServicesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// ServiceJwksEndpointConfigsColumns holds the columns for the "service_jwks_endpoint_configs" table.
	ServiceJwksEndpointConfigsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "endpoint", Type: field.TypeString, Unique: true},
		{Name: "service_service_jwks_endpoint_config", Type: field.TypeString, Unique: true},
	}
	// ServiceJwksEndpointConfigsTable holds the schema information for the "service_jwks_endpoint_configs" table.
	ServiceJwksEndpointConfigsTable = &schema.Table{
		Name:       "service_jwks_endpoint_configs",
		Columns:    ServiceJwksEndpointConfigsColumns,
		PrimaryKey: []*schema.Column{ServiceJwksEndpointConfigsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "service_jwks_endpoint_configs_services_service_jwks_endpoint_config",
				Columns:    []*schema.Column{ServiceJwksEndpointConfigsColumns[2]},
				RefColumns: []*schema.Column{ServicesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// ServiceTokenEndpointConfigsColumns holds the columns for the "service_token_endpoint_configs" table.
	ServiceTokenEndpointConfigsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "endpoint", Type: field.TypeString, Unique: true},
		{Name: "allowed_authentication_methods", Type: field.TypeJSON},
		{Name: "service_service_token_endpoint_config", Type: field.TypeString, Unique: true},
	}
	// ServiceTokenEndpointConfigsTable holds the schema information for the "service_token_endpoint_configs" table.
	ServiceTokenEndpointConfigsTable = &schema.Table{
		Name:       "service_token_endpoint_configs",
		Columns:    ServiceTokenEndpointConfigsColumns,
		PrimaryKey: []*schema.Column{ServiceTokenEndpointConfigsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "service_token_endpoint_configs_services_service_token_endpoint_config",
				Columns:    []*schema.Column{ServiceTokenEndpointConfigsColumns[3]},
				RefColumns: []*schema.Column{ServicesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// ServiceUserInfoEndpointConfigsColumns holds the columns for the "service_user_info_endpoint_configs" table.
	ServiceUserInfoEndpointConfigsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "endpoint", Type: field.TypeString, Unique: true},
		{Name: "service_service_user_info_endpoint_config", Type: field.TypeString, Unique: true},
	}
	// ServiceUserInfoEndpointConfigsTable holds the schema information for the "service_user_info_endpoint_configs" table.
	ServiceUserInfoEndpointConfigsTable = &schema.Table{
		Name:       "service_user_info_endpoint_configs",
		Columns:    ServiceUserInfoEndpointConfigsColumns,
		PrimaryKey: []*schema.Column{ServiceUserInfoEndpointConfigsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "service_user_info_endpoint_configs_services_service_user_info_endpoint_config",
				Columns:    []*schema.Column{ServiceUserInfoEndpointConfigsColumns[2]},
				RefColumns: []*schema.Column{ServicesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// SessionsColumns holds the columns for the "sessions" table.
	SessionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeInt64},
		{Name: "server_name", Type: field.TypeString},
	}
	// SessionsTable holds the schema information for the "sessions" table.
	SessionsTable = &schema.Table{
		Name:       "sessions",
		Columns:    SessionsColumns,
		PrimaryKey: []*schema.Column{SessionsColumns[0]},
	}
	// SigningKeysColumns holds the columns for the "signing_keys" table.
	SigningKeysColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "key", Type: field.TypeString},
		{Name: "key_set_signing_keys", Type: field.TypeString, Nullable: true},
	}
	// SigningKeysTable holds the schema information for the "signing_keys" table.
	SigningKeysTable = &schema.Table{
		Name:       "signing_keys",
		Columns:    SigningKeysColumns,
		PrimaryKey: []*schema.Column{SigningKeysColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "signing_keys_key_sets_signing_keys",
				Columns:    []*schema.Column{SigningKeysColumns[2]},
				RefColumns: []*schema.Column{KeySetsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// StandardClaimsColumns holds the columns for the "standard_claims" table.
	StandardClaimsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "subject", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString, Nullable: true},
		{Name: "given_name", Type: field.TypeString, Nullable: true},
		{Name: "family_name", Type: field.TypeString, Nullable: true},
		{Name: "middle_name", Type: field.TypeString, Nullable: true},
		{Name: "nickname", Type: field.TypeString, Nullable: true},
		{Name: "preferred_username", Type: field.TypeString, Nullable: true},
		{Name: "profile", Type: field.TypeString, Nullable: true},
		{Name: "picture", Type: field.TypeString, Nullable: true},
		{Name: "website", Type: field.TypeString, Nullable: true},
		{Name: "email", Type: field.TypeString, Nullable: true},
		{Name: "email_verified", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "gender", Type: field.TypeString, Nullable: true},
		{Name: "birthdate", Type: field.TypeString, Nullable: true},
		{Name: "zoneinfo", Type: field.TypeString, Nullable: true},
		{Name: "locale", Type: field.TypeString, Nullable: true},
		{Name: "phone_number", Type: field.TypeString, Nullable: true},
		{Name: "phone_number_verified", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "address", Type: field.TypeString, Nullable: true},
		{Name: "updated_at", Type: field.TypeInt64, Nullable: true},
		{Name: "user_standard_claims", Type: field.TypeString, Unique: true},
	}
	// StandardClaimsTable holds the schema information for the "standard_claims" table.
	StandardClaimsTable = &schema.Table{
		Name:       "standard_claims",
		Columns:    StandardClaimsColumns,
		PrimaryKey: []*schema.Column{StandardClaimsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "standard_claims_users_standard_claims",
				Columns:    []*schema.Column{StandardClaimsColumns[21]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "username", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
		{Name: "user_pool_users", Type: field.TypeString, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "users_user_pools_users",
				Columns:    []*schema.Column{UsersColumns[3]},
				RefColumns: []*schema.Column{UserPoolsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UserPoolsColumns holds the columns for the "user_pools" table.
	UserPoolsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
	}
	// UserPoolsTable holds the schema information for the "user_pools" table.
	UserPoolsTable = &schema.Table{
		Name:       "user_pools",
		Columns:    UserPoolsColumns,
		PrimaryKey: []*schema.Column{UserPoolsColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ApplicationsTable,
		AuthorizationCodesTable,
		AuthorizationPayloadsTable,
		CookieStoresTable,
		CredentialsTable,
		KeySetsTable,
		RefreshTokensTable,
		ServicesTable,
		ServiceAuthorizationEndpointConfigsTable,
		ServiceIntrospectionEndpointConfigsTable,
		ServiceJwksEndpointConfigsTable,
		ServiceTokenEndpointConfigsTable,
		ServiceUserInfoEndpointConfigsTable,
		SessionsTable,
		SigningKeysTable,
		StandardClaimsTable,
		UsersTable,
		UserPoolsTable,
	}
)

func init() {
	ApplicationsTable.ForeignKeys[0].RefTable = ServicesTable
	AuthorizationPayloadsTable.ForeignKeys[0].RefTable = SessionsTable
	CredentialsTable.ForeignKeys[0].RefTable = ApplicationsTable
	KeySetsTable.ForeignKeys[0].RefTable = ServicesTable
	ServiceAuthorizationEndpointConfigsTable.ForeignKeys[0].RefTable = ServicesTable
	ServiceIntrospectionEndpointConfigsTable.ForeignKeys[0].RefTable = ServicesTable
	ServiceJwksEndpointConfigsTable.ForeignKeys[0].RefTable = ServicesTable
	ServiceTokenEndpointConfigsTable.ForeignKeys[0].RefTable = ServicesTable
	ServiceUserInfoEndpointConfigsTable.ForeignKeys[0].RefTable = ServicesTable
	SigningKeysTable.ForeignKeys[0].RefTable = KeySetsTable
	StandardClaimsTable.ForeignKeys[0].RefTable = UsersTable
	UsersTable.ForeignKeys[0].RefTable = UserPoolsTable
}
