// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"go.authbricks.com/bricks/ent/m2mgrant"
	"go.authbricks.com/bricks/ent/oauthclient"
	"go.authbricks.com/bricks/ent/predicate"
)

// M2MGrantUpdate is the builder for updating M2MGrant entities.
type M2MGrantUpdate struct {
	config
	hooks    []Hook
	mutation *M2MGrantMutation
}

// Where appends a list predicates to the M2MGrantUpdate builder.
func (mgu *M2MGrantUpdate) Where(ps ...predicate.M2MGrant) *M2MGrantUpdate {
	mgu.mutation.Where(ps...)
	return mgu
}

// SetScopes sets the "scopes" field.
func (mgu *M2MGrantUpdate) SetScopes(s []string) *M2MGrantUpdate {
	mgu.mutation.SetScopes(s)
	return mgu
}

// AppendScopes appends s to the "scopes" field.
func (mgu *M2MGrantUpdate) AppendScopes(s []string) *M2MGrantUpdate {
	mgu.mutation.AppendScopes(s)
	return mgu
}

// SetClientID sets the "client" edge to the OAuthClient entity by ID.
func (mgu *M2MGrantUpdate) SetClientID(id string) *M2MGrantUpdate {
	mgu.mutation.SetClientID(id)
	return mgu
}

// SetNillableClientID sets the "client" edge to the OAuthClient entity by ID if the given value is not nil.
func (mgu *M2MGrantUpdate) SetNillableClientID(id *string) *M2MGrantUpdate {
	if id != nil {
		mgu = mgu.SetClientID(*id)
	}
	return mgu
}

// SetClient sets the "client" edge to the OAuthClient entity.
func (mgu *M2MGrantUpdate) SetClient(o *OAuthClient) *M2MGrantUpdate {
	return mgu.SetClientID(o.ID)
}

// Mutation returns the M2MGrantMutation object of the builder.
func (mgu *M2MGrantUpdate) Mutation() *M2MGrantMutation {
	return mgu.mutation
}

// ClearClient clears the "client" edge to the OAuthClient entity.
func (mgu *M2MGrantUpdate) ClearClient() *M2MGrantUpdate {
	mgu.mutation.ClearClient()
	return mgu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mgu *M2MGrantUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mgu.sqlSave, mgu.mutation, mgu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mgu *M2MGrantUpdate) SaveX(ctx context.Context) int {
	affected, err := mgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mgu *M2MGrantUpdate) Exec(ctx context.Context) error {
	_, err := mgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mgu *M2MGrantUpdate) ExecX(ctx context.Context) {
	if err := mgu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mgu *M2MGrantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(m2mgrant.Table, m2mgrant.Columns, sqlgraph.NewFieldSpec(m2mgrant.FieldID, field.TypeString))
	if ps := mgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mgu.mutation.Scopes(); ok {
		_spec.SetField(m2mgrant.FieldScopes, field.TypeJSON, value)
	}
	if value, ok := mgu.mutation.AppendedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, m2mgrant.FieldScopes, value)
		})
	}
	if mgu.mutation.ClientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   m2mgrant.ClientTable,
			Columns: []string{m2mgrant.ClientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mgu.mutation.ClientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   m2mgrant.ClientTable,
			Columns: []string{m2mgrant.ClientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{m2mgrant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mgu.mutation.done = true
	return n, nil
}

// M2MGrantUpdateOne is the builder for updating a single M2MGrant entity.
type M2MGrantUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *M2MGrantMutation
}

// SetScopes sets the "scopes" field.
func (mguo *M2MGrantUpdateOne) SetScopes(s []string) *M2MGrantUpdateOne {
	mguo.mutation.SetScopes(s)
	return mguo
}

// AppendScopes appends s to the "scopes" field.
func (mguo *M2MGrantUpdateOne) AppendScopes(s []string) *M2MGrantUpdateOne {
	mguo.mutation.AppendScopes(s)
	return mguo
}

// SetClientID sets the "client" edge to the OAuthClient entity by ID.
func (mguo *M2MGrantUpdateOne) SetClientID(id string) *M2MGrantUpdateOne {
	mguo.mutation.SetClientID(id)
	return mguo
}

// SetNillableClientID sets the "client" edge to the OAuthClient entity by ID if the given value is not nil.
func (mguo *M2MGrantUpdateOne) SetNillableClientID(id *string) *M2MGrantUpdateOne {
	if id != nil {
		mguo = mguo.SetClientID(*id)
	}
	return mguo
}

// SetClient sets the "client" edge to the OAuthClient entity.
func (mguo *M2MGrantUpdateOne) SetClient(o *OAuthClient) *M2MGrantUpdateOne {
	return mguo.SetClientID(o.ID)
}

// Mutation returns the M2MGrantMutation object of the builder.
func (mguo *M2MGrantUpdateOne) Mutation() *M2MGrantMutation {
	return mguo.mutation
}

// ClearClient clears the "client" edge to the OAuthClient entity.
func (mguo *M2MGrantUpdateOne) ClearClient() *M2MGrantUpdateOne {
	mguo.mutation.ClearClient()
	return mguo
}

// Where appends a list predicates to the M2MGrantUpdate builder.
func (mguo *M2MGrantUpdateOne) Where(ps ...predicate.M2MGrant) *M2MGrantUpdateOne {
	mguo.mutation.Where(ps...)
	return mguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mguo *M2MGrantUpdateOne) Select(field string, fields ...string) *M2MGrantUpdateOne {
	mguo.fields = append([]string{field}, fields...)
	return mguo
}

// Save executes the query and returns the updated M2MGrant entity.
func (mguo *M2MGrantUpdateOne) Save(ctx context.Context) (*M2MGrant, error) {
	return withHooks(ctx, mguo.sqlSave, mguo.mutation, mguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mguo *M2MGrantUpdateOne) SaveX(ctx context.Context) *M2MGrant {
	node, err := mguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mguo *M2MGrantUpdateOne) Exec(ctx context.Context) error {
	_, err := mguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mguo *M2MGrantUpdateOne) ExecX(ctx context.Context) {
	if err := mguo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mguo *M2MGrantUpdateOne) sqlSave(ctx context.Context) (_node *M2MGrant, err error) {
	_spec := sqlgraph.NewUpdateSpec(m2mgrant.Table, m2mgrant.Columns, sqlgraph.NewFieldSpec(m2mgrant.FieldID, field.TypeString))
	id, ok := mguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "M2MGrant.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, m2mgrant.FieldID)
		for _, f := range fields {
			if !m2mgrant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != m2mgrant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mguo.mutation.Scopes(); ok {
		_spec.SetField(m2mgrant.FieldScopes, field.TypeJSON, value)
	}
	if value, ok := mguo.mutation.AppendedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, m2mgrant.FieldScopes, value)
		})
	}
	if mguo.mutation.ClientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   m2mgrant.ClientTable,
			Columns: []string{m2mgrant.ClientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mguo.mutation.ClientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   m2mgrant.ClientTable,
			Columns: []string{m2mgrant.ClientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &M2MGrant{config: mguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{m2mgrant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mguo.mutation.done = true
	return _node, nil
}
