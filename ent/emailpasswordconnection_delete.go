// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.authbricks.com/bricks/ent/emailpasswordconnection"
	"go.authbricks.com/bricks/ent/predicate"
)

// EmailPasswordConnectionDelete is the builder for deleting a EmailPasswordConnection entity.
type EmailPasswordConnectionDelete struct {
	config
	hooks    []Hook
	mutation *EmailPasswordConnectionMutation
}

// Where appends a list predicates to the EmailPasswordConnectionDelete builder.
func (epcd *EmailPasswordConnectionDelete) Where(ps ...predicate.EmailPasswordConnection) *EmailPasswordConnectionDelete {
	epcd.mutation.Where(ps...)
	return epcd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (epcd *EmailPasswordConnectionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, epcd.sqlExec, epcd.mutation, epcd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (epcd *EmailPasswordConnectionDelete) ExecX(ctx context.Context) int {
	n, err := epcd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (epcd *EmailPasswordConnectionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(emailpasswordconnection.Table, sqlgraph.NewFieldSpec(emailpasswordconnection.FieldID, field.TypeString))
	if ps := epcd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, epcd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	epcd.mutation.done = true
	return affected, err
}

// EmailPasswordConnectionDeleteOne is the builder for deleting a single EmailPasswordConnection entity.
type EmailPasswordConnectionDeleteOne struct {
	epcd *EmailPasswordConnectionDelete
}

// Where appends a list predicates to the EmailPasswordConnectionDelete builder.
func (epcdo *EmailPasswordConnectionDeleteOne) Where(ps ...predicate.EmailPasswordConnection) *EmailPasswordConnectionDeleteOne {
	epcdo.epcd.mutation.Where(ps...)
	return epcdo
}

// Exec executes the deletion query.
func (epcdo *EmailPasswordConnectionDeleteOne) Exec(ctx context.Context) error {
	n, err := epcdo.epcd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{emailpasswordconnection.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (epcdo *EmailPasswordConnectionDeleteOne) ExecX(ctx context.Context) {
	if err := epcdo.Exec(ctx); err != nil {
		panic(err)
	}
}
