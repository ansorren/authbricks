// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.authbricks.com/bricks/ent/authorizationendpointconfig"
	"go.authbricks.com/bricks/ent/predicate"
)

// AuthorizationEndpointConfigDelete is the builder for deleting a AuthorizationEndpointConfig entity.
type AuthorizationEndpointConfigDelete struct {
	config
	hooks    []Hook
	mutation *AuthorizationEndpointConfigMutation
}

// Where appends a list predicates to the AuthorizationEndpointConfigDelete builder.
func (aecd *AuthorizationEndpointConfigDelete) Where(ps ...predicate.AuthorizationEndpointConfig) *AuthorizationEndpointConfigDelete {
	aecd.mutation.Where(ps...)
	return aecd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (aecd *AuthorizationEndpointConfigDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, aecd.sqlExec, aecd.mutation, aecd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (aecd *AuthorizationEndpointConfigDelete) ExecX(ctx context.Context) int {
	n, err := aecd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (aecd *AuthorizationEndpointConfigDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(authorizationendpointconfig.Table, sqlgraph.NewFieldSpec(authorizationendpointconfig.FieldID, field.TypeString))
	if ps := aecd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, aecd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	aecd.mutation.done = true
	return affected, err
}

// AuthorizationEndpointConfigDeleteOne is the builder for deleting a single AuthorizationEndpointConfig entity.
type AuthorizationEndpointConfigDeleteOne struct {
	aecd *AuthorizationEndpointConfigDelete
}

// Where appends a list predicates to the AuthorizationEndpointConfigDelete builder.
func (aecdo *AuthorizationEndpointConfigDeleteOne) Where(ps ...predicate.AuthorizationEndpointConfig) *AuthorizationEndpointConfigDeleteOne {
	aecdo.aecd.mutation.Where(ps...)
	return aecdo
}

// Exec executes the deletion query.
func (aecdo *AuthorizationEndpointConfigDeleteOne) Exec(ctx context.Context) error {
	n, err := aecdo.aecd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{authorizationendpointconfig.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (aecdo *AuthorizationEndpointConfigDeleteOne) ExecX(ctx context.Context) {
	if err := aecdo.Exec(ctx); err != nil {
		panic(err)
	}
}
