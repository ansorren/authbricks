// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.authbricks.com/bricks/ent/codegrant"
	"go.authbricks.com/bricks/ent/credentials"
	"go.authbricks.com/bricks/ent/m2mgrant"
	"go.authbricks.com/bricks/ent/oauthclient"
	"go.authbricks.com/bricks/ent/oauthserver"
)

// OAuthClientCreate is the builder for creating a OAuthClient entity.
type OAuthClientCreate struct {
	config
	mutation *OAuthClientMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (occ *OAuthClientCreate) SetName(s string) *OAuthClientCreate {
	occ.mutation.SetName(s)
	return occ
}

// SetPublic sets the "public" field.
func (occ *OAuthClientCreate) SetPublic(b bool) *OAuthClientCreate {
	occ.mutation.SetPublic(b)
	return occ
}

// SetNillablePublic sets the "public" field if the given value is not nil.
func (occ *OAuthClientCreate) SetNillablePublic(b *bool) *OAuthClientCreate {
	if b != nil {
		occ.SetPublic(*b)
	}
	return occ
}

// SetID sets the "id" field.
func (occ *OAuthClientCreate) SetID(s string) *OAuthClientCreate {
	occ.mutation.SetID(s)
	return occ
}

// SetM2mGrantsID sets the "m2m_grants" edge to the M2MGrant entity by ID.
func (occ *OAuthClientCreate) SetM2mGrantsID(id string) *OAuthClientCreate {
	occ.mutation.SetM2mGrantsID(id)
	return occ
}

// SetNillableM2mGrantsID sets the "m2m_grants" edge to the M2MGrant entity by ID if the given value is not nil.
func (occ *OAuthClientCreate) SetNillableM2mGrantsID(id *string) *OAuthClientCreate {
	if id != nil {
		occ = occ.SetM2mGrantsID(*id)
	}
	return occ
}

// SetM2mGrants sets the "m2m_grants" edge to the M2MGrant entity.
func (occ *OAuthClientCreate) SetM2mGrants(m *M2MGrant) *OAuthClientCreate {
	return occ.SetM2mGrantsID(m.ID)
}

// SetCodeGrantsID sets the "code_grants" edge to the CodeGrant entity by ID.
func (occ *OAuthClientCreate) SetCodeGrantsID(id string) *OAuthClientCreate {
	occ.mutation.SetCodeGrantsID(id)
	return occ
}

// SetNillableCodeGrantsID sets the "code_grants" edge to the CodeGrant entity by ID if the given value is not nil.
func (occ *OAuthClientCreate) SetNillableCodeGrantsID(id *string) *OAuthClientCreate {
	if id != nil {
		occ = occ.SetCodeGrantsID(*id)
	}
	return occ
}

// SetCodeGrants sets the "code_grants" edge to the CodeGrant entity.
func (occ *OAuthClientCreate) SetCodeGrants(c *CodeGrant) *OAuthClientCreate {
	return occ.SetCodeGrantsID(c.ID)
}

// AddCredentialIDs adds the "credentials" edge to the Credentials entity by IDs.
func (occ *OAuthClientCreate) AddCredentialIDs(ids ...string) *OAuthClientCreate {
	occ.mutation.AddCredentialIDs(ids...)
	return occ
}

// AddCredentials adds the "credentials" edges to the Credentials entity.
func (occ *OAuthClientCreate) AddCredentials(c ...*Credentials) *OAuthClientCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return occ.AddCredentialIDs(ids...)
}

// SetServerID sets the "server" edge to the OAuthServer entity by ID.
func (occ *OAuthClientCreate) SetServerID(id int) *OAuthClientCreate {
	occ.mutation.SetServerID(id)
	return occ
}

// SetNillableServerID sets the "server" edge to the OAuthServer entity by ID if the given value is not nil.
func (occ *OAuthClientCreate) SetNillableServerID(id *int) *OAuthClientCreate {
	if id != nil {
		occ = occ.SetServerID(*id)
	}
	return occ
}

// SetServer sets the "server" edge to the OAuthServer entity.
func (occ *OAuthClientCreate) SetServer(o *OAuthServer) *OAuthClientCreate {
	return occ.SetServerID(o.ID)
}

// Mutation returns the OAuthClientMutation object of the builder.
func (occ *OAuthClientCreate) Mutation() *OAuthClientMutation {
	return occ.mutation
}

// Save creates the OAuthClient in the database.
func (occ *OAuthClientCreate) Save(ctx context.Context) (*OAuthClient, error) {
	occ.defaults()
	return withHooks(ctx, occ.sqlSave, occ.mutation, occ.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (occ *OAuthClientCreate) SaveX(ctx context.Context) *OAuthClient {
	v, err := occ.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (occ *OAuthClientCreate) Exec(ctx context.Context) error {
	_, err := occ.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (occ *OAuthClientCreate) ExecX(ctx context.Context) {
	if err := occ.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (occ *OAuthClientCreate) defaults() {
	if _, ok := occ.mutation.Public(); !ok {
		v := oauthclient.DefaultPublic
		occ.mutation.SetPublic(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (occ *OAuthClientCreate) check() error {
	if _, ok := occ.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "OAuthClient.name"`)}
	}
	if v, ok := occ.mutation.Name(); ok {
		if err := oauthclient.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "OAuthClient.name": %w`, err)}
		}
	}
	if _, ok := occ.mutation.Public(); !ok {
		return &ValidationError{Name: "public", err: errors.New(`ent: missing required field "OAuthClient.public"`)}
	}
	if v, ok := occ.mutation.ID(); ok {
		if err := oauthclient.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "OAuthClient.id": %w`, err)}
		}
	}
	return nil
}

func (occ *OAuthClientCreate) sqlSave(ctx context.Context) (*OAuthClient, error) {
	if err := occ.check(); err != nil {
		return nil, err
	}
	_node, _spec := occ.createSpec()
	if err := sqlgraph.CreateNode(ctx, occ.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected OAuthClient.ID type: %T", _spec.ID.Value)
		}
	}
	occ.mutation.id = &_node.ID
	occ.mutation.done = true
	return _node, nil
}

func (occ *OAuthClientCreate) createSpec() (*OAuthClient, *sqlgraph.CreateSpec) {
	var (
		_node = &OAuthClient{config: occ.config}
		_spec = sqlgraph.NewCreateSpec(oauthclient.Table, sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeString))
	)
	if id, ok := occ.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := occ.mutation.Name(); ok {
		_spec.SetField(oauthclient.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := occ.mutation.Public(); ok {
		_spec.SetField(oauthclient.FieldPublic, field.TypeBool, value)
		_node.Public = &value
	}
	if nodes := occ.mutation.M2mGrantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oauthclient.M2mGrantsTable,
			Columns: []string{oauthclient.M2mGrantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(m2mgrant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := occ.mutation.CodeGrantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oauthclient.CodeGrantsTable,
			Columns: []string{oauthclient.CodeGrantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(codegrant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := occ.mutation.CredentialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthclient.CredentialsTable,
			Columns: []string{oauthclient.CredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(credentials.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := occ.mutation.ServerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthclient.ServerTable,
			Columns: []string{oauthclient.ServerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthserver.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.oauth_server_clients = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OAuthClientCreateBulk is the builder for creating many OAuthClient entities in bulk.
type OAuthClientCreateBulk struct {
	config
	err      error
	builders []*OAuthClientCreate
}

// Save creates the OAuthClient entities in the database.
func (occb *OAuthClientCreateBulk) Save(ctx context.Context) ([]*OAuthClient, error) {
	if occb.err != nil {
		return nil, occb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(occb.builders))
	nodes := make([]*OAuthClient, len(occb.builders))
	mutators := make([]Mutator, len(occb.builders))
	for i := range occb.builders {
		func(i int, root context.Context) {
			builder := occb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OAuthClientMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, occb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, occb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, occb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (occb *OAuthClientCreateBulk) SaveX(ctx context.Context) []*OAuthClient {
	v, err := occb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (occb *OAuthClientCreateBulk) Exec(ctx context.Context) error {
	_, err := occb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (occb *OAuthClientCreateBulk) ExecX(ctx context.Context) {
	if err := occb.Exec(ctx); err != nil {
		panic(err)
	}
}
