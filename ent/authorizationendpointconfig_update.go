// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.authbricks.com/bricks/ent/authorizationendpointconfig"
	"go.authbricks.com/bricks/ent/predicate"
	"go.authbricks.com/bricks/ent/service"
)

// AuthorizationEndpointConfigUpdate is the builder for updating AuthorizationEndpointConfig entities.
type AuthorizationEndpointConfigUpdate struct {
	config
	hooks    []Hook
	mutation *AuthorizationEndpointConfigMutation
}

// Where appends a list predicates to the AuthorizationEndpointConfigUpdate builder.
func (aecu *AuthorizationEndpointConfigUpdate) Where(ps ...predicate.AuthorizationEndpointConfig) *AuthorizationEndpointConfigUpdate {
	aecu.mutation.Where(ps...)
	return aecu
}

// SetEndpoint sets the "endpoint" field.
func (aecu *AuthorizationEndpointConfigUpdate) SetEndpoint(s string) *AuthorizationEndpointConfigUpdate {
	aecu.mutation.SetEndpoint(s)
	return aecu
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (aecu *AuthorizationEndpointConfigUpdate) SetNillableEndpoint(s *string) *AuthorizationEndpointConfigUpdate {
	if s != nil {
		aecu.SetEndpoint(*s)
	}
	return aecu
}

// SetPkceRequired sets the "pkce_required" field.
func (aecu *AuthorizationEndpointConfigUpdate) SetPkceRequired(b bool) *AuthorizationEndpointConfigUpdate {
	aecu.mutation.SetPkceRequired(b)
	return aecu
}

// SetNillablePkceRequired sets the "pkce_required" field if the given value is not nil.
func (aecu *AuthorizationEndpointConfigUpdate) SetNillablePkceRequired(b *bool) *AuthorizationEndpointConfigUpdate {
	if b != nil {
		aecu.SetPkceRequired(*b)
	}
	return aecu
}

// SetPkceS256CodeChallengeMethodRequired sets the "pkce_s256_code_challenge_method_required" field.
func (aecu *AuthorizationEndpointConfigUpdate) SetPkceS256CodeChallengeMethodRequired(b bool) *AuthorizationEndpointConfigUpdate {
	aecu.mutation.SetPkceS256CodeChallengeMethodRequired(b)
	return aecu
}

// SetNillablePkceS256CodeChallengeMethodRequired sets the "pkce_s256_code_challenge_method_required" field if the given value is not nil.
func (aecu *AuthorizationEndpointConfigUpdate) SetNillablePkceS256CodeChallengeMethodRequired(b *bool) *AuthorizationEndpointConfigUpdate {
	if b != nil {
		aecu.SetPkceS256CodeChallengeMethodRequired(*b)
	}
	return aecu
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (aecu *AuthorizationEndpointConfigUpdate) SetServiceID(id string) *AuthorizationEndpointConfigUpdate {
	aecu.mutation.SetServiceID(id)
	return aecu
}

// SetService sets the "service" edge to the Service entity.
func (aecu *AuthorizationEndpointConfigUpdate) SetService(s *Service) *AuthorizationEndpointConfigUpdate {
	return aecu.SetServiceID(s.ID)
}

// Mutation returns the AuthorizationEndpointConfigMutation object of the builder.
func (aecu *AuthorizationEndpointConfigUpdate) Mutation() *AuthorizationEndpointConfigMutation {
	return aecu.mutation
}

// ClearService clears the "service" edge to the Service entity.
func (aecu *AuthorizationEndpointConfigUpdate) ClearService() *AuthorizationEndpointConfigUpdate {
	aecu.mutation.ClearService()
	return aecu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aecu *AuthorizationEndpointConfigUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, aecu.sqlSave, aecu.mutation, aecu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aecu *AuthorizationEndpointConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := aecu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aecu *AuthorizationEndpointConfigUpdate) Exec(ctx context.Context) error {
	_, err := aecu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aecu *AuthorizationEndpointConfigUpdate) ExecX(ctx context.Context) {
	if err := aecu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aecu *AuthorizationEndpointConfigUpdate) check() error {
	if v, ok := aecu.mutation.Endpoint(); ok {
		if err := authorizationendpointconfig.EndpointValidator(v); err != nil {
			return &ValidationError{Name: "endpoint", err: fmt.Errorf(`ent: validator failed for field "AuthorizationEndpointConfig.endpoint": %w`, err)}
		}
	}
	if _, ok := aecu.mutation.ServiceID(); aecu.mutation.ServiceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AuthorizationEndpointConfig.service"`)
	}
	return nil
}

func (aecu *AuthorizationEndpointConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := aecu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(authorizationendpointconfig.Table, authorizationendpointconfig.Columns, sqlgraph.NewFieldSpec(authorizationendpointconfig.FieldID, field.TypeString))
	if ps := aecu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aecu.mutation.Endpoint(); ok {
		_spec.SetField(authorizationendpointconfig.FieldEndpoint, field.TypeString, value)
	}
	if value, ok := aecu.mutation.PkceRequired(); ok {
		_spec.SetField(authorizationendpointconfig.FieldPkceRequired, field.TypeBool, value)
	}
	if value, ok := aecu.mutation.PkceS256CodeChallengeMethodRequired(); ok {
		_spec.SetField(authorizationendpointconfig.FieldPkceS256CodeChallengeMethodRequired, field.TypeBool, value)
	}
	if aecu.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   authorizationendpointconfig.ServiceTable,
			Columns: []string{authorizationendpointconfig.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aecu.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   authorizationendpointconfig.ServiceTable,
			Columns: []string{authorizationendpointconfig.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aecu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authorizationendpointconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aecu.mutation.done = true
	return n, nil
}

// AuthorizationEndpointConfigUpdateOne is the builder for updating a single AuthorizationEndpointConfig entity.
type AuthorizationEndpointConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AuthorizationEndpointConfigMutation
}

// SetEndpoint sets the "endpoint" field.
func (aecuo *AuthorizationEndpointConfigUpdateOne) SetEndpoint(s string) *AuthorizationEndpointConfigUpdateOne {
	aecuo.mutation.SetEndpoint(s)
	return aecuo
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (aecuo *AuthorizationEndpointConfigUpdateOne) SetNillableEndpoint(s *string) *AuthorizationEndpointConfigUpdateOne {
	if s != nil {
		aecuo.SetEndpoint(*s)
	}
	return aecuo
}

// SetPkceRequired sets the "pkce_required" field.
func (aecuo *AuthorizationEndpointConfigUpdateOne) SetPkceRequired(b bool) *AuthorizationEndpointConfigUpdateOne {
	aecuo.mutation.SetPkceRequired(b)
	return aecuo
}

// SetNillablePkceRequired sets the "pkce_required" field if the given value is not nil.
func (aecuo *AuthorizationEndpointConfigUpdateOne) SetNillablePkceRequired(b *bool) *AuthorizationEndpointConfigUpdateOne {
	if b != nil {
		aecuo.SetPkceRequired(*b)
	}
	return aecuo
}

// SetPkceS256CodeChallengeMethodRequired sets the "pkce_s256_code_challenge_method_required" field.
func (aecuo *AuthorizationEndpointConfigUpdateOne) SetPkceS256CodeChallengeMethodRequired(b bool) *AuthorizationEndpointConfigUpdateOne {
	aecuo.mutation.SetPkceS256CodeChallengeMethodRequired(b)
	return aecuo
}

// SetNillablePkceS256CodeChallengeMethodRequired sets the "pkce_s256_code_challenge_method_required" field if the given value is not nil.
func (aecuo *AuthorizationEndpointConfigUpdateOne) SetNillablePkceS256CodeChallengeMethodRequired(b *bool) *AuthorizationEndpointConfigUpdateOne {
	if b != nil {
		aecuo.SetPkceS256CodeChallengeMethodRequired(*b)
	}
	return aecuo
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (aecuo *AuthorizationEndpointConfigUpdateOne) SetServiceID(id string) *AuthorizationEndpointConfigUpdateOne {
	aecuo.mutation.SetServiceID(id)
	return aecuo
}

// SetService sets the "service" edge to the Service entity.
func (aecuo *AuthorizationEndpointConfigUpdateOne) SetService(s *Service) *AuthorizationEndpointConfigUpdateOne {
	return aecuo.SetServiceID(s.ID)
}

// Mutation returns the AuthorizationEndpointConfigMutation object of the builder.
func (aecuo *AuthorizationEndpointConfigUpdateOne) Mutation() *AuthorizationEndpointConfigMutation {
	return aecuo.mutation
}

// ClearService clears the "service" edge to the Service entity.
func (aecuo *AuthorizationEndpointConfigUpdateOne) ClearService() *AuthorizationEndpointConfigUpdateOne {
	aecuo.mutation.ClearService()
	return aecuo
}

// Where appends a list predicates to the AuthorizationEndpointConfigUpdate builder.
func (aecuo *AuthorizationEndpointConfigUpdateOne) Where(ps ...predicate.AuthorizationEndpointConfig) *AuthorizationEndpointConfigUpdateOne {
	aecuo.mutation.Where(ps...)
	return aecuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aecuo *AuthorizationEndpointConfigUpdateOne) Select(field string, fields ...string) *AuthorizationEndpointConfigUpdateOne {
	aecuo.fields = append([]string{field}, fields...)
	return aecuo
}

// Save executes the query and returns the updated AuthorizationEndpointConfig entity.
func (aecuo *AuthorizationEndpointConfigUpdateOne) Save(ctx context.Context) (*AuthorizationEndpointConfig, error) {
	return withHooks(ctx, aecuo.sqlSave, aecuo.mutation, aecuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aecuo *AuthorizationEndpointConfigUpdateOne) SaveX(ctx context.Context) *AuthorizationEndpointConfig {
	node, err := aecuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aecuo *AuthorizationEndpointConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := aecuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aecuo *AuthorizationEndpointConfigUpdateOne) ExecX(ctx context.Context) {
	if err := aecuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aecuo *AuthorizationEndpointConfigUpdateOne) check() error {
	if v, ok := aecuo.mutation.Endpoint(); ok {
		if err := authorizationendpointconfig.EndpointValidator(v); err != nil {
			return &ValidationError{Name: "endpoint", err: fmt.Errorf(`ent: validator failed for field "AuthorizationEndpointConfig.endpoint": %w`, err)}
		}
	}
	if _, ok := aecuo.mutation.ServiceID(); aecuo.mutation.ServiceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AuthorizationEndpointConfig.service"`)
	}
	return nil
}

func (aecuo *AuthorizationEndpointConfigUpdateOne) sqlSave(ctx context.Context) (_node *AuthorizationEndpointConfig, err error) {
	if err := aecuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(authorizationendpointconfig.Table, authorizationendpointconfig.Columns, sqlgraph.NewFieldSpec(authorizationendpointconfig.FieldID, field.TypeString))
	id, ok := aecuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AuthorizationEndpointConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aecuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, authorizationendpointconfig.FieldID)
		for _, f := range fields {
			if !authorizationendpointconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != authorizationendpointconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aecuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aecuo.mutation.Endpoint(); ok {
		_spec.SetField(authorizationendpointconfig.FieldEndpoint, field.TypeString, value)
	}
	if value, ok := aecuo.mutation.PkceRequired(); ok {
		_spec.SetField(authorizationendpointconfig.FieldPkceRequired, field.TypeBool, value)
	}
	if value, ok := aecuo.mutation.PkceS256CodeChallengeMethodRequired(); ok {
		_spec.SetField(authorizationendpointconfig.FieldPkceS256CodeChallengeMethodRequired, field.TypeBool, value)
	}
	if aecuo.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   authorizationendpointconfig.ServiceTable,
			Columns: []string{authorizationendpointconfig.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aecuo.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   authorizationendpointconfig.ServiceTable,
			Columns: []string{authorizationendpointconfig.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AuthorizationEndpointConfig{config: aecuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aecuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authorizationendpointconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aecuo.mutation.done = true
	return _node, nil
}
