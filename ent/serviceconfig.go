// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"go.authbricks.com/bricks/ent/service"
	"go.authbricks.com/bricks/ent/serviceconfig"
)

// ServiceConfig is the model entity for the ServiceConfig schema.
type ServiceConfig struct {
	config
	// ID of the ent.
	ID string `json:"id" hcl:"id"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ServiceConfigQuery when eager-loading is set.
	Edges                  ServiceConfigEdges `json:"edges"`
	service_service_config *string
	selectValues           sql.SelectValues
}

// ServiceConfigEdges holds the relations/edges for other nodes in the graph.
type ServiceConfigEdges struct {
	// Service holds the value of the service edge.
	Service *Service `json:"service,omitempty"`
	// KeySets holds the value of the key_sets edge.
	KeySets []*KeySet `json:"key_sets,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ServiceOrErr returns the Service value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServiceConfigEdges) ServiceOrErr() (*Service, error) {
	if e.Service != nil {
		return e.Service, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: service.Label}
	}
	return nil, &NotLoadedError{edge: "service"}
}

// KeySetsOrErr returns the KeySets value or an error if the edge
// was not loaded in eager-loading.
func (e ServiceConfigEdges) KeySetsOrErr() ([]*KeySet, error) {
	if e.loadedTypes[1] {
		return e.KeySets, nil
	}
	return nil, &NotLoadedError{edge: "key_sets"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ServiceConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case serviceconfig.FieldID:
			values[i] = new(sql.NullString)
		case serviceconfig.ForeignKeys[0]: // service_service_config
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ServiceConfig fields.
func (sc *ServiceConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case serviceconfig.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				sc.ID = value.String
			}
		case serviceconfig.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field service_service_config", values[i])
			} else if value.Valid {
				sc.service_service_config = new(string)
				*sc.service_service_config = value.String
			}
		default:
			sc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ServiceConfig.
// This includes values selected through modifiers, order, etc.
func (sc *ServiceConfig) Value(name string) (ent.Value, error) {
	return sc.selectValues.Get(name)
}

// QueryService queries the "service" edge of the ServiceConfig entity.
func (sc *ServiceConfig) QueryService() *ServiceQuery {
	return NewServiceConfigClient(sc.config).QueryService(sc)
}

// QueryKeySets queries the "key_sets" edge of the ServiceConfig entity.
func (sc *ServiceConfig) QueryKeySets() *KeySetQuery {
	return NewServiceConfigClient(sc.config).QueryKeySets(sc)
}

// Update returns a builder for updating this ServiceConfig.
// Note that you need to call ServiceConfig.Unwrap() before calling this method if this ServiceConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (sc *ServiceConfig) Update() *ServiceConfigUpdateOne {
	return NewServiceConfigClient(sc.config).UpdateOne(sc)
}

// Unwrap unwraps the ServiceConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sc *ServiceConfig) Unwrap() *ServiceConfig {
	_tx, ok := sc.config.driver.(*txDriver)
	if !ok {
		panic("ent: ServiceConfig is not a transactional entity")
	}
	sc.config.driver = _tx.drv
	return sc
}

// String implements the fmt.Stringer.
func (sc *ServiceConfig) String() string {
	var builder strings.Builder
	builder.WriteString("ServiceConfig(")
	builder.WriteString(fmt.Sprintf("id=%v", sc.ID))
	builder.WriteByte(')')
	return builder.String()
}

// ServiceConfigs is a parsable slice of ServiceConfig.
type ServiceConfigs []*ServiceConfig
