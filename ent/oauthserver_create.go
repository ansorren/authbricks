// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.authbricks.com/bricks/ent/keyset"
	"go.authbricks.com/bricks/ent/oauthclient"
	"go.authbricks.com/bricks/ent/oauthserver"
)

// OAuthServerCreate is the builder for creating a OAuthServer entity.
type OAuthServerCreate struct {
	config
	mutation *OAuthServerMutation
	hooks    []Hook
}

// SetKeySetID sets the "key_set" edge to the KeySet entity by ID.
func (osc *OAuthServerCreate) SetKeySetID(id string) *OAuthServerCreate {
	osc.mutation.SetKeySetID(id)
	return osc
}

// SetNillableKeySetID sets the "key_set" edge to the KeySet entity by ID if the given value is not nil.
func (osc *OAuthServerCreate) SetNillableKeySetID(id *string) *OAuthServerCreate {
	if id != nil {
		osc = osc.SetKeySetID(*id)
	}
	return osc
}

// SetKeySet sets the "key_set" edge to the KeySet entity.
func (osc *OAuthServerCreate) SetKeySet(k *KeySet) *OAuthServerCreate {
	return osc.SetKeySetID(k.ID)
}

// AddClientIDs adds the "clients" edge to the OAuthClient entity by IDs.
func (osc *OAuthServerCreate) AddClientIDs(ids ...string) *OAuthServerCreate {
	osc.mutation.AddClientIDs(ids...)
	return osc
}

// AddClients adds the "clients" edges to the OAuthClient entity.
func (osc *OAuthServerCreate) AddClients(o ...*OAuthClient) *OAuthServerCreate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return osc.AddClientIDs(ids...)
}

// Mutation returns the OAuthServerMutation object of the builder.
func (osc *OAuthServerCreate) Mutation() *OAuthServerMutation {
	return osc.mutation
}

// Save creates the OAuthServer in the database.
func (osc *OAuthServerCreate) Save(ctx context.Context) (*OAuthServer, error) {
	return withHooks(ctx, osc.sqlSave, osc.mutation, osc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (osc *OAuthServerCreate) SaveX(ctx context.Context) *OAuthServer {
	v, err := osc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (osc *OAuthServerCreate) Exec(ctx context.Context) error {
	_, err := osc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osc *OAuthServerCreate) ExecX(ctx context.Context) {
	if err := osc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (osc *OAuthServerCreate) check() error {
	return nil
}

func (osc *OAuthServerCreate) sqlSave(ctx context.Context) (*OAuthServer, error) {
	if err := osc.check(); err != nil {
		return nil, err
	}
	_node, _spec := osc.createSpec()
	if err := sqlgraph.CreateNode(ctx, osc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	osc.mutation.id = &_node.ID
	osc.mutation.done = true
	return _node, nil
}

func (osc *OAuthServerCreate) createSpec() (*OAuthServer, *sqlgraph.CreateSpec) {
	var (
		_node = &OAuthServer{config: osc.config}
		_spec = sqlgraph.NewCreateSpec(oauthserver.Table, sqlgraph.NewFieldSpec(oauthserver.FieldID, field.TypeInt))
	)
	if nodes := osc.mutation.KeySetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oauthserver.KeySetTable,
			Columns: []string{oauthserver.KeySetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(keyset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := osc.mutation.ClientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthserver.ClientsTable,
			Columns: []string{oauthserver.ClientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OAuthServerCreateBulk is the builder for creating many OAuthServer entities in bulk.
type OAuthServerCreateBulk struct {
	config
	err      error
	builders []*OAuthServerCreate
}

// Save creates the OAuthServer entities in the database.
func (oscb *OAuthServerCreateBulk) Save(ctx context.Context) ([]*OAuthServer, error) {
	if oscb.err != nil {
		return nil, oscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(oscb.builders))
	nodes := make([]*OAuthServer, len(oscb.builders))
	mutators := make([]Mutator, len(oscb.builders))
	for i := range oscb.builders {
		func(i int, root context.Context) {
			builder := oscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OAuthServerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oscb *OAuthServerCreateBulk) SaveX(ctx context.Context) []*OAuthServer {
	v, err := oscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oscb *OAuthServerCreateBulk) Exec(ctx context.Context) error {
	_, err := oscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oscb *OAuthServerCreateBulk) ExecX(ctx context.Context) {
	if err := oscb.Exec(ctx); err != nil {
		panic(err)
	}
}
