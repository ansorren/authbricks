// Code generated by ent, DO NOT EDIT.

package session

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"go.authbricks.com/bricks/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Session {
	return predicate.Session(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Session {
	return predicate.Session(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldCreatedAt, v))
}

// ServerName applies equality check predicate on the "server_name" field. It's identical to ServerNameEQ.
func ServerName(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldServerName, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldCreatedAt, v))
}

// ServerNameEQ applies the EQ predicate on the "server_name" field.
func ServerNameEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldServerName, v))
}

// ServerNameNEQ applies the NEQ predicate on the "server_name" field.
func ServerNameNEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldServerName, v))
}

// ServerNameIn applies the In predicate on the "server_name" field.
func ServerNameIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldServerName, vs...))
}

// ServerNameNotIn applies the NotIn predicate on the "server_name" field.
func ServerNameNotIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldServerName, vs...))
}

// ServerNameGT applies the GT predicate on the "server_name" field.
func ServerNameGT(v string) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldServerName, v))
}

// ServerNameGTE applies the GTE predicate on the "server_name" field.
func ServerNameGTE(v string) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldServerName, v))
}

// ServerNameLT applies the LT predicate on the "server_name" field.
func ServerNameLT(v string) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldServerName, v))
}

// ServerNameLTE applies the LTE predicate on the "server_name" field.
func ServerNameLTE(v string) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldServerName, v))
}

// ServerNameContains applies the Contains predicate on the "server_name" field.
func ServerNameContains(v string) predicate.Session {
	return predicate.Session(sql.FieldContains(FieldServerName, v))
}

// ServerNameHasPrefix applies the HasPrefix predicate on the "server_name" field.
func ServerNameHasPrefix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasPrefix(FieldServerName, v))
}

// ServerNameHasSuffix applies the HasSuffix predicate on the "server_name" field.
func ServerNameHasSuffix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasSuffix(FieldServerName, v))
}

// ServerNameEqualFold applies the EqualFold predicate on the "server_name" field.
func ServerNameEqualFold(v string) predicate.Session {
	return predicate.Session(sql.FieldEqualFold(FieldServerName, v))
}

// ServerNameContainsFold applies the ContainsFold predicate on the "server_name" field.
func ServerNameContainsFold(v string) predicate.Session {
	return predicate.Session(sql.FieldContainsFold(FieldServerName, v))
}

// HasAuthorizationPayload applies the HasEdge predicate on the "authorization_payload" edge.
func HasAuthorizationPayload() predicate.Session {
	return predicate.Session(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, AuthorizationPayloadTable, AuthorizationPayloadColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAuthorizationPayloadWith applies the HasEdge predicate on the "authorization_payload" edge with a given conditions (other predicates).
func HasAuthorizationPayloadWith(preds ...predicate.AuthorizationPayload) predicate.Session {
	return predicate.Session(func(s *sql.Selector) {
		step := newAuthorizationPayloadStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Session) predicate.Session {
	return predicate.Session(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Session) predicate.Session {
	return predicate.Session(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Session) predicate.Session {
	return predicate.Session(sql.NotPredicates(p))
}
