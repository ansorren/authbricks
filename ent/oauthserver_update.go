// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.authbricks.com/bricks/ent/keyset"
	"go.authbricks.com/bricks/ent/oauthclient"
	"go.authbricks.com/bricks/ent/oauthserver"
	"go.authbricks.com/bricks/ent/predicate"
)

// OAuthServerUpdate is the builder for updating OAuthServer entities.
type OAuthServerUpdate struct {
	config
	hooks    []Hook
	mutation *OAuthServerMutation
}

// Where appends a list predicates to the OAuthServerUpdate builder.
func (osu *OAuthServerUpdate) Where(ps ...predicate.OAuthServer) *OAuthServerUpdate {
	osu.mutation.Where(ps...)
	return osu
}

// SetKeySetID sets the "key_set" edge to the KeySet entity by ID.
func (osu *OAuthServerUpdate) SetKeySetID(id string) *OAuthServerUpdate {
	osu.mutation.SetKeySetID(id)
	return osu
}

// SetNillableKeySetID sets the "key_set" edge to the KeySet entity by ID if the given value is not nil.
func (osu *OAuthServerUpdate) SetNillableKeySetID(id *string) *OAuthServerUpdate {
	if id != nil {
		osu = osu.SetKeySetID(*id)
	}
	return osu
}

// SetKeySet sets the "key_set" edge to the KeySet entity.
func (osu *OAuthServerUpdate) SetKeySet(k *KeySet) *OAuthServerUpdate {
	return osu.SetKeySetID(k.ID)
}

// AddClientIDs adds the "clients" edge to the OAuthClient entity by IDs.
func (osu *OAuthServerUpdate) AddClientIDs(ids ...string) *OAuthServerUpdate {
	osu.mutation.AddClientIDs(ids...)
	return osu
}

// AddClients adds the "clients" edges to the OAuthClient entity.
func (osu *OAuthServerUpdate) AddClients(o ...*OAuthClient) *OAuthServerUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return osu.AddClientIDs(ids...)
}

// Mutation returns the OAuthServerMutation object of the builder.
func (osu *OAuthServerUpdate) Mutation() *OAuthServerMutation {
	return osu.mutation
}

// ClearKeySet clears the "key_set" edge to the KeySet entity.
func (osu *OAuthServerUpdate) ClearKeySet() *OAuthServerUpdate {
	osu.mutation.ClearKeySet()
	return osu
}

// ClearClients clears all "clients" edges to the OAuthClient entity.
func (osu *OAuthServerUpdate) ClearClients() *OAuthServerUpdate {
	osu.mutation.ClearClients()
	return osu
}

// RemoveClientIDs removes the "clients" edge to OAuthClient entities by IDs.
func (osu *OAuthServerUpdate) RemoveClientIDs(ids ...string) *OAuthServerUpdate {
	osu.mutation.RemoveClientIDs(ids...)
	return osu
}

// RemoveClients removes "clients" edges to OAuthClient entities.
func (osu *OAuthServerUpdate) RemoveClients(o ...*OAuthClient) *OAuthServerUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return osu.RemoveClientIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (osu *OAuthServerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, osu.sqlSave, osu.mutation, osu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (osu *OAuthServerUpdate) SaveX(ctx context.Context) int {
	affected, err := osu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (osu *OAuthServerUpdate) Exec(ctx context.Context) error {
	_, err := osu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osu *OAuthServerUpdate) ExecX(ctx context.Context) {
	if err := osu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (osu *OAuthServerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(oauthserver.Table, oauthserver.Columns, sqlgraph.NewFieldSpec(oauthserver.FieldID, field.TypeInt))
	if ps := osu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if osu.mutation.KeySetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oauthserver.KeySetTable,
			Columns: []string{oauthserver.KeySetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(keyset.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osu.mutation.KeySetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oauthserver.KeySetTable,
			Columns: []string{oauthserver.KeySetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(keyset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if osu.mutation.ClientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthserver.ClientsTable,
			Columns: []string{oauthserver.ClientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osu.mutation.RemovedClientsIDs(); len(nodes) > 0 && !osu.mutation.ClientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthserver.ClientsTable,
			Columns: []string{oauthserver.ClientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osu.mutation.ClientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthserver.ClientsTable,
			Columns: []string{oauthserver.ClientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, osu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthserver.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	osu.mutation.done = true
	return n, nil
}

// OAuthServerUpdateOne is the builder for updating a single OAuthServer entity.
type OAuthServerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OAuthServerMutation
}

// SetKeySetID sets the "key_set" edge to the KeySet entity by ID.
func (osuo *OAuthServerUpdateOne) SetKeySetID(id string) *OAuthServerUpdateOne {
	osuo.mutation.SetKeySetID(id)
	return osuo
}

// SetNillableKeySetID sets the "key_set" edge to the KeySet entity by ID if the given value is not nil.
func (osuo *OAuthServerUpdateOne) SetNillableKeySetID(id *string) *OAuthServerUpdateOne {
	if id != nil {
		osuo = osuo.SetKeySetID(*id)
	}
	return osuo
}

// SetKeySet sets the "key_set" edge to the KeySet entity.
func (osuo *OAuthServerUpdateOne) SetKeySet(k *KeySet) *OAuthServerUpdateOne {
	return osuo.SetKeySetID(k.ID)
}

// AddClientIDs adds the "clients" edge to the OAuthClient entity by IDs.
func (osuo *OAuthServerUpdateOne) AddClientIDs(ids ...string) *OAuthServerUpdateOne {
	osuo.mutation.AddClientIDs(ids...)
	return osuo
}

// AddClients adds the "clients" edges to the OAuthClient entity.
func (osuo *OAuthServerUpdateOne) AddClients(o ...*OAuthClient) *OAuthServerUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return osuo.AddClientIDs(ids...)
}

// Mutation returns the OAuthServerMutation object of the builder.
func (osuo *OAuthServerUpdateOne) Mutation() *OAuthServerMutation {
	return osuo.mutation
}

// ClearKeySet clears the "key_set" edge to the KeySet entity.
func (osuo *OAuthServerUpdateOne) ClearKeySet() *OAuthServerUpdateOne {
	osuo.mutation.ClearKeySet()
	return osuo
}

// ClearClients clears all "clients" edges to the OAuthClient entity.
func (osuo *OAuthServerUpdateOne) ClearClients() *OAuthServerUpdateOne {
	osuo.mutation.ClearClients()
	return osuo
}

// RemoveClientIDs removes the "clients" edge to OAuthClient entities by IDs.
func (osuo *OAuthServerUpdateOne) RemoveClientIDs(ids ...string) *OAuthServerUpdateOne {
	osuo.mutation.RemoveClientIDs(ids...)
	return osuo
}

// RemoveClients removes "clients" edges to OAuthClient entities.
func (osuo *OAuthServerUpdateOne) RemoveClients(o ...*OAuthClient) *OAuthServerUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return osuo.RemoveClientIDs(ids...)
}

// Where appends a list predicates to the OAuthServerUpdate builder.
func (osuo *OAuthServerUpdateOne) Where(ps ...predicate.OAuthServer) *OAuthServerUpdateOne {
	osuo.mutation.Where(ps...)
	return osuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (osuo *OAuthServerUpdateOne) Select(field string, fields ...string) *OAuthServerUpdateOne {
	osuo.fields = append([]string{field}, fields...)
	return osuo
}

// Save executes the query and returns the updated OAuthServer entity.
func (osuo *OAuthServerUpdateOne) Save(ctx context.Context) (*OAuthServer, error) {
	return withHooks(ctx, osuo.sqlSave, osuo.mutation, osuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (osuo *OAuthServerUpdateOne) SaveX(ctx context.Context) *OAuthServer {
	node, err := osuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (osuo *OAuthServerUpdateOne) Exec(ctx context.Context) error {
	_, err := osuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osuo *OAuthServerUpdateOne) ExecX(ctx context.Context) {
	if err := osuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (osuo *OAuthServerUpdateOne) sqlSave(ctx context.Context) (_node *OAuthServer, err error) {
	_spec := sqlgraph.NewUpdateSpec(oauthserver.Table, oauthserver.Columns, sqlgraph.NewFieldSpec(oauthserver.FieldID, field.TypeInt))
	id, ok := osuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OAuthServer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := osuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oauthserver.FieldID)
		for _, f := range fields {
			if !oauthserver.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oauthserver.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := osuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if osuo.mutation.KeySetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oauthserver.KeySetTable,
			Columns: []string{oauthserver.KeySetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(keyset.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osuo.mutation.KeySetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oauthserver.KeySetTable,
			Columns: []string{oauthserver.KeySetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(keyset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if osuo.mutation.ClientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthserver.ClientsTable,
			Columns: []string{oauthserver.ClientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osuo.mutation.RemovedClientsIDs(); len(nodes) > 0 && !osuo.mutation.ClientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthserver.ClientsTable,
			Columns: []string{oauthserver.ClientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osuo.mutation.ClientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthserver.ClientsTable,
			Columns: []string{oauthserver.ClientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OAuthServer{config: osuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, osuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthserver.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	osuo.mutation.done = true
	return _node, nil
}
