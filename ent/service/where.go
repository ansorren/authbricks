// Code generated by ent, DO NOT EDIT.

package service

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"go.authbricks.com/bricks/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Service {
	return predicate.Service(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Service {
	return predicate.Service(sql.FieldContainsFold(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldName, v))
}

// Issuer applies equality check predicate on the "issuer" field. It's identical to IssuerEQ.
func Issuer(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldIssuer, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldDescription, v))
}

// ServiceMetadata applies equality check predicate on the "service_metadata" field. It's identical to ServiceMetadataEQ.
func ServiceMetadata(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldServiceMetadata, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Service {
	return predicate.Service(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Service {
	return predicate.Service(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Service {
	return predicate.Service(sql.FieldContainsFold(FieldName, v))
}

// IssuerEQ applies the EQ predicate on the "issuer" field.
func IssuerEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldIssuer, v))
}

// IssuerNEQ applies the NEQ predicate on the "issuer" field.
func IssuerNEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldIssuer, v))
}

// IssuerIn applies the In predicate on the "issuer" field.
func IssuerIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldIssuer, vs...))
}

// IssuerNotIn applies the NotIn predicate on the "issuer" field.
func IssuerNotIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldIssuer, vs...))
}

// IssuerGT applies the GT predicate on the "issuer" field.
func IssuerGT(v string) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldIssuer, v))
}

// IssuerGTE applies the GTE predicate on the "issuer" field.
func IssuerGTE(v string) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldIssuer, v))
}

// IssuerLT applies the LT predicate on the "issuer" field.
func IssuerLT(v string) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldIssuer, v))
}

// IssuerLTE applies the LTE predicate on the "issuer" field.
func IssuerLTE(v string) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldIssuer, v))
}

// IssuerContains applies the Contains predicate on the "issuer" field.
func IssuerContains(v string) predicate.Service {
	return predicate.Service(sql.FieldContains(FieldIssuer, v))
}

// IssuerHasPrefix applies the HasPrefix predicate on the "issuer" field.
func IssuerHasPrefix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasPrefix(FieldIssuer, v))
}

// IssuerHasSuffix applies the HasSuffix predicate on the "issuer" field.
func IssuerHasSuffix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasSuffix(FieldIssuer, v))
}

// IssuerEqualFold applies the EqualFold predicate on the "issuer" field.
func IssuerEqualFold(v string) predicate.Service {
	return predicate.Service(sql.FieldEqualFold(FieldIssuer, v))
}

// IssuerContainsFold applies the ContainsFold predicate on the "issuer" field.
func IssuerContainsFold(v string) predicate.Service {
	return predicate.Service(sql.FieldContainsFold(FieldIssuer, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Service {
	return predicate.Service(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Service {
	return predicate.Service(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Service {
	return predicate.Service(sql.FieldContainsFold(FieldDescription, v))
}

// ServiceMetadataEQ applies the EQ predicate on the "service_metadata" field.
func ServiceMetadataEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldServiceMetadata, v))
}

// ServiceMetadataNEQ applies the NEQ predicate on the "service_metadata" field.
func ServiceMetadataNEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldServiceMetadata, v))
}

// ServiceMetadataIn applies the In predicate on the "service_metadata" field.
func ServiceMetadataIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldServiceMetadata, vs...))
}

// ServiceMetadataNotIn applies the NotIn predicate on the "service_metadata" field.
func ServiceMetadataNotIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldServiceMetadata, vs...))
}

// ServiceMetadataGT applies the GT predicate on the "service_metadata" field.
func ServiceMetadataGT(v string) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldServiceMetadata, v))
}

// ServiceMetadataGTE applies the GTE predicate on the "service_metadata" field.
func ServiceMetadataGTE(v string) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldServiceMetadata, v))
}

// ServiceMetadataLT applies the LT predicate on the "service_metadata" field.
func ServiceMetadataLT(v string) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldServiceMetadata, v))
}

// ServiceMetadataLTE applies the LTE predicate on the "service_metadata" field.
func ServiceMetadataLTE(v string) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldServiceMetadata, v))
}

// ServiceMetadataContains applies the Contains predicate on the "service_metadata" field.
func ServiceMetadataContains(v string) predicate.Service {
	return predicate.Service(sql.FieldContains(FieldServiceMetadata, v))
}

// ServiceMetadataHasPrefix applies the HasPrefix predicate on the "service_metadata" field.
func ServiceMetadataHasPrefix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasPrefix(FieldServiceMetadata, v))
}

// ServiceMetadataHasSuffix applies the HasSuffix predicate on the "service_metadata" field.
func ServiceMetadataHasSuffix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasSuffix(FieldServiceMetadata, v))
}

// ServiceMetadataEqualFold applies the EqualFold predicate on the "service_metadata" field.
func ServiceMetadataEqualFold(v string) predicate.Service {
	return predicate.Service(sql.FieldEqualFold(FieldServiceMetadata, v))
}

// ServiceMetadataContainsFold applies the ContainsFold predicate on the "service_metadata" field.
func ServiceMetadataContainsFold(v string) predicate.Service {
	return predicate.Service(sql.FieldContainsFold(FieldServiceMetadata, v))
}

// HasKeySet applies the HasEdge predicate on the "key_set" edge.
func HasKeySet() predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, KeySetTable, KeySetColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasKeySetWith applies the HasEdge predicate on the "key_set" edge with a given conditions (other predicates).
func HasKeySetWith(preds ...predicate.KeySet) predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		step := newKeySetStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasServiceAuthorizationEndpointConfig applies the HasEdge predicate on the "service_authorization_endpoint_config" edge.
func HasServiceAuthorizationEndpointConfig() predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ServiceAuthorizationEndpointConfigTable, ServiceAuthorizationEndpointConfigColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServiceAuthorizationEndpointConfigWith applies the HasEdge predicate on the "service_authorization_endpoint_config" edge with a given conditions (other predicates).
func HasServiceAuthorizationEndpointConfigWith(preds ...predicate.ServiceAuthorizationEndpointConfig) predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		step := newServiceAuthorizationEndpointConfigStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasServiceIntrospectionEndpointConfig applies the HasEdge predicate on the "service_introspection_endpoint_config" edge.
func HasServiceIntrospectionEndpointConfig() predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ServiceIntrospectionEndpointConfigTable, ServiceIntrospectionEndpointConfigColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServiceIntrospectionEndpointConfigWith applies the HasEdge predicate on the "service_introspection_endpoint_config" edge with a given conditions (other predicates).
func HasServiceIntrospectionEndpointConfigWith(preds ...predicate.ServiceIntrospectionEndpointConfig) predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		step := newServiceIntrospectionEndpointConfigStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasServiceTokenEndpointConfig applies the HasEdge predicate on the "service_token_endpoint_config" edge.
func HasServiceTokenEndpointConfig() predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ServiceTokenEndpointConfigTable, ServiceTokenEndpointConfigColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServiceTokenEndpointConfigWith applies the HasEdge predicate on the "service_token_endpoint_config" edge with a given conditions (other predicates).
func HasServiceTokenEndpointConfigWith(preds ...predicate.ServiceTokenEndpointConfig) predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		step := newServiceTokenEndpointConfigStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasServiceUserInfoEndpointConfig applies the HasEdge predicate on the "service_user_info_endpoint_config" edge.
func HasServiceUserInfoEndpointConfig() predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ServiceUserInfoEndpointConfigTable, ServiceUserInfoEndpointConfigColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServiceUserInfoEndpointConfigWith applies the HasEdge predicate on the "service_user_info_endpoint_config" edge with a given conditions (other predicates).
func HasServiceUserInfoEndpointConfigWith(preds ...predicate.ServiceUserInfoEndpointConfig) predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		step := newServiceUserInfoEndpointConfigStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasServiceJwksEndpointConfig applies the HasEdge predicate on the "service_jwks_endpoint_config" edge.
func HasServiceJwksEndpointConfig() predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ServiceJwksEndpointConfigTable, ServiceJwksEndpointConfigColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServiceJwksEndpointConfigWith applies the HasEdge predicate on the "service_jwks_endpoint_config" edge with a given conditions (other predicates).
func HasServiceJwksEndpointConfigWith(preds ...predicate.ServiceJWKSEndpointConfig) predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		step := newServiceJwksEndpointConfigStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasApplications applies the HasEdge predicate on the "applications" edge.
func HasApplications() predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ApplicationsTable, ApplicationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasApplicationsWith applies the HasEdge predicate on the "applications" edge with a given conditions (other predicates).
func HasApplicationsWith(preds ...predicate.Application) predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		step := newApplicationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Service) predicate.Service {
	return predicate.Service(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Service) predicate.Service {
	return predicate.Service(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Service) predicate.Service {
	return predicate.Service(sql.NotPredicates(p))
}
