// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"go.authbricks.com/bricks/ent/application"
	"go.authbricks.com/bricks/ent/m2mgrant"
)

// M2MGrant is the model entity for the M2MGrant schema.
type M2MGrant struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id"`
	// Scopes holds the value of the "scopes" field.
	Scopes []string `json:"scopes"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the M2MGrantQuery when eager-loading is set.
	Edges                  M2MGrantEdges `json:"edges"`
	application_m2m_grants *string
	selectValues           sql.SelectValues
}

// M2MGrantEdges holds the relations/edges for other nodes in the graph.
type M2MGrantEdges struct {
	// Client holds the value of the client edge.
	Client *Application `json:"client,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ClientOrErr returns the Client value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e M2MGrantEdges) ClientOrErr() (*Application, error) {
	if e.Client != nil {
		return e.Client, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: application.Label}
	}
	return nil, &NotLoadedError{edge: "client"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*M2MGrant) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case m2mgrant.FieldScopes:
			values[i] = new([]byte)
		case m2mgrant.FieldID:
			values[i] = new(sql.NullString)
		case m2mgrant.ForeignKeys[0]: // application_m2m_grants
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the M2MGrant fields.
func (mg *M2MGrant) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case m2mgrant.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				mg.ID = value.String
			}
		case m2mgrant.FieldScopes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field scopes", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &mg.Scopes); err != nil {
					return fmt.Errorf("unmarshal field scopes: %w", err)
				}
			}
		case m2mgrant.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field application_m2m_grants", values[i])
			} else if value.Valid {
				mg.application_m2m_grants = new(string)
				*mg.application_m2m_grants = value.String
			}
		default:
			mg.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the M2MGrant.
// This includes values selected through modifiers, order, etc.
func (mg *M2MGrant) Value(name string) (ent.Value, error) {
	return mg.selectValues.Get(name)
}

// QueryClient queries the "client" edge of the M2MGrant entity.
func (mg *M2MGrant) QueryClient() *ApplicationQuery {
	return NewM2MGrantClient(mg.config).QueryClient(mg)
}

// Update returns a builder for updating this M2MGrant.
// Note that you need to call M2MGrant.Unwrap() before calling this method if this M2MGrant
// was returned from a transaction, and the transaction was committed or rolled back.
func (mg *M2MGrant) Update() *M2MGrantUpdateOne {
	return NewM2MGrantClient(mg.config).UpdateOne(mg)
}

// Unwrap unwraps the M2MGrant entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mg *M2MGrant) Unwrap() *M2MGrant {
	_tx, ok := mg.config.driver.(*txDriver)
	if !ok {
		panic("ent: M2MGrant is not a transactional entity")
	}
	mg.config.driver = _tx.drv
	return mg
}

// String implements the fmt.Stringer.
func (mg *M2MGrant) String() string {
	var builder strings.Builder
	builder.WriteString("M2MGrant(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mg.ID))
	builder.WriteString("scopes=")
	builder.WriteString(fmt.Sprintf("%v", mg.Scopes))
	builder.WriteByte(')')
	return builder.String()
}

// M2MGrants is a parsable slice of M2MGrant.
type M2MGrants []*M2MGrant
