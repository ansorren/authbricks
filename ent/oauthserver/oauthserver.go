// Code generated by ent, DO NOT EDIT.

package oauthserver

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the oauthserver type in the database.
	Label = "oauth_server"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// EdgeKeySet holds the string denoting the key_set edge name in mutations.
	EdgeKeySet = "key_set"
	// EdgeClients holds the string denoting the clients edge name in mutations.
	EdgeClients = "clients"
	// Table holds the table name of the oauthserver in the database.
	Table = "oauth_servers"
	// KeySetTable is the table that holds the key_set relation/edge.
	KeySetTable = "key_sets"
	// KeySetInverseTable is the table name for the KeySet entity.
	// It exists in this package in order to avoid circular dependency with the "keyset" package.
	KeySetInverseTable = "key_sets"
	// KeySetColumn is the table column denoting the key_set relation/edge.
	KeySetColumn = "oauth_server_key_set"
	// ClientsTable is the table that holds the clients relation/edge.
	ClientsTable = "oauth_clients"
	// ClientsInverseTable is the table name for the OAuthClient entity.
	// It exists in this package in order to avoid circular dependency with the "oauthclient" package.
	ClientsInverseTable = "oauth_clients"
	// ClientsColumn is the table column denoting the clients relation/edge.
	ClientsColumn = "oauth_server_clients"
)

// Columns holds all SQL columns for oauthserver fields.
var Columns = []string{
	FieldID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the OAuthServer queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByKeySetField orders the results by key_set field.
func ByKeySetField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newKeySetStep(), sql.OrderByField(field, opts...))
	}
}

// ByClientsCount orders the results by clients count.
func ByClientsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newClientsStep(), opts...)
	}
}

// ByClients orders the results by clients terms.
func ByClients(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClientsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newKeySetStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(KeySetInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, KeySetTable, KeySetColumn),
	)
}
func newClientsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClientsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ClientsTable, ClientsColumn),
	)
}
