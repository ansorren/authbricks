// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"go.authbricks.com/bricks/ent/authorizationcode"
)

// AuthorizationCode is the model entity for the AuthorizationCode schema.
type AuthorizationCode struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id"`
	// Application holds the value of the "application" field.
	Application string `json:"application"`
	// CodeChallenge holds the value of the "code_challenge" field.
	CodeChallenge string `json:"code_challenge"`
	// CodeChallengeMethod holds the value of the "code_challenge_method" field.
	CodeChallengeMethod string `json:"code_challenge_method"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at"`
	// AuthTime holds the value of the "auth_time" field.
	AuthTime time.Time `json:"auth_time"`
	// RedirectURI holds the value of the "redirect_uri" field.
	RedirectURI string `json:"redirect_uri"`
	// Nonce holds the value of the "nonce" field.
	Nonce string `json:"nonce"`
	// Service holds the value of the "service" field.
	Service string `json:"service"`
	// State holds the value of the "state" field.
	State string `json:"state"`
	// Subject holds the value of the "subject" field.
	Subject string `json:"subject"`
	// GrantedScopes holds the value of the "granted_scopes" field.
	GrantedScopes string `json:"granted_scopes"`
	selectValues  sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AuthorizationCode) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case authorizationcode.FieldID, authorizationcode.FieldApplication, authorizationcode.FieldCodeChallenge, authorizationcode.FieldCodeChallengeMethod, authorizationcode.FieldRedirectURI, authorizationcode.FieldNonce, authorizationcode.FieldService, authorizationcode.FieldState, authorizationcode.FieldSubject, authorizationcode.FieldGrantedScopes:
			values[i] = new(sql.NullString)
		case authorizationcode.FieldCreatedAt, authorizationcode.FieldAuthTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AuthorizationCode fields.
func (ac *AuthorizationCode) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case authorizationcode.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ac.ID = value.String
			}
		case authorizationcode.FieldApplication:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field application", values[i])
			} else if value.Valid {
				ac.Application = value.String
			}
		case authorizationcode.FieldCodeChallenge:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code_challenge", values[i])
			} else if value.Valid {
				ac.CodeChallenge = value.String
			}
		case authorizationcode.FieldCodeChallengeMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code_challenge_method", values[i])
			} else if value.Valid {
				ac.CodeChallengeMethod = value.String
			}
		case authorizationcode.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ac.CreatedAt = value.Time
			}
		case authorizationcode.FieldAuthTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field auth_time", values[i])
			} else if value.Valid {
				ac.AuthTime = value.Time
			}
		case authorizationcode.FieldRedirectURI:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field redirect_uri", values[i])
			} else if value.Valid {
				ac.RedirectURI = value.String
			}
		case authorizationcode.FieldNonce:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nonce", values[i])
			} else if value.Valid {
				ac.Nonce = value.String
			}
		case authorizationcode.FieldService:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field service", values[i])
			} else if value.Valid {
				ac.Service = value.String
			}
		case authorizationcode.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				ac.State = value.String
			}
		case authorizationcode.FieldSubject:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subject", values[i])
			} else if value.Valid {
				ac.Subject = value.String
			}
		case authorizationcode.FieldGrantedScopes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field granted_scopes", values[i])
			} else if value.Valid {
				ac.GrantedScopes = value.String
			}
		default:
			ac.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AuthorizationCode.
// This includes values selected through modifiers, order, etc.
func (ac *AuthorizationCode) Value(name string) (ent.Value, error) {
	return ac.selectValues.Get(name)
}

// Update returns a builder for updating this AuthorizationCode.
// Note that you need to call AuthorizationCode.Unwrap() before calling this method if this AuthorizationCode
// was returned from a transaction, and the transaction was committed or rolled back.
func (ac *AuthorizationCode) Update() *AuthorizationCodeUpdateOne {
	return NewAuthorizationCodeClient(ac.config).UpdateOne(ac)
}

// Unwrap unwraps the AuthorizationCode entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ac *AuthorizationCode) Unwrap() *AuthorizationCode {
	_tx, ok := ac.config.driver.(*txDriver)
	if !ok {
		panic("ent: AuthorizationCode is not a transactional entity")
	}
	ac.config.driver = _tx.drv
	return ac
}

// String implements the fmt.Stringer.
func (ac *AuthorizationCode) String() string {
	var builder strings.Builder
	builder.WriteString("AuthorizationCode(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ac.ID))
	builder.WriteString("application=")
	builder.WriteString(ac.Application)
	builder.WriteString(", ")
	builder.WriteString("code_challenge=")
	builder.WriteString(ac.CodeChallenge)
	builder.WriteString(", ")
	builder.WriteString("code_challenge_method=")
	builder.WriteString(ac.CodeChallengeMethod)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ac.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("auth_time=")
	builder.WriteString(ac.AuthTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("redirect_uri=")
	builder.WriteString(ac.RedirectURI)
	builder.WriteString(", ")
	builder.WriteString("nonce=")
	builder.WriteString(ac.Nonce)
	builder.WriteString(", ")
	builder.WriteString("service=")
	builder.WriteString(ac.Service)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(ac.State)
	builder.WriteString(", ")
	builder.WriteString("subject=")
	builder.WriteString(ac.Subject)
	builder.WriteString(", ")
	builder.WriteString("granted_scopes=")
	builder.WriteString(ac.GrantedScopes)
	builder.WriteByte(')')
	return builder.String()
}

// AuthorizationCodes is a parsable slice of AuthorizationCode.
type AuthorizationCodes []*AuthorizationCode
