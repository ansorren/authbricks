// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"go.authbricks.com/bricks/ent/service"
	"go.authbricks.com/bricks/ent/serviceauthorizationendpointconfig"
)

// ServiceAuthorizationEndpointConfig is the model entity for the ServiceAuthorizationEndpointConfig schema.
type ServiceAuthorizationEndpointConfig struct {
	config `hcl:"-" json:"-"`
	// ID of the ent.
	ID string `json:"id" hcl:"id"`
	// Endpoint holds the value of the "endpoint" field.
	Endpoint string `json:"endpoint" hcl:"endpoint"`
	// PkceRequired holds the value of the "pkce_required" field.
	PkceRequired bool `json:"pkce_required" hcl:"pkce_required"`
	// PkceS256CodeChallengeMethodRequired holds the value of the "pkce_s256_code_challenge_method_required" field.
	PkceS256CodeChallengeMethodRequired bool `json:"pkce_s256_code_challenge_method" hcl:"pkce_s256_code_challenge_method"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ServiceAuthorizationEndpointConfigQuery when eager-loading is set.
	Edges                                         ServiceAuthorizationEndpointConfigEdges `json:"edges"`
	service_service_authorization_endpoint_config *string
	selectValues                                  sql.SelectValues
}

// ServiceAuthorizationEndpointConfigEdges holds the relations/edges for other nodes in the graph.
type ServiceAuthorizationEndpointConfigEdges struct {
	// Service holds the value of the service edge.
	Service *Service `json:"service,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ServiceOrErr returns the Service value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServiceAuthorizationEndpointConfigEdges) ServiceOrErr() (*Service, error) {
	if e.Service != nil {
		return e.Service, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: service.Label}
	}
	return nil, &NotLoadedError{edge: "service"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ServiceAuthorizationEndpointConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case serviceauthorizationendpointconfig.FieldPkceRequired, serviceauthorizationendpointconfig.FieldPkceS256CodeChallengeMethodRequired:
			values[i] = new(sql.NullBool)
		case serviceauthorizationendpointconfig.FieldID, serviceauthorizationendpointconfig.FieldEndpoint:
			values[i] = new(sql.NullString)
		case serviceauthorizationendpointconfig.ForeignKeys[0]: // service_service_authorization_endpoint_config
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ServiceAuthorizationEndpointConfig fields.
func (saec *ServiceAuthorizationEndpointConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case serviceauthorizationendpointconfig.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				saec.ID = value.String
			}
		case serviceauthorizationendpointconfig.FieldEndpoint:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field endpoint", values[i])
			} else if value.Valid {
				saec.Endpoint = value.String
			}
		case serviceauthorizationendpointconfig.FieldPkceRequired:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field pkce_required", values[i])
			} else if value.Valid {
				saec.PkceRequired = value.Bool
			}
		case serviceauthorizationendpointconfig.FieldPkceS256CodeChallengeMethodRequired:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field pkce_s256_code_challenge_method_required", values[i])
			} else if value.Valid {
				saec.PkceS256CodeChallengeMethodRequired = value.Bool
			}
		case serviceauthorizationendpointconfig.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field service_service_authorization_endpoint_config", values[i])
			} else if value.Valid {
				saec.service_service_authorization_endpoint_config = new(string)
				*saec.service_service_authorization_endpoint_config = value.String
			}
		default:
			saec.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ServiceAuthorizationEndpointConfig.
// This includes values selected through modifiers, order, etc.
func (saec *ServiceAuthorizationEndpointConfig) Value(name string) (ent.Value, error) {
	return saec.selectValues.Get(name)
}

// QueryService queries the "service" edge of the ServiceAuthorizationEndpointConfig entity.
func (saec *ServiceAuthorizationEndpointConfig) QueryService() *ServiceQuery {
	return NewServiceAuthorizationEndpointConfigClient(saec.config).QueryService(saec)
}

// Update returns a builder for updating this ServiceAuthorizationEndpointConfig.
// Note that you need to call ServiceAuthorizationEndpointConfig.Unwrap() before calling this method if this ServiceAuthorizationEndpointConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (saec *ServiceAuthorizationEndpointConfig) Update() *ServiceAuthorizationEndpointConfigUpdateOne {
	return NewServiceAuthorizationEndpointConfigClient(saec.config).UpdateOne(saec)
}

// Unwrap unwraps the ServiceAuthorizationEndpointConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (saec *ServiceAuthorizationEndpointConfig) Unwrap() *ServiceAuthorizationEndpointConfig {
	_tx, ok := saec.config.driver.(*txDriver)
	if !ok {
		panic("ent: ServiceAuthorizationEndpointConfig is not a transactional entity")
	}
	saec.config.driver = _tx.drv
	return saec
}

// String implements the fmt.Stringer.
func (saec *ServiceAuthorizationEndpointConfig) String() string {
	var builder strings.Builder
	builder.WriteString("ServiceAuthorizationEndpointConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", saec.ID))
	builder.WriteString("endpoint=")
	builder.WriteString(saec.Endpoint)
	builder.WriteString(", ")
	builder.WriteString("pkce_required=")
	builder.WriteString(fmt.Sprintf("%v", saec.PkceRequired))
	builder.WriteString(", ")
	builder.WriteString("pkce_s256_code_challenge_method_required=")
	builder.WriteString(fmt.Sprintf("%v", saec.PkceS256CodeChallengeMethodRequired))
	builder.WriteByte(')')
	return builder.String()
}

// ServiceAuthorizationEndpointConfigs is a parsable slice of ServiceAuthorizationEndpointConfig.
type ServiceAuthorizationEndpointConfigs []*ServiceAuthorizationEndpointConfig
