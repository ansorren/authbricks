// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.authbricks.com/bricks/ent/keyset"
	"go.authbricks.com/bricks/ent/oauthserver"
	"go.authbricks.com/bricks/ent/predicate"
	"go.authbricks.com/bricks/ent/signingkey"
)

// KeySetUpdate is the builder for updating KeySet entities.
type KeySetUpdate struct {
	config
	hooks    []Hook
	mutation *KeySetMutation
}

// Where appends a list predicates to the KeySetUpdate builder.
func (ksu *KeySetUpdate) Where(ps ...predicate.KeySet) *KeySetUpdate {
	ksu.mutation.Where(ps...)
	return ksu
}

// SetOauthServerID sets the "oauth_server" edge to the OAuthServer entity by ID.
func (ksu *KeySetUpdate) SetOauthServerID(id int) *KeySetUpdate {
	ksu.mutation.SetOauthServerID(id)
	return ksu
}

// SetNillableOauthServerID sets the "oauth_server" edge to the OAuthServer entity by ID if the given value is not nil.
func (ksu *KeySetUpdate) SetNillableOauthServerID(id *int) *KeySetUpdate {
	if id != nil {
		ksu = ksu.SetOauthServerID(*id)
	}
	return ksu
}

// SetOauthServer sets the "oauth_server" edge to the OAuthServer entity.
func (ksu *KeySetUpdate) SetOauthServer(o *OAuthServer) *KeySetUpdate {
	return ksu.SetOauthServerID(o.ID)
}

// AddSigningKeyIDs adds the "signing_keys" edge to the SigningKey entity by IDs.
func (ksu *KeySetUpdate) AddSigningKeyIDs(ids ...string) *KeySetUpdate {
	ksu.mutation.AddSigningKeyIDs(ids...)
	return ksu
}

// AddSigningKeys adds the "signing_keys" edges to the SigningKey entity.
func (ksu *KeySetUpdate) AddSigningKeys(s ...*SigningKey) *KeySetUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ksu.AddSigningKeyIDs(ids...)
}

// Mutation returns the KeySetMutation object of the builder.
func (ksu *KeySetUpdate) Mutation() *KeySetMutation {
	return ksu.mutation
}

// ClearOauthServer clears the "oauth_server" edge to the OAuthServer entity.
func (ksu *KeySetUpdate) ClearOauthServer() *KeySetUpdate {
	ksu.mutation.ClearOauthServer()
	return ksu
}

// ClearSigningKeys clears all "signing_keys" edges to the SigningKey entity.
func (ksu *KeySetUpdate) ClearSigningKeys() *KeySetUpdate {
	ksu.mutation.ClearSigningKeys()
	return ksu
}

// RemoveSigningKeyIDs removes the "signing_keys" edge to SigningKey entities by IDs.
func (ksu *KeySetUpdate) RemoveSigningKeyIDs(ids ...string) *KeySetUpdate {
	ksu.mutation.RemoveSigningKeyIDs(ids...)
	return ksu
}

// RemoveSigningKeys removes "signing_keys" edges to SigningKey entities.
func (ksu *KeySetUpdate) RemoveSigningKeys(s ...*SigningKey) *KeySetUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ksu.RemoveSigningKeyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ksu *KeySetUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ksu.sqlSave, ksu.mutation, ksu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ksu *KeySetUpdate) SaveX(ctx context.Context) int {
	affected, err := ksu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ksu *KeySetUpdate) Exec(ctx context.Context) error {
	_, err := ksu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ksu *KeySetUpdate) ExecX(ctx context.Context) {
	if err := ksu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ksu *KeySetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(keyset.Table, keyset.Columns, sqlgraph.NewFieldSpec(keyset.FieldID, field.TypeString))
	if ps := ksu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ksu.mutation.OauthServerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   keyset.OauthServerTable,
			Columns: []string{keyset.OauthServerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthserver.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ksu.mutation.OauthServerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   keyset.OauthServerTable,
			Columns: []string{keyset.OauthServerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthserver.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ksu.mutation.SigningKeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   keyset.SigningKeysTable,
			Columns: []string{keyset.SigningKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signingkey.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ksu.mutation.RemovedSigningKeysIDs(); len(nodes) > 0 && !ksu.mutation.SigningKeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   keyset.SigningKeysTable,
			Columns: []string{keyset.SigningKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signingkey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ksu.mutation.SigningKeysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   keyset.SigningKeysTable,
			Columns: []string{keyset.SigningKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signingkey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ksu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{keyset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ksu.mutation.done = true
	return n, nil
}

// KeySetUpdateOne is the builder for updating a single KeySet entity.
type KeySetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *KeySetMutation
}

// SetOauthServerID sets the "oauth_server" edge to the OAuthServer entity by ID.
func (ksuo *KeySetUpdateOne) SetOauthServerID(id int) *KeySetUpdateOne {
	ksuo.mutation.SetOauthServerID(id)
	return ksuo
}

// SetNillableOauthServerID sets the "oauth_server" edge to the OAuthServer entity by ID if the given value is not nil.
func (ksuo *KeySetUpdateOne) SetNillableOauthServerID(id *int) *KeySetUpdateOne {
	if id != nil {
		ksuo = ksuo.SetOauthServerID(*id)
	}
	return ksuo
}

// SetOauthServer sets the "oauth_server" edge to the OAuthServer entity.
func (ksuo *KeySetUpdateOne) SetOauthServer(o *OAuthServer) *KeySetUpdateOne {
	return ksuo.SetOauthServerID(o.ID)
}

// AddSigningKeyIDs adds the "signing_keys" edge to the SigningKey entity by IDs.
func (ksuo *KeySetUpdateOne) AddSigningKeyIDs(ids ...string) *KeySetUpdateOne {
	ksuo.mutation.AddSigningKeyIDs(ids...)
	return ksuo
}

// AddSigningKeys adds the "signing_keys" edges to the SigningKey entity.
func (ksuo *KeySetUpdateOne) AddSigningKeys(s ...*SigningKey) *KeySetUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ksuo.AddSigningKeyIDs(ids...)
}

// Mutation returns the KeySetMutation object of the builder.
func (ksuo *KeySetUpdateOne) Mutation() *KeySetMutation {
	return ksuo.mutation
}

// ClearOauthServer clears the "oauth_server" edge to the OAuthServer entity.
func (ksuo *KeySetUpdateOne) ClearOauthServer() *KeySetUpdateOne {
	ksuo.mutation.ClearOauthServer()
	return ksuo
}

// ClearSigningKeys clears all "signing_keys" edges to the SigningKey entity.
func (ksuo *KeySetUpdateOne) ClearSigningKeys() *KeySetUpdateOne {
	ksuo.mutation.ClearSigningKeys()
	return ksuo
}

// RemoveSigningKeyIDs removes the "signing_keys" edge to SigningKey entities by IDs.
func (ksuo *KeySetUpdateOne) RemoveSigningKeyIDs(ids ...string) *KeySetUpdateOne {
	ksuo.mutation.RemoveSigningKeyIDs(ids...)
	return ksuo
}

// RemoveSigningKeys removes "signing_keys" edges to SigningKey entities.
func (ksuo *KeySetUpdateOne) RemoveSigningKeys(s ...*SigningKey) *KeySetUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ksuo.RemoveSigningKeyIDs(ids...)
}

// Where appends a list predicates to the KeySetUpdate builder.
func (ksuo *KeySetUpdateOne) Where(ps ...predicate.KeySet) *KeySetUpdateOne {
	ksuo.mutation.Where(ps...)
	return ksuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ksuo *KeySetUpdateOne) Select(field string, fields ...string) *KeySetUpdateOne {
	ksuo.fields = append([]string{field}, fields...)
	return ksuo
}

// Save executes the query and returns the updated KeySet entity.
func (ksuo *KeySetUpdateOne) Save(ctx context.Context) (*KeySet, error) {
	return withHooks(ctx, ksuo.sqlSave, ksuo.mutation, ksuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ksuo *KeySetUpdateOne) SaveX(ctx context.Context) *KeySet {
	node, err := ksuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ksuo *KeySetUpdateOne) Exec(ctx context.Context) error {
	_, err := ksuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ksuo *KeySetUpdateOne) ExecX(ctx context.Context) {
	if err := ksuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ksuo *KeySetUpdateOne) sqlSave(ctx context.Context) (_node *KeySet, err error) {
	_spec := sqlgraph.NewUpdateSpec(keyset.Table, keyset.Columns, sqlgraph.NewFieldSpec(keyset.FieldID, field.TypeString))
	id, ok := ksuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "KeySet.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ksuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, keyset.FieldID)
		for _, f := range fields {
			if !keyset.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != keyset.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ksuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ksuo.mutation.OauthServerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   keyset.OauthServerTable,
			Columns: []string{keyset.OauthServerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthserver.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ksuo.mutation.OauthServerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   keyset.OauthServerTable,
			Columns: []string{keyset.OauthServerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthserver.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ksuo.mutation.SigningKeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   keyset.SigningKeysTable,
			Columns: []string{keyset.SigningKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signingkey.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ksuo.mutation.RemovedSigningKeysIDs(); len(nodes) > 0 && !ksuo.mutation.SigningKeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   keyset.SigningKeysTable,
			Columns: []string{keyset.SigningKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signingkey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ksuo.mutation.SigningKeysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   keyset.SigningKeysTable,
			Columns: []string{keyset.SigningKeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signingkey.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &KeySet{config: ksuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ksuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{keyset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ksuo.mutation.done = true
	return _node, nil
}
