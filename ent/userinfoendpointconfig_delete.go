// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.authbricks.com/bricks/ent/predicate"
	"go.authbricks.com/bricks/ent/userinfoendpointconfig"
)

// UserInfoEndpointConfigDelete is the builder for deleting a UserInfoEndpointConfig entity.
type UserInfoEndpointConfigDelete struct {
	config
	hooks    []Hook
	mutation *UserInfoEndpointConfigMutation
}

// Where appends a list predicates to the UserInfoEndpointConfigDelete builder.
func (uiecd *UserInfoEndpointConfigDelete) Where(ps ...predicate.UserInfoEndpointConfig) *UserInfoEndpointConfigDelete {
	uiecd.mutation.Where(ps...)
	return uiecd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (uiecd *UserInfoEndpointConfigDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, uiecd.sqlExec, uiecd.mutation, uiecd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (uiecd *UserInfoEndpointConfigDelete) ExecX(ctx context.Context) int {
	n, err := uiecd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (uiecd *UserInfoEndpointConfigDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(userinfoendpointconfig.Table, sqlgraph.NewFieldSpec(userinfoendpointconfig.FieldID, field.TypeString))
	if ps := uiecd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, uiecd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	uiecd.mutation.done = true
	return affected, err
}

// UserInfoEndpointConfigDeleteOne is the builder for deleting a single UserInfoEndpointConfig entity.
type UserInfoEndpointConfigDeleteOne struct {
	uiecd *UserInfoEndpointConfigDelete
}

// Where appends a list predicates to the UserInfoEndpointConfigDelete builder.
func (uiecdo *UserInfoEndpointConfigDeleteOne) Where(ps ...predicate.UserInfoEndpointConfig) *UserInfoEndpointConfigDeleteOne {
	uiecdo.uiecd.mutation.Where(ps...)
	return uiecdo
}

// Exec executes the deletion query.
func (uiecdo *UserInfoEndpointConfigDeleteOne) Exec(ctx context.Context) error {
	n, err := uiecdo.uiecd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{userinfoendpointconfig.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (uiecdo *UserInfoEndpointConfigDeleteOne) ExecX(ctx context.Context) {
	if err := uiecdo.Exec(ctx); err != nil {
		panic(err)
	}
}
