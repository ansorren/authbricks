// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.authbricks.com/bricks/ent/predicate"
	"go.authbricks.com/bricks/ent/service"
	"go.authbricks.com/bricks/ent/serviceuserinfoendpointconfig"
)

// ServiceUserInfoEndpointConfigQuery is the builder for querying ServiceUserInfoEndpointConfig entities.
type ServiceUserInfoEndpointConfigQuery struct {
	config
	ctx         *QueryContext
	order       []serviceuserinfoendpointconfig.OrderOption
	inters      []Interceptor
	predicates  []predicate.ServiceUserInfoEndpointConfig
	withService *ServiceQuery
	withFKs     bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ServiceUserInfoEndpointConfigQuery builder.
func (suiecq *ServiceUserInfoEndpointConfigQuery) Where(ps ...predicate.ServiceUserInfoEndpointConfig) *ServiceUserInfoEndpointConfigQuery {
	suiecq.predicates = append(suiecq.predicates, ps...)
	return suiecq
}

// Limit the number of records to be returned by this query.
func (suiecq *ServiceUserInfoEndpointConfigQuery) Limit(limit int) *ServiceUserInfoEndpointConfigQuery {
	suiecq.ctx.Limit = &limit
	return suiecq
}

// Offset to start from.
func (suiecq *ServiceUserInfoEndpointConfigQuery) Offset(offset int) *ServiceUserInfoEndpointConfigQuery {
	suiecq.ctx.Offset = &offset
	return suiecq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (suiecq *ServiceUserInfoEndpointConfigQuery) Unique(unique bool) *ServiceUserInfoEndpointConfigQuery {
	suiecq.ctx.Unique = &unique
	return suiecq
}

// Order specifies how the records should be ordered.
func (suiecq *ServiceUserInfoEndpointConfigQuery) Order(o ...serviceuserinfoendpointconfig.OrderOption) *ServiceUserInfoEndpointConfigQuery {
	suiecq.order = append(suiecq.order, o...)
	return suiecq
}

// QueryService chains the current query on the "service" edge.
func (suiecq *ServiceUserInfoEndpointConfigQuery) QueryService() *ServiceQuery {
	query := (&ServiceClient{config: suiecq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := suiecq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := suiecq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(serviceuserinfoendpointconfig.Table, serviceuserinfoendpointconfig.FieldID, selector),
			sqlgraph.To(service.Table, service.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, serviceuserinfoendpointconfig.ServiceTable, serviceuserinfoendpointconfig.ServiceColumn),
		)
		fromU = sqlgraph.SetNeighbors(suiecq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ServiceUserInfoEndpointConfig entity from the query.
// Returns a *NotFoundError when no ServiceUserInfoEndpointConfig was found.
func (suiecq *ServiceUserInfoEndpointConfigQuery) First(ctx context.Context) (*ServiceUserInfoEndpointConfig, error) {
	nodes, err := suiecq.Limit(1).All(setContextOp(ctx, suiecq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{serviceuserinfoendpointconfig.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (suiecq *ServiceUserInfoEndpointConfigQuery) FirstX(ctx context.Context) *ServiceUserInfoEndpointConfig {
	node, err := suiecq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ServiceUserInfoEndpointConfig ID from the query.
// Returns a *NotFoundError when no ServiceUserInfoEndpointConfig ID was found.
func (suiecq *ServiceUserInfoEndpointConfigQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = suiecq.Limit(1).IDs(setContextOp(ctx, suiecq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{serviceuserinfoendpointconfig.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (suiecq *ServiceUserInfoEndpointConfigQuery) FirstIDX(ctx context.Context) string {
	id, err := suiecq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ServiceUserInfoEndpointConfig entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ServiceUserInfoEndpointConfig entity is found.
// Returns a *NotFoundError when no ServiceUserInfoEndpointConfig entities are found.
func (suiecq *ServiceUserInfoEndpointConfigQuery) Only(ctx context.Context) (*ServiceUserInfoEndpointConfig, error) {
	nodes, err := suiecq.Limit(2).All(setContextOp(ctx, suiecq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{serviceuserinfoendpointconfig.Label}
	default:
		return nil, &NotSingularError{serviceuserinfoendpointconfig.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (suiecq *ServiceUserInfoEndpointConfigQuery) OnlyX(ctx context.Context) *ServiceUserInfoEndpointConfig {
	node, err := suiecq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ServiceUserInfoEndpointConfig ID in the query.
// Returns a *NotSingularError when more than one ServiceUserInfoEndpointConfig ID is found.
// Returns a *NotFoundError when no entities are found.
func (suiecq *ServiceUserInfoEndpointConfigQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = suiecq.Limit(2).IDs(setContextOp(ctx, suiecq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{serviceuserinfoendpointconfig.Label}
	default:
		err = &NotSingularError{serviceuserinfoendpointconfig.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (suiecq *ServiceUserInfoEndpointConfigQuery) OnlyIDX(ctx context.Context) string {
	id, err := suiecq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ServiceUserInfoEndpointConfigs.
func (suiecq *ServiceUserInfoEndpointConfigQuery) All(ctx context.Context) ([]*ServiceUserInfoEndpointConfig, error) {
	ctx = setContextOp(ctx, suiecq.ctx, "All")
	if err := suiecq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ServiceUserInfoEndpointConfig, *ServiceUserInfoEndpointConfigQuery]()
	return withInterceptors[[]*ServiceUserInfoEndpointConfig](ctx, suiecq, qr, suiecq.inters)
}

// AllX is like All, but panics if an error occurs.
func (suiecq *ServiceUserInfoEndpointConfigQuery) AllX(ctx context.Context) []*ServiceUserInfoEndpointConfig {
	nodes, err := suiecq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ServiceUserInfoEndpointConfig IDs.
func (suiecq *ServiceUserInfoEndpointConfigQuery) IDs(ctx context.Context) (ids []string, err error) {
	if suiecq.ctx.Unique == nil && suiecq.path != nil {
		suiecq.Unique(true)
	}
	ctx = setContextOp(ctx, suiecq.ctx, "IDs")
	if err = suiecq.Select(serviceuserinfoendpointconfig.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (suiecq *ServiceUserInfoEndpointConfigQuery) IDsX(ctx context.Context) []string {
	ids, err := suiecq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (suiecq *ServiceUserInfoEndpointConfigQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, suiecq.ctx, "Count")
	if err := suiecq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, suiecq, querierCount[*ServiceUserInfoEndpointConfigQuery](), suiecq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (suiecq *ServiceUserInfoEndpointConfigQuery) CountX(ctx context.Context) int {
	count, err := suiecq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (suiecq *ServiceUserInfoEndpointConfigQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, suiecq.ctx, "Exist")
	switch _, err := suiecq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (suiecq *ServiceUserInfoEndpointConfigQuery) ExistX(ctx context.Context) bool {
	exist, err := suiecq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ServiceUserInfoEndpointConfigQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (suiecq *ServiceUserInfoEndpointConfigQuery) Clone() *ServiceUserInfoEndpointConfigQuery {
	if suiecq == nil {
		return nil
	}
	return &ServiceUserInfoEndpointConfigQuery{
		config:      suiecq.config,
		ctx:         suiecq.ctx.Clone(),
		order:       append([]serviceuserinfoendpointconfig.OrderOption{}, suiecq.order...),
		inters:      append([]Interceptor{}, suiecq.inters...),
		predicates:  append([]predicate.ServiceUserInfoEndpointConfig{}, suiecq.predicates...),
		withService: suiecq.withService.Clone(),
		// clone intermediate query.
		sql:  suiecq.sql.Clone(),
		path: suiecq.path,
	}
}

// WithService tells the query-builder to eager-load the nodes that are connected to
// the "service" edge. The optional arguments are used to configure the query builder of the edge.
func (suiecq *ServiceUserInfoEndpointConfigQuery) WithService(opts ...func(*ServiceQuery)) *ServiceUserInfoEndpointConfigQuery {
	query := (&ServiceClient{config: suiecq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	suiecq.withService = query
	return suiecq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Endpoint string `json:"endpoint" hcl:"endpoint"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ServiceUserInfoEndpointConfig.Query().
//		GroupBy(serviceuserinfoendpointconfig.FieldEndpoint).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (suiecq *ServiceUserInfoEndpointConfigQuery) GroupBy(field string, fields ...string) *ServiceUserInfoEndpointConfigGroupBy {
	suiecq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ServiceUserInfoEndpointConfigGroupBy{build: suiecq}
	grbuild.flds = &suiecq.ctx.Fields
	grbuild.label = serviceuserinfoendpointconfig.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Endpoint string `json:"endpoint" hcl:"endpoint"`
//	}
//
//	client.ServiceUserInfoEndpointConfig.Query().
//		Select(serviceuserinfoendpointconfig.FieldEndpoint).
//		Scan(ctx, &v)
func (suiecq *ServiceUserInfoEndpointConfigQuery) Select(fields ...string) *ServiceUserInfoEndpointConfigSelect {
	suiecq.ctx.Fields = append(suiecq.ctx.Fields, fields...)
	sbuild := &ServiceUserInfoEndpointConfigSelect{ServiceUserInfoEndpointConfigQuery: suiecq}
	sbuild.label = serviceuserinfoendpointconfig.Label
	sbuild.flds, sbuild.scan = &suiecq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ServiceUserInfoEndpointConfigSelect configured with the given aggregations.
func (suiecq *ServiceUserInfoEndpointConfigQuery) Aggregate(fns ...AggregateFunc) *ServiceUserInfoEndpointConfigSelect {
	return suiecq.Select().Aggregate(fns...)
}

func (suiecq *ServiceUserInfoEndpointConfigQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range suiecq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, suiecq); err != nil {
				return err
			}
		}
	}
	for _, f := range suiecq.ctx.Fields {
		if !serviceuserinfoendpointconfig.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if suiecq.path != nil {
		prev, err := suiecq.path(ctx)
		if err != nil {
			return err
		}
		suiecq.sql = prev
	}
	return nil
}

func (suiecq *ServiceUserInfoEndpointConfigQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ServiceUserInfoEndpointConfig, error) {
	var (
		nodes       = []*ServiceUserInfoEndpointConfig{}
		withFKs     = suiecq.withFKs
		_spec       = suiecq.querySpec()
		loadedTypes = [1]bool{
			suiecq.withService != nil,
		}
	)
	if suiecq.withService != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, serviceuserinfoendpointconfig.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ServiceUserInfoEndpointConfig).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ServiceUserInfoEndpointConfig{config: suiecq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, suiecq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := suiecq.withService; query != nil {
		if err := suiecq.loadService(ctx, query, nodes, nil,
			func(n *ServiceUserInfoEndpointConfig, e *Service) { n.Edges.Service = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (suiecq *ServiceUserInfoEndpointConfigQuery) loadService(ctx context.Context, query *ServiceQuery, nodes []*ServiceUserInfoEndpointConfig, init func(*ServiceUserInfoEndpointConfig), assign func(*ServiceUserInfoEndpointConfig, *Service)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*ServiceUserInfoEndpointConfig)
	for i := range nodes {
		if nodes[i].service_service_user_info_endpoint_config == nil {
			continue
		}
		fk := *nodes[i].service_service_user_info_endpoint_config
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(service.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "service_service_user_info_endpoint_config" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (suiecq *ServiceUserInfoEndpointConfigQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := suiecq.querySpec()
	_spec.Node.Columns = suiecq.ctx.Fields
	if len(suiecq.ctx.Fields) > 0 {
		_spec.Unique = suiecq.ctx.Unique != nil && *suiecq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, suiecq.driver, _spec)
}

func (suiecq *ServiceUserInfoEndpointConfigQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(serviceuserinfoendpointconfig.Table, serviceuserinfoendpointconfig.Columns, sqlgraph.NewFieldSpec(serviceuserinfoendpointconfig.FieldID, field.TypeString))
	_spec.From = suiecq.sql
	if unique := suiecq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if suiecq.path != nil {
		_spec.Unique = true
	}
	if fields := suiecq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, serviceuserinfoendpointconfig.FieldID)
		for i := range fields {
			if fields[i] != serviceuserinfoendpointconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := suiecq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := suiecq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := suiecq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := suiecq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (suiecq *ServiceUserInfoEndpointConfigQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(suiecq.driver.Dialect())
	t1 := builder.Table(serviceuserinfoendpointconfig.Table)
	columns := suiecq.ctx.Fields
	if len(columns) == 0 {
		columns = serviceuserinfoendpointconfig.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if suiecq.sql != nil {
		selector = suiecq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if suiecq.ctx.Unique != nil && *suiecq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range suiecq.predicates {
		p(selector)
	}
	for _, p := range suiecq.order {
		p(selector)
	}
	if offset := suiecq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := suiecq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ServiceUserInfoEndpointConfigGroupBy is the group-by builder for ServiceUserInfoEndpointConfig entities.
type ServiceUserInfoEndpointConfigGroupBy struct {
	selector
	build *ServiceUserInfoEndpointConfigQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (suiecgb *ServiceUserInfoEndpointConfigGroupBy) Aggregate(fns ...AggregateFunc) *ServiceUserInfoEndpointConfigGroupBy {
	suiecgb.fns = append(suiecgb.fns, fns...)
	return suiecgb
}

// Scan applies the selector query and scans the result into the given value.
func (suiecgb *ServiceUserInfoEndpointConfigGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, suiecgb.build.ctx, "GroupBy")
	if err := suiecgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ServiceUserInfoEndpointConfigQuery, *ServiceUserInfoEndpointConfigGroupBy](ctx, suiecgb.build, suiecgb, suiecgb.build.inters, v)
}

func (suiecgb *ServiceUserInfoEndpointConfigGroupBy) sqlScan(ctx context.Context, root *ServiceUserInfoEndpointConfigQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(suiecgb.fns))
	for _, fn := range suiecgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*suiecgb.flds)+len(suiecgb.fns))
		for _, f := range *suiecgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*suiecgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := suiecgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ServiceUserInfoEndpointConfigSelect is the builder for selecting fields of ServiceUserInfoEndpointConfig entities.
type ServiceUserInfoEndpointConfigSelect struct {
	*ServiceUserInfoEndpointConfigQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (suiecs *ServiceUserInfoEndpointConfigSelect) Aggregate(fns ...AggregateFunc) *ServiceUserInfoEndpointConfigSelect {
	suiecs.fns = append(suiecs.fns, fns...)
	return suiecs
}

// Scan applies the selector query and scans the result into the given value.
func (suiecs *ServiceUserInfoEndpointConfigSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, suiecs.ctx, "Select")
	if err := suiecs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ServiceUserInfoEndpointConfigQuery, *ServiceUserInfoEndpointConfigSelect](ctx, suiecs.ServiceUserInfoEndpointConfigQuery, suiecs, suiecs.inters, v)
}

func (suiecs *ServiceUserInfoEndpointConfigSelect) sqlScan(ctx context.Context, root *ServiceUserInfoEndpointConfigQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(suiecs.fns))
	for _, fn := range suiecs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*suiecs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := suiecs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
