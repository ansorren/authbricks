// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.authbricks.com/bricks/ent/codegrant"
	"go.authbricks.com/bricks/ent/credentials"
	"go.authbricks.com/bricks/ent/m2mgrant"
	"go.authbricks.com/bricks/ent/oauthclient"
	"go.authbricks.com/bricks/ent/oauthserver"
	"go.authbricks.com/bricks/ent/predicate"
)

// OAuthClientUpdate is the builder for updating OAuthClient entities.
type OAuthClientUpdate struct {
	config
	hooks    []Hook
	mutation *OAuthClientMutation
}

// Where appends a list predicates to the OAuthClientUpdate builder.
func (ocu *OAuthClientUpdate) Where(ps ...predicate.OAuthClient) *OAuthClientUpdate {
	ocu.mutation.Where(ps...)
	return ocu
}

// SetName sets the "name" field.
func (ocu *OAuthClientUpdate) SetName(s string) *OAuthClientUpdate {
	ocu.mutation.SetName(s)
	return ocu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ocu *OAuthClientUpdate) SetNillableName(s *string) *OAuthClientUpdate {
	if s != nil {
		ocu.SetName(*s)
	}
	return ocu
}

// SetPublic sets the "public" field.
func (ocu *OAuthClientUpdate) SetPublic(b bool) *OAuthClientUpdate {
	ocu.mutation.SetPublic(b)
	return ocu
}

// SetNillablePublic sets the "public" field if the given value is not nil.
func (ocu *OAuthClientUpdate) SetNillablePublic(b *bool) *OAuthClientUpdate {
	if b != nil {
		ocu.SetPublic(*b)
	}
	return ocu
}

// SetM2mGrantsID sets the "m2m_grants" edge to the M2MGrant entity by ID.
func (ocu *OAuthClientUpdate) SetM2mGrantsID(id string) *OAuthClientUpdate {
	ocu.mutation.SetM2mGrantsID(id)
	return ocu
}

// SetNillableM2mGrantsID sets the "m2m_grants" edge to the M2MGrant entity by ID if the given value is not nil.
func (ocu *OAuthClientUpdate) SetNillableM2mGrantsID(id *string) *OAuthClientUpdate {
	if id != nil {
		ocu = ocu.SetM2mGrantsID(*id)
	}
	return ocu
}

// SetM2mGrants sets the "m2m_grants" edge to the M2MGrant entity.
func (ocu *OAuthClientUpdate) SetM2mGrants(m *M2MGrant) *OAuthClientUpdate {
	return ocu.SetM2mGrantsID(m.ID)
}

// SetCodeGrantsID sets the "code_grants" edge to the CodeGrant entity by ID.
func (ocu *OAuthClientUpdate) SetCodeGrantsID(id string) *OAuthClientUpdate {
	ocu.mutation.SetCodeGrantsID(id)
	return ocu
}

// SetNillableCodeGrantsID sets the "code_grants" edge to the CodeGrant entity by ID if the given value is not nil.
func (ocu *OAuthClientUpdate) SetNillableCodeGrantsID(id *string) *OAuthClientUpdate {
	if id != nil {
		ocu = ocu.SetCodeGrantsID(*id)
	}
	return ocu
}

// SetCodeGrants sets the "code_grants" edge to the CodeGrant entity.
func (ocu *OAuthClientUpdate) SetCodeGrants(c *CodeGrant) *OAuthClientUpdate {
	return ocu.SetCodeGrantsID(c.ID)
}

// AddCredentialIDs adds the "credentials" edge to the Credentials entity by IDs.
func (ocu *OAuthClientUpdate) AddCredentialIDs(ids ...string) *OAuthClientUpdate {
	ocu.mutation.AddCredentialIDs(ids...)
	return ocu
}

// AddCredentials adds the "credentials" edges to the Credentials entity.
func (ocu *OAuthClientUpdate) AddCredentials(c ...*Credentials) *OAuthClientUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ocu.AddCredentialIDs(ids...)
}

// SetServerID sets the "server" edge to the OAuthServer entity by ID.
func (ocu *OAuthClientUpdate) SetServerID(id int) *OAuthClientUpdate {
	ocu.mutation.SetServerID(id)
	return ocu
}

// SetNillableServerID sets the "server" edge to the OAuthServer entity by ID if the given value is not nil.
func (ocu *OAuthClientUpdate) SetNillableServerID(id *int) *OAuthClientUpdate {
	if id != nil {
		ocu = ocu.SetServerID(*id)
	}
	return ocu
}

// SetServer sets the "server" edge to the OAuthServer entity.
func (ocu *OAuthClientUpdate) SetServer(o *OAuthServer) *OAuthClientUpdate {
	return ocu.SetServerID(o.ID)
}

// Mutation returns the OAuthClientMutation object of the builder.
func (ocu *OAuthClientUpdate) Mutation() *OAuthClientMutation {
	return ocu.mutation
}

// ClearM2mGrants clears the "m2m_grants" edge to the M2MGrant entity.
func (ocu *OAuthClientUpdate) ClearM2mGrants() *OAuthClientUpdate {
	ocu.mutation.ClearM2mGrants()
	return ocu
}

// ClearCodeGrants clears the "code_grants" edge to the CodeGrant entity.
func (ocu *OAuthClientUpdate) ClearCodeGrants() *OAuthClientUpdate {
	ocu.mutation.ClearCodeGrants()
	return ocu
}

// ClearCredentials clears all "credentials" edges to the Credentials entity.
func (ocu *OAuthClientUpdate) ClearCredentials() *OAuthClientUpdate {
	ocu.mutation.ClearCredentials()
	return ocu
}

// RemoveCredentialIDs removes the "credentials" edge to Credentials entities by IDs.
func (ocu *OAuthClientUpdate) RemoveCredentialIDs(ids ...string) *OAuthClientUpdate {
	ocu.mutation.RemoveCredentialIDs(ids...)
	return ocu
}

// RemoveCredentials removes "credentials" edges to Credentials entities.
func (ocu *OAuthClientUpdate) RemoveCredentials(c ...*Credentials) *OAuthClientUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ocu.RemoveCredentialIDs(ids...)
}

// ClearServer clears the "server" edge to the OAuthServer entity.
func (ocu *OAuthClientUpdate) ClearServer() *OAuthClientUpdate {
	ocu.mutation.ClearServer()
	return ocu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ocu *OAuthClientUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ocu.sqlSave, ocu.mutation, ocu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ocu *OAuthClientUpdate) SaveX(ctx context.Context) int {
	affected, err := ocu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ocu *OAuthClientUpdate) Exec(ctx context.Context) error {
	_, err := ocu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocu *OAuthClientUpdate) ExecX(ctx context.Context) {
	if err := ocu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ocu *OAuthClientUpdate) check() error {
	if v, ok := ocu.mutation.Name(); ok {
		if err := oauthclient.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "OAuthClient.name": %w`, err)}
		}
	}
	return nil
}

func (ocu *OAuthClientUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ocu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(oauthclient.Table, oauthclient.Columns, sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeString))
	if ps := ocu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ocu.mutation.Name(); ok {
		_spec.SetField(oauthclient.FieldName, field.TypeString, value)
	}
	if value, ok := ocu.mutation.Public(); ok {
		_spec.SetField(oauthclient.FieldPublic, field.TypeBool, value)
	}
	if ocu.mutation.M2mGrantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oauthclient.M2mGrantsTable,
			Columns: []string{oauthclient.M2mGrantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(m2mgrant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ocu.mutation.M2mGrantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oauthclient.M2mGrantsTable,
			Columns: []string{oauthclient.M2mGrantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(m2mgrant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ocu.mutation.CodeGrantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oauthclient.CodeGrantsTable,
			Columns: []string{oauthclient.CodeGrantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(codegrant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ocu.mutation.CodeGrantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oauthclient.CodeGrantsTable,
			Columns: []string{oauthclient.CodeGrantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(codegrant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ocu.mutation.CredentialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthclient.CredentialsTable,
			Columns: []string{oauthclient.CredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(credentials.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ocu.mutation.RemovedCredentialsIDs(); len(nodes) > 0 && !ocu.mutation.CredentialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthclient.CredentialsTable,
			Columns: []string{oauthclient.CredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(credentials.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ocu.mutation.CredentialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthclient.CredentialsTable,
			Columns: []string{oauthclient.CredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(credentials.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ocu.mutation.ServerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthclient.ServerTable,
			Columns: []string{oauthclient.ServerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthserver.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ocu.mutation.ServerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthclient.ServerTable,
			Columns: []string{oauthclient.ServerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthserver.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ocu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthclient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ocu.mutation.done = true
	return n, nil
}

// OAuthClientUpdateOne is the builder for updating a single OAuthClient entity.
type OAuthClientUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OAuthClientMutation
}

// SetName sets the "name" field.
func (ocuo *OAuthClientUpdateOne) SetName(s string) *OAuthClientUpdateOne {
	ocuo.mutation.SetName(s)
	return ocuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ocuo *OAuthClientUpdateOne) SetNillableName(s *string) *OAuthClientUpdateOne {
	if s != nil {
		ocuo.SetName(*s)
	}
	return ocuo
}

// SetPublic sets the "public" field.
func (ocuo *OAuthClientUpdateOne) SetPublic(b bool) *OAuthClientUpdateOne {
	ocuo.mutation.SetPublic(b)
	return ocuo
}

// SetNillablePublic sets the "public" field if the given value is not nil.
func (ocuo *OAuthClientUpdateOne) SetNillablePublic(b *bool) *OAuthClientUpdateOne {
	if b != nil {
		ocuo.SetPublic(*b)
	}
	return ocuo
}

// SetM2mGrantsID sets the "m2m_grants" edge to the M2MGrant entity by ID.
func (ocuo *OAuthClientUpdateOne) SetM2mGrantsID(id string) *OAuthClientUpdateOne {
	ocuo.mutation.SetM2mGrantsID(id)
	return ocuo
}

// SetNillableM2mGrantsID sets the "m2m_grants" edge to the M2MGrant entity by ID if the given value is not nil.
func (ocuo *OAuthClientUpdateOne) SetNillableM2mGrantsID(id *string) *OAuthClientUpdateOne {
	if id != nil {
		ocuo = ocuo.SetM2mGrantsID(*id)
	}
	return ocuo
}

// SetM2mGrants sets the "m2m_grants" edge to the M2MGrant entity.
func (ocuo *OAuthClientUpdateOne) SetM2mGrants(m *M2MGrant) *OAuthClientUpdateOne {
	return ocuo.SetM2mGrantsID(m.ID)
}

// SetCodeGrantsID sets the "code_grants" edge to the CodeGrant entity by ID.
func (ocuo *OAuthClientUpdateOne) SetCodeGrantsID(id string) *OAuthClientUpdateOne {
	ocuo.mutation.SetCodeGrantsID(id)
	return ocuo
}

// SetNillableCodeGrantsID sets the "code_grants" edge to the CodeGrant entity by ID if the given value is not nil.
func (ocuo *OAuthClientUpdateOne) SetNillableCodeGrantsID(id *string) *OAuthClientUpdateOne {
	if id != nil {
		ocuo = ocuo.SetCodeGrantsID(*id)
	}
	return ocuo
}

// SetCodeGrants sets the "code_grants" edge to the CodeGrant entity.
func (ocuo *OAuthClientUpdateOne) SetCodeGrants(c *CodeGrant) *OAuthClientUpdateOne {
	return ocuo.SetCodeGrantsID(c.ID)
}

// AddCredentialIDs adds the "credentials" edge to the Credentials entity by IDs.
func (ocuo *OAuthClientUpdateOne) AddCredentialIDs(ids ...string) *OAuthClientUpdateOne {
	ocuo.mutation.AddCredentialIDs(ids...)
	return ocuo
}

// AddCredentials adds the "credentials" edges to the Credentials entity.
func (ocuo *OAuthClientUpdateOne) AddCredentials(c ...*Credentials) *OAuthClientUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ocuo.AddCredentialIDs(ids...)
}

// SetServerID sets the "server" edge to the OAuthServer entity by ID.
func (ocuo *OAuthClientUpdateOne) SetServerID(id int) *OAuthClientUpdateOne {
	ocuo.mutation.SetServerID(id)
	return ocuo
}

// SetNillableServerID sets the "server" edge to the OAuthServer entity by ID if the given value is not nil.
func (ocuo *OAuthClientUpdateOne) SetNillableServerID(id *int) *OAuthClientUpdateOne {
	if id != nil {
		ocuo = ocuo.SetServerID(*id)
	}
	return ocuo
}

// SetServer sets the "server" edge to the OAuthServer entity.
func (ocuo *OAuthClientUpdateOne) SetServer(o *OAuthServer) *OAuthClientUpdateOne {
	return ocuo.SetServerID(o.ID)
}

// Mutation returns the OAuthClientMutation object of the builder.
func (ocuo *OAuthClientUpdateOne) Mutation() *OAuthClientMutation {
	return ocuo.mutation
}

// ClearM2mGrants clears the "m2m_grants" edge to the M2MGrant entity.
func (ocuo *OAuthClientUpdateOne) ClearM2mGrants() *OAuthClientUpdateOne {
	ocuo.mutation.ClearM2mGrants()
	return ocuo
}

// ClearCodeGrants clears the "code_grants" edge to the CodeGrant entity.
func (ocuo *OAuthClientUpdateOne) ClearCodeGrants() *OAuthClientUpdateOne {
	ocuo.mutation.ClearCodeGrants()
	return ocuo
}

// ClearCredentials clears all "credentials" edges to the Credentials entity.
func (ocuo *OAuthClientUpdateOne) ClearCredentials() *OAuthClientUpdateOne {
	ocuo.mutation.ClearCredentials()
	return ocuo
}

// RemoveCredentialIDs removes the "credentials" edge to Credentials entities by IDs.
func (ocuo *OAuthClientUpdateOne) RemoveCredentialIDs(ids ...string) *OAuthClientUpdateOne {
	ocuo.mutation.RemoveCredentialIDs(ids...)
	return ocuo
}

// RemoveCredentials removes "credentials" edges to Credentials entities.
func (ocuo *OAuthClientUpdateOne) RemoveCredentials(c ...*Credentials) *OAuthClientUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ocuo.RemoveCredentialIDs(ids...)
}

// ClearServer clears the "server" edge to the OAuthServer entity.
func (ocuo *OAuthClientUpdateOne) ClearServer() *OAuthClientUpdateOne {
	ocuo.mutation.ClearServer()
	return ocuo
}

// Where appends a list predicates to the OAuthClientUpdate builder.
func (ocuo *OAuthClientUpdateOne) Where(ps ...predicate.OAuthClient) *OAuthClientUpdateOne {
	ocuo.mutation.Where(ps...)
	return ocuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ocuo *OAuthClientUpdateOne) Select(field string, fields ...string) *OAuthClientUpdateOne {
	ocuo.fields = append([]string{field}, fields...)
	return ocuo
}

// Save executes the query and returns the updated OAuthClient entity.
func (ocuo *OAuthClientUpdateOne) Save(ctx context.Context) (*OAuthClient, error) {
	return withHooks(ctx, ocuo.sqlSave, ocuo.mutation, ocuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ocuo *OAuthClientUpdateOne) SaveX(ctx context.Context) *OAuthClient {
	node, err := ocuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ocuo *OAuthClientUpdateOne) Exec(ctx context.Context) error {
	_, err := ocuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocuo *OAuthClientUpdateOne) ExecX(ctx context.Context) {
	if err := ocuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ocuo *OAuthClientUpdateOne) check() error {
	if v, ok := ocuo.mutation.Name(); ok {
		if err := oauthclient.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "OAuthClient.name": %w`, err)}
		}
	}
	return nil
}

func (ocuo *OAuthClientUpdateOne) sqlSave(ctx context.Context) (_node *OAuthClient, err error) {
	if err := ocuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oauthclient.Table, oauthclient.Columns, sqlgraph.NewFieldSpec(oauthclient.FieldID, field.TypeString))
	id, ok := ocuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OAuthClient.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ocuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oauthclient.FieldID)
		for _, f := range fields {
			if !oauthclient.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oauthclient.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ocuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ocuo.mutation.Name(); ok {
		_spec.SetField(oauthclient.FieldName, field.TypeString, value)
	}
	if value, ok := ocuo.mutation.Public(); ok {
		_spec.SetField(oauthclient.FieldPublic, field.TypeBool, value)
	}
	if ocuo.mutation.M2mGrantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oauthclient.M2mGrantsTable,
			Columns: []string{oauthclient.M2mGrantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(m2mgrant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ocuo.mutation.M2mGrantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oauthclient.M2mGrantsTable,
			Columns: []string{oauthclient.M2mGrantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(m2mgrant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ocuo.mutation.CodeGrantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oauthclient.CodeGrantsTable,
			Columns: []string{oauthclient.CodeGrantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(codegrant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ocuo.mutation.CodeGrantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oauthclient.CodeGrantsTable,
			Columns: []string{oauthclient.CodeGrantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(codegrant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ocuo.mutation.CredentialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthclient.CredentialsTable,
			Columns: []string{oauthclient.CredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(credentials.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ocuo.mutation.RemovedCredentialsIDs(); len(nodes) > 0 && !ocuo.mutation.CredentialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthclient.CredentialsTable,
			Columns: []string{oauthclient.CredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(credentials.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ocuo.mutation.CredentialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   oauthclient.CredentialsTable,
			Columns: []string{oauthclient.CredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(credentials.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ocuo.mutation.ServerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthclient.ServerTable,
			Columns: []string{oauthclient.ServerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthserver.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ocuo.mutation.ServerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthclient.ServerTable,
			Columns: []string{oauthclient.ServerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthserver.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OAuthClient{config: ocuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ocuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthclient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ocuo.mutation.done = true
	return _node, nil
}
