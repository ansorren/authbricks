// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.authbricks.com/bricks/ent/application"
	"go.authbricks.com/bricks/ent/codegrant"
	"go.authbricks.com/bricks/ent/credentials"
	"go.authbricks.com/bricks/ent/m2mgrant"
	"go.authbricks.com/bricks/ent/predicate"
	"go.authbricks.com/bricks/ent/service"
)

// ApplicationUpdate is the builder for updating Application entities.
type ApplicationUpdate struct {
	config
	hooks    []Hook
	mutation *ApplicationMutation
}

// Where appends a list predicates to the ApplicationUpdate builder.
func (au *ApplicationUpdate) Where(ps ...predicate.Application) *ApplicationUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetName sets the "name" field.
func (au *ApplicationUpdate) SetName(s string) *ApplicationUpdate {
	au.mutation.SetName(s)
	return au
}

// SetNillableName sets the "name" field if the given value is not nil.
func (au *ApplicationUpdate) SetNillableName(s *string) *ApplicationUpdate {
	if s != nil {
		au.SetName(*s)
	}
	return au
}

// SetPublic sets the "public" field.
func (au *ApplicationUpdate) SetPublic(b bool) *ApplicationUpdate {
	au.mutation.SetPublic(b)
	return au
}

// SetNillablePublic sets the "public" field if the given value is not nil.
func (au *ApplicationUpdate) SetNillablePublic(b *bool) *ApplicationUpdate {
	if b != nil {
		au.SetPublic(*b)
	}
	return au
}

// SetM2mGrantID sets the "m2m_grant" edge to the M2MGrant entity by ID.
func (au *ApplicationUpdate) SetM2mGrantID(id string) *ApplicationUpdate {
	au.mutation.SetM2mGrantID(id)
	return au
}

// SetNillableM2mGrantID sets the "m2m_grant" edge to the M2MGrant entity by ID if the given value is not nil.
func (au *ApplicationUpdate) SetNillableM2mGrantID(id *string) *ApplicationUpdate {
	if id != nil {
		au = au.SetM2mGrantID(*id)
	}
	return au
}

// SetM2mGrant sets the "m2m_grant" edge to the M2MGrant entity.
func (au *ApplicationUpdate) SetM2mGrant(m *M2MGrant) *ApplicationUpdate {
	return au.SetM2mGrantID(m.ID)
}

// SetCodeGrantID sets the "code_grant" edge to the CodeGrant entity by ID.
func (au *ApplicationUpdate) SetCodeGrantID(id string) *ApplicationUpdate {
	au.mutation.SetCodeGrantID(id)
	return au
}

// SetNillableCodeGrantID sets the "code_grant" edge to the CodeGrant entity by ID if the given value is not nil.
func (au *ApplicationUpdate) SetNillableCodeGrantID(id *string) *ApplicationUpdate {
	if id != nil {
		au = au.SetCodeGrantID(*id)
	}
	return au
}

// SetCodeGrant sets the "code_grant" edge to the CodeGrant entity.
func (au *ApplicationUpdate) SetCodeGrant(c *CodeGrant) *ApplicationUpdate {
	return au.SetCodeGrantID(c.ID)
}

// AddCredentialIDs adds the "credentials" edge to the Credentials entity by IDs.
func (au *ApplicationUpdate) AddCredentialIDs(ids ...string) *ApplicationUpdate {
	au.mutation.AddCredentialIDs(ids...)
	return au
}

// AddCredentials adds the "credentials" edges to the Credentials entity.
func (au *ApplicationUpdate) AddCredentials(c ...*Credentials) *ApplicationUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return au.AddCredentialIDs(ids...)
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (au *ApplicationUpdate) SetServiceID(id string) *ApplicationUpdate {
	au.mutation.SetServiceID(id)
	return au
}

// SetNillableServiceID sets the "service" edge to the Service entity by ID if the given value is not nil.
func (au *ApplicationUpdate) SetNillableServiceID(id *string) *ApplicationUpdate {
	if id != nil {
		au = au.SetServiceID(*id)
	}
	return au
}

// SetService sets the "service" edge to the Service entity.
func (au *ApplicationUpdate) SetService(s *Service) *ApplicationUpdate {
	return au.SetServiceID(s.ID)
}

// Mutation returns the ApplicationMutation object of the builder.
func (au *ApplicationUpdate) Mutation() *ApplicationMutation {
	return au.mutation
}

// ClearM2mGrant clears the "m2m_grant" edge to the M2MGrant entity.
func (au *ApplicationUpdate) ClearM2mGrant() *ApplicationUpdate {
	au.mutation.ClearM2mGrant()
	return au
}

// ClearCodeGrant clears the "code_grant" edge to the CodeGrant entity.
func (au *ApplicationUpdate) ClearCodeGrant() *ApplicationUpdate {
	au.mutation.ClearCodeGrant()
	return au
}

// ClearCredentials clears all "credentials" edges to the Credentials entity.
func (au *ApplicationUpdate) ClearCredentials() *ApplicationUpdate {
	au.mutation.ClearCredentials()
	return au
}

// RemoveCredentialIDs removes the "credentials" edge to Credentials entities by IDs.
func (au *ApplicationUpdate) RemoveCredentialIDs(ids ...string) *ApplicationUpdate {
	au.mutation.RemoveCredentialIDs(ids...)
	return au
}

// RemoveCredentials removes "credentials" edges to Credentials entities.
func (au *ApplicationUpdate) RemoveCredentials(c ...*Credentials) *ApplicationUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return au.RemoveCredentialIDs(ids...)
}

// ClearService clears the "service" edge to the Service entity.
func (au *ApplicationUpdate) ClearService() *ApplicationUpdate {
	au.mutation.ClearService()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *ApplicationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *ApplicationUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ApplicationUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ApplicationUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *ApplicationUpdate) check() error {
	if v, ok := au.mutation.Name(); ok {
		if err := application.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Application.name": %w`, err)}
		}
	}
	return nil
}

func (au *ApplicationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(application.Table, application.Columns, sqlgraph.NewFieldSpec(application.FieldID, field.TypeString))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(application.FieldName, field.TypeString, value)
	}
	if value, ok := au.mutation.Public(); ok {
		_spec.SetField(application.FieldPublic, field.TypeBool, value)
	}
	if au.mutation.M2mGrantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   application.M2mGrantTable,
			Columns: []string{application.M2mGrantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(m2mgrant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.M2mGrantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   application.M2mGrantTable,
			Columns: []string{application.M2mGrantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(m2mgrant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.CodeGrantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   application.CodeGrantTable,
			Columns: []string{application.CodeGrantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(codegrant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.CodeGrantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   application.CodeGrantTable,
			Columns: []string{application.CodeGrantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(codegrant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.CredentialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   application.CredentialsTable,
			Columns: []string{application.CredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(credentials.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedCredentialsIDs(); len(nodes) > 0 && !au.mutation.CredentialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   application.CredentialsTable,
			Columns: []string{application.CredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(credentials.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.CredentialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   application.CredentialsTable,
			Columns: []string{application.CredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(credentials.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   application.ServiceTable,
			Columns: []string{application.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   application.ServiceTable,
			Columns: []string{application.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{application.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// ApplicationUpdateOne is the builder for updating a single Application entity.
type ApplicationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ApplicationMutation
}

// SetName sets the "name" field.
func (auo *ApplicationUpdateOne) SetName(s string) *ApplicationUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableName(s *string) *ApplicationUpdateOne {
	if s != nil {
		auo.SetName(*s)
	}
	return auo
}

// SetPublic sets the "public" field.
func (auo *ApplicationUpdateOne) SetPublic(b bool) *ApplicationUpdateOne {
	auo.mutation.SetPublic(b)
	return auo
}

// SetNillablePublic sets the "public" field if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillablePublic(b *bool) *ApplicationUpdateOne {
	if b != nil {
		auo.SetPublic(*b)
	}
	return auo
}

// SetM2mGrantID sets the "m2m_grant" edge to the M2MGrant entity by ID.
func (auo *ApplicationUpdateOne) SetM2mGrantID(id string) *ApplicationUpdateOne {
	auo.mutation.SetM2mGrantID(id)
	return auo
}

// SetNillableM2mGrantID sets the "m2m_grant" edge to the M2MGrant entity by ID if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableM2mGrantID(id *string) *ApplicationUpdateOne {
	if id != nil {
		auo = auo.SetM2mGrantID(*id)
	}
	return auo
}

// SetM2mGrant sets the "m2m_grant" edge to the M2MGrant entity.
func (auo *ApplicationUpdateOne) SetM2mGrant(m *M2MGrant) *ApplicationUpdateOne {
	return auo.SetM2mGrantID(m.ID)
}

// SetCodeGrantID sets the "code_grant" edge to the CodeGrant entity by ID.
func (auo *ApplicationUpdateOne) SetCodeGrantID(id string) *ApplicationUpdateOne {
	auo.mutation.SetCodeGrantID(id)
	return auo
}

// SetNillableCodeGrantID sets the "code_grant" edge to the CodeGrant entity by ID if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableCodeGrantID(id *string) *ApplicationUpdateOne {
	if id != nil {
		auo = auo.SetCodeGrantID(*id)
	}
	return auo
}

// SetCodeGrant sets the "code_grant" edge to the CodeGrant entity.
func (auo *ApplicationUpdateOne) SetCodeGrant(c *CodeGrant) *ApplicationUpdateOne {
	return auo.SetCodeGrantID(c.ID)
}

// AddCredentialIDs adds the "credentials" edge to the Credentials entity by IDs.
func (auo *ApplicationUpdateOne) AddCredentialIDs(ids ...string) *ApplicationUpdateOne {
	auo.mutation.AddCredentialIDs(ids...)
	return auo
}

// AddCredentials adds the "credentials" edges to the Credentials entity.
func (auo *ApplicationUpdateOne) AddCredentials(c ...*Credentials) *ApplicationUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return auo.AddCredentialIDs(ids...)
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (auo *ApplicationUpdateOne) SetServiceID(id string) *ApplicationUpdateOne {
	auo.mutation.SetServiceID(id)
	return auo
}

// SetNillableServiceID sets the "service" edge to the Service entity by ID if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableServiceID(id *string) *ApplicationUpdateOne {
	if id != nil {
		auo = auo.SetServiceID(*id)
	}
	return auo
}

// SetService sets the "service" edge to the Service entity.
func (auo *ApplicationUpdateOne) SetService(s *Service) *ApplicationUpdateOne {
	return auo.SetServiceID(s.ID)
}

// Mutation returns the ApplicationMutation object of the builder.
func (auo *ApplicationUpdateOne) Mutation() *ApplicationMutation {
	return auo.mutation
}

// ClearM2mGrant clears the "m2m_grant" edge to the M2MGrant entity.
func (auo *ApplicationUpdateOne) ClearM2mGrant() *ApplicationUpdateOne {
	auo.mutation.ClearM2mGrant()
	return auo
}

// ClearCodeGrant clears the "code_grant" edge to the CodeGrant entity.
func (auo *ApplicationUpdateOne) ClearCodeGrant() *ApplicationUpdateOne {
	auo.mutation.ClearCodeGrant()
	return auo
}

// ClearCredentials clears all "credentials" edges to the Credentials entity.
func (auo *ApplicationUpdateOne) ClearCredentials() *ApplicationUpdateOne {
	auo.mutation.ClearCredentials()
	return auo
}

// RemoveCredentialIDs removes the "credentials" edge to Credentials entities by IDs.
func (auo *ApplicationUpdateOne) RemoveCredentialIDs(ids ...string) *ApplicationUpdateOne {
	auo.mutation.RemoveCredentialIDs(ids...)
	return auo
}

// RemoveCredentials removes "credentials" edges to Credentials entities.
func (auo *ApplicationUpdateOne) RemoveCredentials(c ...*Credentials) *ApplicationUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return auo.RemoveCredentialIDs(ids...)
}

// ClearService clears the "service" edge to the Service entity.
func (auo *ApplicationUpdateOne) ClearService() *ApplicationUpdateOne {
	auo.mutation.ClearService()
	return auo
}

// Where appends a list predicates to the ApplicationUpdate builder.
func (auo *ApplicationUpdateOne) Where(ps ...predicate.Application) *ApplicationUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *ApplicationUpdateOne) Select(field string, fields ...string) *ApplicationUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Application entity.
func (auo *ApplicationUpdateOne) Save(ctx context.Context) (*Application, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ApplicationUpdateOne) SaveX(ctx context.Context) *Application {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *ApplicationUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ApplicationUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *ApplicationUpdateOne) check() error {
	if v, ok := auo.mutation.Name(); ok {
		if err := application.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Application.name": %w`, err)}
		}
	}
	return nil
}

func (auo *ApplicationUpdateOne) sqlSave(ctx context.Context) (_node *Application, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(application.Table, application.Columns, sqlgraph.NewFieldSpec(application.FieldID, field.TypeString))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Application.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, application.FieldID)
		for _, f := range fields {
			if !application.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != application.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(application.FieldName, field.TypeString, value)
	}
	if value, ok := auo.mutation.Public(); ok {
		_spec.SetField(application.FieldPublic, field.TypeBool, value)
	}
	if auo.mutation.M2mGrantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   application.M2mGrantTable,
			Columns: []string{application.M2mGrantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(m2mgrant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.M2mGrantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   application.M2mGrantTable,
			Columns: []string{application.M2mGrantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(m2mgrant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.CodeGrantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   application.CodeGrantTable,
			Columns: []string{application.CodeGrantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(codegrant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.CodeGrantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   application.CodeGrantTable,
			Columns: []string{application.CodeGrantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(codegrant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.CredentialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   application.CredentialsTable,
			Columns: []string{application.CredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(credentials.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedCredentialsIDs(); len(nodes) > 0 && !auo.mutation.CredentialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   application.CredentialsTable,
			Columns: []string{application.CredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(credentials.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.CredentialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   application.CredentialsTable,
			Columns: []string{application.CredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(credentials.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   application.ServiceTable,
			Columns: []string{application.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   application.ServiceTable,
			Columns: []string{application.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Application{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{application.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
