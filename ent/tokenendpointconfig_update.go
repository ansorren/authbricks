// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"go.authbricks.com/bricks/ent/predicate"
	"go.authbricks.com/bricks/ent/service"
	"go.authbricks.com/bricks/ent/tokenendpointconfig"
)

// TokenEndpointConfigUpdate is the builder for updating TokenEndpointConfig entities.
type TokenEndpointConfigUpdate struct {
	config
	hooks    []Hook
	mutation *TokenEndpointConfigMutation
}

// Where appends a list predicates to the TokenEndpointConfigUpdate builder.
func (tecu *TokenEndpointConfigUpdate) Where(ps ...predicate.TokenEndpointConfig) *TokenEndpointConfigUpdate {
	tecu.mutation.Where(ps...)
	return tecu
}

// SetEndpoint sets the "endpoint" field.
func (tecu *TokenEndpointConfigUpdate) SetEndpoint(s string) *TokenEndpointConfigUpdate {
	tecu.mutation.SetEndpoint(s)
	return tecu
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (tecu *TokenEndpointConfigUpdate) SetNillableEndpoint(s *string) *TokenEndpointConfigUpdate {
	if s != nil {
		tecu.SetEndpoint(*s)
	}
	return tecu
}

// SetAllowedAuthenticationMethods sets the "allowed_authentication_methods" field.
func (tecu *TokenEndpointConfigUpdate) SetAllowedAuthenticationMethods(s []string) *TokenEndpointConfigUpdate {
	tecu.mutation.SetAllowedAuthenticationMethods(s)
	return tecu
}

// AppendAllowedAuthenticationMethods appends s to the "allowed_authentication_methods" field.
func (tecu *TokenEndpointConfigUpdate) AppendAllowedAuthenticationMethods(s []string) *TokenEndpointConfigUpdate {
	tecu.mutation.AppendAllowedAuthenticationMethods(s)
	return tecu
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (tecu *TokenEndpointConfigUpdate) SetServiceID(id string) *TokenEndpointConfigUpdate {
	tecu.mutation.SetServiceID(id)
	return tecu
}

// SetService sets the "service" edge to the Service entity.
func (tecu *TokenEndpointConfigUpdate) SetService(s *Service) *TokenEndpointConfigUpdate {
	return tecu.SetServiceID(s.ID)
}

// Mutation returns the TokenEndpointConfigMutation object of the builder.
func (tecu *TokenEndpointConfigUpdate) Mutation() *TokenEndpointConfigMutation {
	return tecu.mutation
}

// ClearService clears the "service" edge to the Service entity.
func (tecu *TokenEndpointConfigUpdate) ClearService() *TokenEndpointConfigUpdate {
	tecu.mutation.ClearService()
	return tecu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tecu *TokenEndpointConfigUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tecu.sqlSave, tecu.mutation, tecu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tecu *TokenEndpointConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := tecu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tecu *TokenEndpointConfigUpdate) Exec(ctx context.Context) error {
	_, err := tecu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tecu *TokenEndpointConfigUpdate) ExecX(ctx context.Context) {
	if err := tecu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tecu *TokenEndpointConfigUpdate) check() error {
	if v, ok := tecu.mutation.Endpoint(); ok {
		if err := tokenendpointconfig.EndpointValidator(v); err != nil {
			return &ValidationError{Name: "endpoint", err: fmt.Errorf(`ent: validator failed for field "TokenEndpointConfig.endpoint": %w`, err)}
		}
	}
	if _, ok := tecu.mutation.ServiceID(); tecu.mutation.ServiceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TokenEndpointConfig.service"`)
	}
	return nil
}

func (tecu *TokenEndpointConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tecu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tokenendpointconfig.Table, tokenendpointconfig.Columns, sqlgraph.NewFieldSpec(tokenendpointconfig.FieldID, field.TypeString))
	if ps := tecu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tecu.mutation.Endpoint(); ok {
		_spec.SetField(tokenendpointconfig.FieldEndpoint, field.TypeString, value)
	}
	if value, ok := tecu.mutation.AllowedAuthenticationMethods(); ok {
		_spec.SetField(tokenendpointconfig.FieldAllowedAuthenticationMethods, field.TypeJSON, value)
	}
	if value, ok := tecu.mutation.AppendedAllowedAuthenticationMethods(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, tokenendpointconfig.FieldAllowedAuthenticationMethods, value)
		})
	}
	if tecu.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tokenendpointconfig.ServiceTable,
			Columns: []string{tokenendpointconfig.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tecu.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tokenendpointconfig.ServiceTable,
			Columns: []string{tokenendpointconfig.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tecu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tokenendpointconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tecu.mutation.done = true
	return n, nil
}

// TokenEndpointConfigUpdateOne is the builder for updating a single TokenEndpointConfig entity.
type TokenEndpointConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TokenEndpointConfigMutation
}

// SetEndpoint sets the "endpoint" field.
func (tecuo *TokenEndpointConfigUpdateOne) SetEndpoint(s string) *TokenEndpointConfigUpdateOne {
	tecuo.mutation.SetEndpoint(s)
	return tecuo
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (tecuo *TokenEndpointConfigUpdateOne) SetNillableEndpoint(s *string) *TokenEndpointConfigUpdateOne {
	if s != nil {
		tecuo.SetEndpoint(*s)
	}
	return tecuo
}

// SetAllowedAuthenticationMethods sets the "allowed_authentication_methods" field.
func (tecuo *TokenEndpointConfigUpdateOne) SetAllowedAuthenticationMethods(s []string) *TokenEndpointConfigUpdateOne {
	tecuo.mutation.SetAllowedAuthenticationMethods(s)
	return tecuo
}

// AppendAllowedAuthenticationMethods appends s to the "allowed_authentication_methods" field.
func (tecuo *TokenEndpointConfigUpdateOne) AppendAllowedAuthenticationMethods(s []string) *TokenEndpointConfigUpdateOne {
	tecuo.mutation.AppendAllowedAuthenticationMethods(s)
	return tecuo
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (tecuo *TokenEndpointConfigUpdateOne) SetServiceID(id string) *TokenEndpointConfigUpdateOne {
	tecuo.mutation.SetServiceID(id)
	return tecuo
}

// SetService sets the "service" edge to the Service entity.
func (tecuo *TokenEndpointConfigUpdateOne) SetService(s *Service) *TokenEndpointConfigUpdateOne {
	return tecuo.SetServiceID(s.ID)
}

// Mutation returns the TokenEndpointConfigMutation object of the builder.
func (tecuo *TokenEndpointConfigUpdateOne) Mutation() *TokenEndpointConfigMutation {
	return tecuo.mutation
}

// ClearService clears the "service" edge to the Service entity.
func (tecuo *TokenEndpointConfigUpdateOne) ClearService() *TokenEndpointConfigUpdateOne {
	tecuo.mutation.ClearService()
	return tecuo
}

// Where appends a list predicates to the TokenEndpointConfigUpdate builder.
func (tecuo *TokenEndpointConfigUpdateOne) Where(ps ...predicate.TokenEndpointConfig) *TokenEndpointConfigUpdateOne {
	tecuo.mutation.Where(ps...)
	return tecuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tecuo *TokenEndpointConfigUpdateOne) Select(field string, fields ...string) *TokenEndpointConfigUpdateOne {
	tecuo.fields = append([]string{field}, fields...)
	return tecuo
}

// Save executes the query and returns the updated TokenEndpointConfig entity.
func (tecuo *TokenEndpointConfigUpdateOne) Save(ctx context.Context) (*TokenEndpointConfig, error) {
	return withHooks(ctx, tecuo.sqlSave, tecuo.mutation, tecuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tecuo *TokenEndpointConfigUpdateOne) SaveX(ctx context.Context) *TokenEndpointConfig {
	node, err := tecuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tecuo *TokenEndpointConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := tecuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tecuo *TokenEndpointConfigUpdateOne) ExecX(ctx context.Context) {
	if err := tecuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tecuo *TokenEndpointConfigUpdateOne) check() error {
	if v, ok := tecuo.mutation.Endpoint(); ok {
		if err := tokenendpointconfig.EndpointValidator(v); err != nil {
			return &ValidationError{Name: "endpoint", err: fmt.Errorf(`ent: validator failed for field "TokenEndpointConfig.endpoint": %w`, err)}
		}
	}
	if _, ok := tecuo.mutation.ServiceID(); tecuo.mutation.ServiceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TokenEndpointConfig.service"`)
	}
	return nil
}

func (tecuo *TokenEndpointConfigUpdateOne) sqlSave(ctx context.Context) (_node *TokenEndpointConfig, err error) {
	if err := tecuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tokenendpointconfig.Table, tokenendpointconfig.Columns, sqlgraph.NewFieldSpec(tokenendpointconfig.FieldID, field.TypeString))
	id, ok := tecuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TokenEndpointConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tecuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tokenendpointconfig.FieldID)
		for _, f := range fields {
			if !tokenendpointconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tokenendpointconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tecuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tecuo.mutation.Endpoint(); ok {
		_spec.SetField(tokenendpointconfig.FieldEndpoint, field.TypeString, value)
	}
	if value, ok := tecuo.mutation.AllowedAuthenticationMethods(); ok {
		_spec.SetField(tokenendpointconfig.FieldAllowedAuthenticationMethods, field.TypeJSON, value)
	}
	if value, ok := tecuo.mutation.AppendedAllowedAuthenticationMethods(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, tokenendpointconfig.FieldAllowedAuthenticationMethods, value)
		})
	}
	if tecuo.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tokenendpointconfig.ServiceTable,
			Columns: []string{tokenendpointconfig.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tecuo.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tokenendpointconfig.ServiceTable,
			Columns: []string{tokenendpointconfig.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TokenEndpointConfig{config: tecuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tecuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tokenendpointconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tecuo.mutation.done = true
	return _node, nil
}
