// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.authbricks.com/bricks/ent/service"
	"go.authbricks.com/bricks/ent/serviceintrospectionendpointconfig"
)

// ServiceIntrospectionEndpointConfigCreate is the builder for creating a ServiceIntrospectionEndpointConfig entity.
type ServiceIntrospectionEndpointConfigCreate struct {
	config
	mutation *ServiceIntrospectionEndpointConfigMutation
	hooks    []Hook
}

// SetEndpoint sets the "endpoint" field.
func (siecc *ServiceIntrospectionEndpointConfigCreate) SetEndpoint(s string) *ServiceIntrospectionEndpointConfigCreate {
	siecc.mutation.SetEndpoint(s)
	return siecc
}

// SetID sets the "id" field.
func (siecc *ServiceIntrospectionEndpointConfigCreate) SetID(s string) *ServiceIntrospectionEndpointConfigCreate {
	siecc.mutation.SetID(s)
	return siecc
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (siecc *ServiceIntrospectionEndpointConfigCreate) SetServiceID(id string) *ServiceIntrospectionEndpointConfigCreate {
	siecc.mutation.SetServiceID(id)
	return siecc
}

// SetService sets the "service" edge to the Service entity.
func (siecc *ServiceIntrospectionEndpointConfigCreate) SetService(s *Service) *ServiceIntrospectionEndpointConfigCreate {
	return siecc.SetServiceID(s.ID)
}

// Mutation returns the ServiceIntrospectionEndpointConfigMutation object of the builder.
func (siecc *ServiceIntrospectionEndpointConfigCreate) Mutation() *ServiceIntrospectionEndpointConfigMutation {
	return siecc.mutation
}

// Save creates the ServiceIntrospectionEndpointConfig in the database.
func (siecc *ServiceIntrospectionEndpointConfigCreate) Save(ctx context.Context) (*ServiceIntrospectionEndpointConfig, error) {
	return withHooks(ctx, siecc.sqlSave, siecc.mutation, siecc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (siecc *ServiceIntrospectionEndpointConfigCreate) SaveX(ctx context.Context) *ServiceIntrospectionEndpointConfig {
	v, err := siecc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (siecc *ServiceIntrospectionEndpointConfigCreate) Exec(ctx context.Context) error {
	_, err := siecc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (siecc *ServiceIntrospectionEndpointConfigCreate) ExecX(ctx context.Context) {
	if err := siecc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (siecc *ServiceIntrospectionEndpointConfigCreate) check() error {
	if _, ok := siecc.mutation.Endpoint(); !ok {
		return &ValidationError{Name: "endpoint", err: errors.New(`ent: missing required field "ServiceIntrospectionEndpointConfig.endpoint"`)}
	}
	if v, ok := siecc.mutation.Endpoint(); ok {
		if err := serviceintrospectionendpointconfig.EndpointValidator(v); err != nil {
			return &ValidationError{Name: "endpoint", err: fmt.Errorf(`ent: validator failed for field "ServiceIntrospectionEndpointConfig.endpoint": %w`, err)}
		}
	}
	if v, ok := siecc.mutation.ID(); ok {
		if err := serviceintrospectionendpointconfig.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "ServiceIntrospectionEndpointConfig.id": %w`, err)}
		}
	}
	if _, ok := siecc.mutation.ServiceID(); !ok {
		return &ValidationError{Name: "service", err: errors.New(`ent: missing required edge "ServiceIntrospectionEndpointConfig.service"`)}
	}
	return nil
}

func (siecc *ServiceIntrospectionEndpointConfigCreate) sqlSave(ctx context.Context) (*ServiceIntrospectionEndpointConfig, error) {
	if err := siecc.check(); err != nil {
		return nil, err
	}
	_node, _spec := siecc.createSpec()
	if err := sqlgraph.CreateNode(ctx, siecc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ServiceIntrospectionEndpointConfig.ID type: %T", _spec.ID.Value)
		}
	}
	siecc.mutation.id = &_node.ID
	siecc.mutation.done = true
	return _node, nil
}

func (siecc *ServiceIntrospectionEndpointConfigCreate) createSpec() (*ServiceIntrospectionEndpointConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &ServiceIntrospectionEndpointConfig{config: siecc.config}
		_spec = sqlgraph.NewCreateSpec(serviceintrospectionendpointconfig.Table, sqlgraph.NewFieldSpec(serviceintrospectionendpointconfig.FieldID, field.TypeString))
	)
	if id, ok := siecc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := siecc.mutation.Endpoint(); ok {
		_spec.SetField(serviceintrospectionendpointconfig.FieldEndpoint, field.TypeString, value)
		_node.Endpoint = value
	}
	if nodes := siecc.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   serviceintrospectionendpointconfig.ServiceTable,
			Columns: []string{serviceintrospectionendpointconfig.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.service_service_introspection_endpoint_config = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ServiceIntrospectionEndpointConfigCreateBulk is the builder for creating many ServiceIntrospectionEndpointConfig entities in bulk.
type ServiceIntrospectionEndpointConfigCreateBulk struct {
	config
	err      error
	builders []*ServiceIntrospectionEndpointConfigCreate
}

// Save creates the ServiceIntrospectionEndpointConfig entities in the database.
func (sieccb *ServiceIntrospectionEndpointConfigCreateBulk) Save(ctx context.Context) ([]*ServiceIntrospectionEndpointConfig, error) {
	if sieccb.err != nil {
		return nil, sieccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sieccb.builders))
	nodes := make([]*ServiceIntrospectionEndpointConfig, len(sieccb.builders))
	mutators := make([]Mutator, len(sieccb.builders))
	for i := range sieccb.builders {
		func(i int, root context.Context) {
			builder := sieccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ServiceIntrospectionEndpointConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sieccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sieccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sieccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sieccb *ServiceIntrospectionEndpointConfigCreateBulk) SaveX(ctx context.Context) []*ServiceIntrospectionEndpointConfig {
	v, err := sieccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sieccb *ServiceIntrospectionEndpointConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := sieccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sieccb *ServiceIntrospectionEndpointConfigCreateBulk) ExecX(ctx context.Context) {
	if err := sieccb.Exec(ctx); err != nil {
		panic(err)
	}
}
