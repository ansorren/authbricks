// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.authbricks.com/bricks/ent/keyset"
	"go.authbricks.com/bricks/ent/predicate"
	"go.authbricks.com/bricks/ent/service"
	"go.authbricks.com/bricks/ent/serviceconfig"
)

// ServiceConfigUpdate is the builder for updating ServiceConfig entities.
type ServiceConfigUpdate struct {
	config
	hooks    []Hook
	mutation *ServiceConfigMutation
}

// Where appends a list predicates to the ServiceConfigUpdate builder.
func (scu *ServiceConfigUpdate) Where(ps ...predicate.ServiceConfig) *ServiceConfigUpdate {
	scu.mutation.Where(ps...)
	return scu
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (scu *ServiceConfigUpdate) SetServiceID(id string) *ServiceConfigUpdate {
	scu.mutation.SetServiceID(id)
	return scu
}

// SetService sets the "service" edge to the Service entity.
func (scu *ServiceConfigUpdate) SetService(s *Service) *ServiceConfigUpdate {
	return scu.SetServiceID(s.ID)
}

// AddKeySetIDs adds the "key_sets" edge to the KeySet entity by IDs.
func (scu *ServiceConfigUpdate) AddKeySetIDs(ids ...string) *ServiceConfigUpdate {
	scu.mutation.AddKeySetIDs(ids...)
	return scu
}

// AddKeySets adds the "key_sets" edges to the KeySet entity.
func (scu *ServiceConfigUpdate) AddKeySets(k ...*KeySet) *ServiceConfigUpdate {
	ids := make([]string, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return scu.AddKeySetIDs(ids...)
}

// Mutation returns the ServiceConfigMutation object of the builder.
func (scu *ServiceConfigUpdate) Mutation() *ServiceConfigMutation {
	return scu.mutation
}

// ClearService clears the "service" edge to the Service entity.
func (scu *ServiceConfigUpdate) ClearService() *ServiceConfigUpdate {
	scu.mutation.ClearService()
	return scu
}

// ClearKeySets clears all "key_sets" edges to the KeySet entity.
func (scu *ServiceConfigUpdate) ClearKeySets() *ServiceConfigUpdate {
	scu.mutation.ClearKeySets()
	return scu
}

// RemoveKeySetIDs removes the "key_sets" edge to KeySet entities by IDs.
func (scu *ServiceConfigUpdate) RemoveKeySetIDs(ids ...string) *ServiceConfigUpdate {
	scu.mutation.RemoveKeySetIDs(ids...)
	return scu
}

// RemoveKeySets removes "key_sets" edges to KeySet entities.
func (scu *ServiceConfigUpdate) RemoveKeySets(k ...*KeySet) *ServiceConfigUpdate {
	ids := make([]string, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return scu.RemoveKeySetIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scu *ServiceConfigUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, scu.sqlSave, scu.mutation, scu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scu *ServiceConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := scu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scu *ServiceConfigUpdate) Exec(ctx context.Context) error {
	_, err := scu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scu *ServiceConfigUpdate) ExecX(ctx context.Context) {
	if err := scu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scu *ServiceConfigUpdate) check() error {
	if _, ok := scu.mutation.ServiceID(); scu.mutation.ServiceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ServiceConfig.service"`)
	}
	return nil
}

func (scu *ServiceConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := scu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(serviceconfig.Table, serviceconfig.Columns, sqlgraph.NewFieldSpec(serviceconfig.FieldID, field.TypeString))
	if ps := scu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if scu.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   serviceconfig.ServiceTable,
			Columns: []string{serviceconfig.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   serviceconfig.ServiceTable,
			Columns: []string{serviceconfig.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scu.mutation.KeySetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceconfig.KeySetsTable,
			Columns: []string{serviceconfig.KeySetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(keyset.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.RemovedKeySetsIDs(); len(nodes) > 0 && !scu.mutation.KeySetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceconfig.KeySetsTable,
			Columns: []string{serviceconfig.KeySetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(keyset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.KeySetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceconfig.KeySetsTable,
			Columns: []string{serviceconfig.KeySetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(keyset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, scu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{serviceconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	scu.mutation.done = true
	return n, nil
}

// ServiceConfigUpdateOne is the builder for updating a single ServiceConfig entity.
type ServiceConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServiceConfigMutation
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (scuo *ServiceConfigUpdateOne) SetServiceID(id string) *ServiceConfigUpdateOne {
	scuo.mutation.SetServiceID(id)
	return scuo
}

// SetService sets the "service" edge to the Service entity.
func (scuo *ServiceConfigUpdateOne) SetService(s *Service) *ServiceConfigUpdateOne {
	return scuo.SetServiceID(s.ID)
}

// AddKeySetIDs adds the "key_sets" edge to the KeySet entity by IDs.
func (scuo *ServiceConfigUpdateOne) AddKeySetIDs(ids ...string) *ServiceConfigUpdateOne {
	scuo.mutation.AddKeySetIDs(ids...)
	return scuo
}

// AddKeySets adds the "key_sets" edges to the KeySet entity.
func (scuo *ServiceConfigUpdateOne) AddKeySets(k ...*KeySet) *ServiceConfigUpdateOne {
	ids := make([]string, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return scuo.AddKeySetIDs(ids...)
}

// Mutation returns the ServiceConfigMutation object of the builder.
func (scuo *ServiceConfigUpdateOne) Mutation() *ServiceConfigMutation {
	return scuo.mutation
}

// ClearService clears the "service" edge to the Service entity.
func (scuo *ServiceConfigUpdateOne) ClearService() *ServiceConfigUpdateOne {
	scuo.mutation.ClearService()
	return scuo
}

// ClearKeySets clears all "key_sets" edges to the KeySet entity.
func (scuo *ServiceConfigUpdateOne) ClearKeySets() *ServiceConfigUpdateOne {
	scuo.mutation.ClearKeySets()
	return scuo
}

// RemoveKeySetIDs removes the "key_sets" edge to KeySet entities by IDs.
func (scuo *ServiceConfigUpdateOne) RemoveKeySetIDs(ids ...string) *ServiceConfigUpdateOne {
	scuo.mutation.RemoveKeySetIDs(ids...)
	return scuo
}

// RemoveKeySets removes "key_sets" edges to KeySet entities.
func (scuo *ServiceConfigUpdateOne) RemoveKeySets(k ...*KeySet) *ServiceConfigUpdateOne {
	ids := make([]string, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return scuo.RemoveKeySetIDs(ids...)
}

// Where appends a list predicates to the ServiceConfigUpdate builder.
func (scuo *ServiceConfigUpdateOne) Where(ps ...predicate.ServiceConfig) *ServiceConfigUpdateOne {
	scuo.mutation.Where(ps...)
	return scuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (scuo *ServiceConfigUpdateOne) Select(field string, fields ...string) *ServiceConfigUpdateOne {
	scuo.fields = append([]string{field}, fields...)
	return scuo
}

// Save executes the query and returns the updated ServiceConfig entity.
func (scuo *ServiceConfigUpdateOne) Save(ctx context.Context) (*ServiceConfig, error) {
	return withHooks(ctx, scuo.sqlSave, scuo.mutation, scuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scuo *ServiceConfigUpdateOne) SaveX(ctx context.Context) *ServiceConfig {
	node, err := scuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scuo *ServiceConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := scuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scuo *ServiceConfigUpdateOne) ExecX(ctx context.Context) {
	if err := scuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scuo *ServiceConfigUpdateOne) check() error {
	if _, ok := scuo.mutation.ServiceID(); scuo.mutation.ServiceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ServiceConfig.service"`)
	}
	return nil
}

func (scuo *ServiceConfigUpdateOne) sqlSave(ctx context.Context) (_node *ServiceConfig, err error) {
	if err := scuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(serviceconfig.Table, serviceconfig.Columns, sqlgraph.NewFieldSpec(serviceconfig.FieldID, field.TypeString))
	id, ok := scuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ServiceConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := scuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, serviceconfig.FieldID)
		for _, f := range fields {
			if !serviceconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != serviceconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := scuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if scuo.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   serviceconfig.ServiceTable,
			Columns: []string{serviceconfig.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   serviceconfig.ServiceTable,
			Columns: []string{serviceconfig.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scuo.mutation.KeySetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceconfig.KeySetsTable,
			Columns: []string{serviceconfig.KeySetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(keyset.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.RemovedKeySetsIDs(); len(nodes) > 0 && !scuo.mutation.KeySetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceconfig.KeySetsTable,
			Columns: []string{serviceconfig.KeySetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(keyset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.KeySetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceconfig.KeySetsTable,
			Columns: []string{serviceconfig.KeySetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(keyset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ServiceConfig{config: scuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, scuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{serviceconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	scuo.mutation.done = true
	return _node, nil
}
