// Code generated by ent, DO NOT EDIT.

package m2mgrant

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the m2mgrant type in the database.
	Label = "m2m_grant"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldScopes holds the string denoting the scopes field in the database.
	FieldScopes = "scopes"
	// EdgeClient holds the string denoting the client edge name in mutations.
	EdgeClient = "client"
	// Table holds the table name of the m2mgrant in the database.
	Table = "m2m_grants"
	// ClientTable is the table that holds the client relation/edge.
	ClientTable = "m2m_grants"
	// ClientInverseTable is the table name for the OAuthClient entity.
	// It exists in this package in order to avoid circular dependency with the "oauthclient" package.
	ClientInverseTable = "oauth_clients"
	// ClientColumn is the table column denoting the client relation/edge.
	ClientColumn = "oauth_client_m2m_grants"
)

// Columns holds all SQL columns for m2mgrant fields.
var Columns = []string{
	FieldID,
	FieldScopes,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "m2m_grants"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"oauth_client_m2m_grants",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the M2MGrant queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByClientField orders the results by client field.
func ByClientField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClientStep(), sql.OrderByField(field, opts...))
	}
}
func newClientStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClientInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ClientTable, ClientColumn),
	)
}
