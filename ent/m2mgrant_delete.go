// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.authbricks.com/bricks/ent/m2mgrant"
	"go.authbricks.com/bricks/ent/predicate"
)

// M2MGrantDelete is the builder for deleting a M2MGrant entity.
type M2MGrantDelete struct {
	config
	hooks    []Hook
	mutation *M2MGrantMutation
}

// Where appends a list predicates to the M2MGrantDelete builder.
func (mgd *M2MGrantDelete) Where(ps ...predicate.M2MGrant) *M2MGrantDelete {
	mgd.mutation.Where(ps...)
	return mgd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (mgd *M2MGrantDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, mgd.sqlExec, mgd.mutation, mgd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (mgd *M2MGrantDelete) ExecX(ctx context.Context) int {
	n, err := mgd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (mgd *M2MGrantDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(m2mgrant.Table, sqlgraph.NewFieldSpec(m2mgrant.FieldID, field.TypeString))
	if ps := mgd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, mgd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	mgd.mutation.done = true
	return affected, err
}

// M2MGrantDeleteOne is the builder for deleting a single M2MGrant entity.
type M2MGrantDeleteOne struct {
	mgd *M2MGrantDelete
}

// Where appends a list predicates to the M2MGrantDelete builder.
func (mgdo *M2MGrantDeleteOne) Where(ps ...predicate.M2MGrant) *M2MGrantDeleteOne {
	mgdo.mgd.mutation.Where(ps...)
	return mgdo
}

// Exec executes the deletion query.
func (mgdo *M2MGrantDeleteOne) Exec(ctx context.Context) error {
	n, err := mgdo.mgd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{m2mgrant.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (mgdo *M2MGrantDeleteOne) ExecX(ctx context.Context) {
	if err := mgdo.Exec(ctx); err != nil {
		panic(err)
	}
}
