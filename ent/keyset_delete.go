// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.authbricks.com/bricks/ent/keyset"
	"go.authbricks.com/bricks/ent/predicate"
)

// KeySetDelete is the builder for deleting a KeySet entity.
type KeySetDelete struct {
	config
	hooks    []Hook
	mutation *KeySetMutation
}

// Where appends a list predicates to the KeySetDelete builder.
func (ksd *KeySetDelete) Where(ps ...predicate.KeySet) *KeySetDelete {
	ksd.mutation.Where(ps...)
	return ksd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ksd *KeySetDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ksd.sqlExec, ksd.mutation, ksd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ksd *KeySetDelete) ExecX(ctx context.Context) int {
	n, err := ksd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ksd *KeySetDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(keyset.Table, sqlgraph.NewFieldSpec(keyset.FieldID, field.TypeString))
	if ps := ksd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ksd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ksd.mutation.done = true
	return affected, err
}

// KeySetDeleteOne is the builder for deleting a single KeySet entity.
type KeySetDeleteOne struct {
	ksd *KeySetDelete
}

// Where appends a list predicates to the KeySetDelete builder.
func (ksdo *KeySetDeleteOne) Where(ps ...predicate.KeySet) *KeySetDeleteOne {
	ksdo.ksd.mutation.Where(ps...)
	return ksdo
}

// Exec executes the deletion query.
func (ksdo *KeySetDeleteOne) Exec(ctx context.Context) error {
	n, err := ksdo.ksd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{keyset.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ksdo *KeySetDeleteOne) ExecX(ctx context.Context) {
	if err := ksdo.Exec(ctx); err != nil {
		panic(err)
	}
}
