// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"go.authbricks.com/bricks/ent/connectionconfig"
	"go.authbricks.com/bricks/ent/oidcconnection"
	"go.authbricks.com/bricks/ent/user"
)

// OIDCConnection is the model entity for the OIDCConnection schema.
type OIDCConnection struct {
	config `hcl:"-" json:"-"`
	// ID of the ent.
	ID string `json:"id" hcl:"id"`
	// Enabled holds the value of the "enabled" field.
	Enabled bool `json:"enabled" hcl:"enabled"`
	// ClientID holds the value of the "client_id" field.
	ClientID string `json:"client_id" hcl:"client_id"`
	// ClientSecret holds the value of the "client_secret" field.
	ClientSecret string `json:"client_secret" hcl:"client_secret"`
	// Scopes holds the value of the "scopes" field.
	Scopes []string `json:"scopes" hcl:"scopes"`
	// RedirectURI holds the value of the "redirect_uri" field.
	RedirectURI string `json:"redirect_uri" hcl:"redirect_uri"`
	// WellKnownOpenidConfiguration holds the value of the "well_known_openid_configuration" field.
	WellKnownOpenidConfiguration string `json:"well_known_openid_configuration" hcl:"well_known_openid_configuration"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OIDCConnectionQuery when eager-loading is set.
	Edges                              OIDCConnectionEdges `json:"edges"`
	connection_config_oidc_connections *string
	selectValues                       sql.SelectValues
}

// OIDCConnectionEdges holds the relations/edges for other nodes in the graph.
type OIDCConnectionEdges struct {
	// ConnectionConfig holds the value of the connection_config edge.
	ConnectionConfig *ConnectionConfig `json:"connection_config,omitempty"`
	// Users holds the value of the users edge.
	Users *User `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ConnectionConfigOrErr returns the ConnectionConfig value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OIDCConnectionEdges) ConnectionConfigOrErr() (*ConnectionConfig, error) {
	if e.ConnectionConfig != nil {
		return e.ConnectionConfig, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: connectionconfig.Label}
	}
	return nil, &NotLoadedError{edge: "connection_config"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OIDCConnectionEdges) UsersOrErr() (*User, error) {
	if e.Users != nil {
		return e.Users, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OIDCConnection) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oidcconnection.FieldScopes:
			values[i] = new([]byte)
		case oidcconnection.FieldEnabled:
			values[i] = new(sql.NullBool)
		case oidcconnection.FieldID, oidcconnection.FieldClientID, oidcconnection.FieldClientSecret, oidcconnection.FieldRedirectURI, oidcconnection.FieldWellKnownOpenidConfiguration:
			values[i] = new(sql.NullString)
		case oidcconnection.ForeignKeys[0]: // connection_config_oidc_connections
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OIDCConnection fields.
func (oc *OIDCConnection) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oidcconnection.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				oc.ID = value.String
			}
		case oidcconnection.FieldEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enabled", values[i])
			} else if value.Valid {
				oc.Enabled = value.Bool
			}
		case oidcconnection.FieldClientID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_id", values[i])
			} else if value.Valid {
				oc.ClientID = value.String
			}
		case oidcconnection.FieldClientSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_secret", values[i])
			} else if value.Valid {
				oc.ClientSecret = value.String
			}
		case oidcconnection.FieldScopes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field scopes", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &oc.Scopes); err != nil {
					return fmt.Errorf("unmarshal field scopes: %w", err)
				}
			}
		case oidcconnection.FieldRedirectURI:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field redirect_uri", values[i])
			} else if value.Valid {
				oc.RedirectURI = value.String
			}
		case oidcconnection.FieldWellKnownOpenidConfiguration:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field well_known_openid_configuration", values[i])
			} else if value.Valid {
				oc.WellKnownOpenidConfiguration = value.String
			}
		case oidcconnection.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field connection_config_oidc_connections", values[i])
			} else if value.Valid {
				oc.connection_config_oidc_connections = new(string)
				*oc.connection_config_oidc_connections = value.String
			}
		default:
			oc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OIDCConnection.
// This includes values selected through modifiers, order, etc.
func (oc *OIDCConnection) Value(name string) (ent.Value, error) {
	return oc.selectValues.Get(name)
}

// QueryConnectionConfig queries the "connection_config" edge of the OIDCConnection entity.
func (oc *OIDCConnection) QueryConnectionConfig() *ConnectionConfigQuery {
	return NewOIDCConnectionClient(oc.config).QueryConnectionConfig(oc)
}

// QueryUsers queries the "users" edge of the OIDCConnection entity.
func (oc *OIDCConnection) QueryUsers() *UserQuery {
	return NewOIDCConnectionClient(oc.config).QueryUsers(oc)
}

// Update returns a builder for updating this OIDCConnection.
// Note that you need to call OIDCConnection.Unwrap() before calling this method if this OIDCConnection
// was returned from a transaction, and the transaction was committed or rolled back.
func (oc *OIDCConnection) Update() *OIDCConnectionUpdateOne {
	return NewOIDCConnectionClient(oc.config).UpdateOne(oc)
}

// Unwrap unwraps the OIDCConnection entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oc *OIDCConnection) Unwrap() *OIDCConnection {
	_tx, ok := oc.config.driver.(*txDriver)
	if !ok {
		panic("ent: OIDCConnection is not a transactional entity")
	}
	oc.config.driver = _tx.drv
	return oc
}

// String implements the fmt.Stringer.
func (oc *OIDCConnection) String() string {
	var builder strings.Builder
	builder.WriteString("OIDCConnection(")
	builder.WriteString(fmt.Sprintf("id=%v, ", oc.ID))
	builder.WriteString("enabled=")
	builder.WriteString(fmt.Sprintf("%v", oc.Enabled))
	builder.WriteString(", ")
	builder.WriteString("client_id=")
	builder.WriteString(oc.ClientID)
	builder.WriteString(", ")
	builder.WriteString("client_secret=")
	builder.WriteString(oc.ClientSecret)
	builder.WriteString(", ")
	builder.WriteString("scopes=")
	builder.WriteString(fmt.Sprintf("%v", oc.Scopes))
	builder.WriteString(", ")
	builder.WriteString("redirect_uri=")
	builder.WriteString(oc.RedirectURI)
	builder.WriteString(", ")
	builder.WriteString("well_known_openid_configuration=")
	builder.WriteString(oc.WellKnownOpenidConfiguration)
	builder.WriteByte(')')
	return builder.String()
}

// OIDCConnections is a parsable slice of OIDCConnection.
type OIDCConnections []*OIDCConnection
