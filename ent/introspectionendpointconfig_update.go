// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.authbricks.com/bricks/ent/introspectionendpointconfig"
	"go.authbricks.com/bricks/ent/predicate"
	"go.authbricks.com/bricks/ent/service"
)

// IntrospectionEndpointConfigUpdate is the builder for updating IntrospectionEndpointConfig entities.
type IntrospectionEndpointConfigUpdate struct {
	config
	hooks    []Hook
	mutation *IntrospectionEndpointConfigMutation
}

// Where appends a list predicates to the IntrospectionEndpointConfigUpdate builder.
func (iecu *IntrospectionEndpointConfigUpdate) Where(ps ...predicate.IntrospectionEndpointConfig) *IntrospectionEndpointConfigUpdate {
	iecu.mutation.Where(ps...)
	return iecu
}

// SetEndpoint sets the "endpoint" field.
func (iecu *IntrospectionEndpointConfigUpdate) SetEndpoint(s string) *IntrospectionEndpointConfigUpdate {
	iecu.mutation.SetEndpoint(s)
	return iecu
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (iecu *IntrospectionEndpointConfigUpdate) SetNillableEndpoint(s *string) *IntrospectionEndpointConfigUpdate {
	if s != nil {
		iecu.SetEndpoint(*s)
	}
	return iecu
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (iecu *IntrospectionEndpointConfigUpdate) SetServiceID(id string) *IntrospectionEndpointConfigUpdate {
	iecu.mutation.SetServiceID(id)
	return iecu
}

// SetService sets the "service" edge to the Service entity.
func (iecu *IntrospectionEndpointConfigUpdate) SetService(s *Service) *IntrospectionEndpointConfigUpdate {
	return iecu.SetServiceID(s.ID)
}

// Mutation returns the IntrospectionEndpointConfigMutation object of the builder.
func (iecu *IntrospectionEndpointConfigUpdate) Mutation() *IntrospectionEndpointConfigMutation {
	return iecu.mutation
}

// ClearService clears the "service" edge to the Service entity.
func (iecu *IntrospectionEndpointConfigUpdate) ClearService() *IntrospectionEndpointConfigUpdate {
	iecu.mutation.ClearService()
	return iecu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iecu *IntrospectionEndpointConfigUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iecu.sqlSave, iecu.mutation, iecu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iecu *IntrospectionEndpointConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := iecu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iecu *IntrospectionEndpointConfigUpdate) Exec(ctx context.Context) error {
	_, err := iecu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iecu *IntrospectionEndpointConfigUpdate) ExecX(ctx context.Context) {
	if err := iecu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iecu *IntrospectionEndpointConfigUpdate) check() error {
	if v, ok := iecu.mutation.Endpoint(); ok {
		if err := introspectionendpointconfig.EndpointValidator(v); err != nil {
			return &ValidationError{Name: "endpoint", err: fmt.Errorf(`ent: validator failed for field "IntrospectionEndpointConfig.endpoint": %w`, err)}
		}
	}
	if _, ok := iecu.mutation.ServiceID(); iecu.mutation.ServiceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "IntrospectionEndpointConfig.service"`)
	}
	return nil
}

func (iecu *IntrospectionEndpointConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iecu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(introspectionendpointconfig.Table, introspectionendpointconfig.Columns, sqlgraph.NewFieldSpec(introspectionendpointconfig.FieldID, field.TypeString))
	if ps := iecu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iecu.mutation.Endpoint(); ok {
		_spec.SetField(introspectionendpointconfig.FieldEndpoint, field.TypeString, value)
	}
	if iecu.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   introspectionendpointconfig.ServiceTable,
			Columns: []string{introspectionendpointconfig.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iecu.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   introspectionendpointconfig.ServiceTable,
			Columns: []string{introspectionendpointconfig.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iecu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{introspectionendpointconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iecu.mutation.done = true
	return n, nil
}

// IntrospectionEndpointConfigUpdateOne is the builder for updating a single IntrospectionEndpointConfig entity.
type IntrospectionEndpointConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IntrospectionEndpointConfigMutation
}

// SetEndpoint sets the "endpoint" field.
func (iecuo *IntrospectionEndpointConfigUpdateOne) SetEndpoint(s string) *IntrospectionEndpointConfigUpdateOne {
	iecuo.mutation.SetEndpoint(s)
	return iecuo
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (iecuo *IntrospectionEndpointConfigUpdateOne) SetNillableEndpoint(s *string) *IntrospectionEndpointConfigUpdateOne {
	if s != nil {
		iecuo.SetEndpoint(*s)
	}
	return iecuo
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (iecuo *IntrospectionEndpointConfigUpdateOne) SetServiceID(id string) *IntrospectionEndpointConfigUpdateOne {
	iecuo.mutation.SetServiceID(id)
	return iecuo
}

// SetService sets the "service" edge to the Service entity.
func (iecuo *IntrospectionEndpointConfigUpdateOne) SetService(s *Service) *IntrospectionEndpointConfigUpdateOne {
	return iecuo.SetServiceID(s.ID)
}

// Mutation returns the IntrospectionEndpointConfigMutation object of the builder.
func (iecuo *IntrospectionEndpointConfigUpdateOne) Mutation() *IntrospectionEndpointConfigMutation {
	return iecuo.mutation
}

// ClearService clears the "service" edge to the Service entity.
func (iecuo *IntrospectionEndpointConfigUpdateOne) ClearService() *IntrospectionEndpointConfigUpdateOne {
	iecuo.mutation.ClearService()
	return iecuo
}

// Where appends a list predicates to the IntrospectionEndpointConfigUpdate builder.
func (iecuo *IntrospectionEndpointConfigUpdateOne) Where(ps ...predicate.IntrospectionEndpointConfig) *IntrospectionEndpointConfigUpdateOne {
	iecuo.mutation.Where(ps...)
	return iecuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iecuo *IntrospectionEndpointConfigUpdateOne) Select(field string, fields ...string) *IntrospectionEndpointConfigUpdateOne {
	iecuo.fields = append([]string{field}, fields...)
	return iecuo
}

// Save executes the query and returns the updated IntrospectionEndpointConfig entity.
func (iecuo *IntrospectionEndpointConfigUpdateOne) Save(ctx context.Context) (*IntrospectionEndpointConfig, error) {
	return withHooks(ctx, iecuo.sqlSave, iecuo.mutation, iecuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iecuo *IntrospectionEndpointConfigUpdateOne) SaveX(ctx context.Context) *IntrospectionEndpointConfig {
	node, err := iecuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iecuo *IntrospectionEndpointConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := iecuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iecuo *IntrospectionEndpointConfigUpdateOne) ExecX(ctx context.Context) {
	if err := iecuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iecuo *IntrospectionEndpointConfigUpdateOne) check() error {
	if v, ok := iecuo.mutation.Endpoint(); ok {
		if err := introspectionendpointconfig.EndpointValidator(v); err != nil {
			return &ValidationError{Name: "endpoint", err: fmt.Errorf(`ent: validator failed for field "IntrospectionEndpointConfig.endpoint": %w`, err)}
		}
	}
	if _, ok := iecuo.mutation.ServiceID(); iecuo.mutation.ServiceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "IntrospectionEndpointConfig.service"`)
	}
	return nil
}

func (iecuo *IntrospectionEndpointConfigUpdateOne) sqlSave(ctx context.Context) (_node *IntrospectionEndpointConfig, err error) {
	if err := iecuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(introspectionendpointconfig.Table, introspectionendpointconfig.Columns, sqlgraph.NewFieldSpec(introspectionendpointconfig.FieldID, field.TypeString))
	id, ok := iecuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IntrospectionEndpointConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iecuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, introspectionendpointconfig.FieldID)
		for _, f := range fields {
			if !introspectionendpointconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != introspectionendpointconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iecuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iecuo.mutation.Endpoint(); ok {
		_spec.SetField(introspectionendpointconfig.FieldEndpoint, field.TypeString, value)
	}
	if iecuo.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   introspectionendpointconfig.ServiceTable,
			Columns: []string{introspectionendpointconfig.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iecuo.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   introspectionendpointconfig.ServiceTable,
			Columns: []string{introspectionendpointconfig.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &IntrospectionEndpointConfig{config: iecuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iecuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{introspectionendpointconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iecuo.mutation.done = true
	return _node, nil
}
