// Code generated by ent, DO NOT EDIT.

package cookiestore

import (
	"entgo.io/ent/dialect/sql"
	"go.authbricks.com/bricks/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.CookieStore {
	return predicate.CookieStore(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.CookieStore {
	return predicate.CookieStore(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.CookieStore {
	return predicate.CookieStore(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.CookieStore {
	return predicate.CookieStore(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.CookieStore {
	return predicate.CookieStore(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.CookieStore {
	return predicate.CookieStore(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.CookieStore {
	return predicate.CookieStore(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.CookieStore {
	return predicate.CookieStore(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.CookieStore {
	return predicate.CookieStore(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.CookieStore {
	return predicate.CookieStore(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.CookieStore {
	return predicate.CookieStore(sql.FieldContainsFold(FieldID, id))
}

// AuthKey applies equality check predicate on the "auth_key" field. It's identical to AuthKeyEQ.
func AuthKey(v string) predicate.CookieStore {
	return predicate.CookieStore(sql.FieldEQ(FieldAuthKey, v))
}

// EncryptionKey applies equality check predicate on the "encryption_key" field. It's identical to EncryptionKeyEQ.
func EncryptionKey(v string) predicate.CookieStore {
	return predicate.CookieStore(sql.FieldEQ(FieldEncryptionKey, v))
}

// AuthKeyEQ applies the EQ predicate on the "auth_key" field.
func AuthKeyEQ(v string) predicate.CookieStore {
	return predicate.CookieStore(sql.FieldEQ(FieldAuthKey, v))
}

// AuthKeyNEQ applies the NEQ predicate on the "auth_key" field.
func AuthKeyNEQ(v string) predicate.CookieStore {
	return predicate.CookieStore(sql.FieldNEQ(FieldAuthKey, v))
}

// AuthKeyIn applies the In predicate on the "auth_key" field.
func AuthKeyIn(vs ...string) predicate.CookieStore {
	return predicate.CookieStore(sql.FieldIn(FieldAuthKey, vs...))
}

// AuthKeyNotIn applies the NotIn predicate on the "auth_key" field.
func AuthKeyNotIn(vs ...string) predicate.CookieStore {
	return predicate.CookieStore(sql.FieldNotIn(FieldAuthKey, vs...))
}

// AuthKeyGT applies the GT predicate on the "auth_key" field.
func AuthKeyGT(v string) predicate.CookieStore {
	return predicate.CookieStore(sql.FieldGT(FieldAuthKey, v))
}

// AuthKeyGTE applies the GTE predicate on the "auth_key" field.
func AuthKeyGTE(v string) predicate.CookieStore {
	return predicate.CookieStore(sql.FieldGTE(FieldAuthKey, v))
}

// AuthKeyLT applies the LT predicate on the "auth_key" field.
func AuthKeyLT(v string) predicate.CookieStore {
	return predicate.CookieStore(sql.FieldLT(FieldAuthKey, v))
}

// AuthKeyLTE applies the LTE predicate on the "auth_key" field.
func AuthKeyLTE(v string) predicate.CookieStore {
	return predicate.CookieStore(sql.FieldLTE(FieldAuthKey, v))
}

// AuthKeyContains applies the Contains predicate on the "auth_key" field.
func AuthKeyContains(v string) predicate.CookieStore {
	return predicate.CookieStore(sql.FieldContains(FieldAuthKey, v))
}

// AuthKeyHasPrefix applies the HasPrefix predicate on the "auth_key" field.
func AuthKeyHasPrefix(v string) predicate.CookieStore {
	return predicate.CookieStore(sql.FieldHasPrefix(FieldAuthKey, v))
}

// AuthKeyHasSuffix applies the HasSuffix predicate on the "auth_key" field.
func AuthKeyHasSuffix(v string) predicate.CookieStore {
	return predicate.CookieStore(sql.FieldHasSuffix(FieldAuthKey, v))
}

// AuthKeyEqualFold applies the EqualFold predicate on the "auth_key" field.
func AuthKeyEqualFold(v string) predicate.CookieStore {
	return predicate.CookieStore(sql.FieldEqualFold(FieldAuthKey, v))
}

// AuthKeyContainsFold applies the ContainsFold predicate on the "auth_key" field.
func AuthKeyContainsFold(v string) predicate.CookieStore {
	return predicate.CookieStore(sql.FieldContainsFold(FieldAuthKey, v))
}

// EncryptionKeyEQ applies the EQ predicate on the "encryption_key" field.
func EncryptionKeyEQ(v string) predicate.CookieStore {
	return predicate.CookieStore(sql.FieldEQ(FieldEncryptionKey, v))
}

// EncryptionKeyNEQ applies the NEQ predicate on the "encryption_key" field.
func EncryptionKeyNEQ(v string) predicate.CookieStore {
	return predicate.CookieStore(sql.FieldNEQ(FieldEncryptionKey, v))
}

// EncryptionKeyIn applies the In predicate on the "encryption_key" field.
func EncryptionKeyIn(vs ...string) predicate.CookieStore {
	return predicate.CookieStore(sql.FieldIn(FieldEncryptionKey, vs...))
}

// EncryptionKeyNotIn applies the NotIn predicate on the "encryption_key" field.
func EncryptionKeyNotIn(vs ...string) predicate.CookieStore {
	return predicate.CookieStore(sql.FieldNotIn(FieldEncryptionKey, vs...))
}

// EncryptionKeyGT applies the GT predicate on the "encryption_key" field.
func EncryptionKeyGT(v string) predicate.CookieStore {
	return predicate.CookieStore(sql.FieldGT(FieldEncryptionKey, v))
}

// EncryptionKeyGTE applies the GTE predicate on the "encryption_key" field.
func EncryptionKeyGTE(v string) predicate.CookieStore {
	return predicate.CookieStore(sql.FieldGTE(FieldEncryptionKey, v))
}

// EncryptionKeyLT applies the LT predicate on the "encryption_key" field.
func EncryptionKeyLT(v string) predicate.CookieStore {
	return predicate.CookieStore(sql.FieldLT(FieldEncryptionKey, v))
}

// EncryptionKeyLTE applies the LTE predicate on the "encryption_key" field.
func EncryptionKeyLTE(v string) predicate.CookieStore {
	return predicate.CookieStore(sql.FieldLTE(FieldEncryptionKey, v))
}

// EncryptionKeyContains applies the Contains predicate on the "encryption_key" field.
func EncryptionKeyContains(v string) predicate.CookieStore {
	return predicate.CookieStore(sql.FieldContains(FieldEncryptionKey, v))
}

// EncryptionKeyHasPrefix applies the HasPrefix predicate on the "encryption_key" field.
func EncryptionKeyHasPrefix(v string) predicate.CookieStore {
	return predicate.CookieStore(sql.FieldHasPrefix(FieldEncryptionKey, v))
}

// EncryptionKeyHasSuffix applies the HasSuffix predicate on the "encryption_key" field.
func EncryptionKeyHasSuffix(v string) predicate.CookieStore {
	return predicate.CookieStore(sql.FieldHasSuffix(FieldEncryptionKey, v))
}

// EncryptionKeyEqualFold applies the EqualFold predicate on the "encryption_key" field.
func EncryptionKeyEqualFold(v string) predicate.CookieStore {
	return predicate.CookieStore(sql.FieldEqualFold(FieldEncryptionKey, v))
}

// EncryptionKeyContainsFold applies the ContainsFold predicate on the "encryption_key" field.
func EncryptionKeyContainsFold(v string) predicate.CookieStore {
	return predicate.CookieStore(sql.FieldContainsFold(FieldEncryptionKey, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CookieStore) predicate.CookieStore {
	return predicate.CookieStore(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CookieStore) predicate.CookieStore {
	return predicate.CookieStore(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CookieStore) predicate.CookieStore {
	return predicate.CookieStore(sql.NotPredicates(p))
}
