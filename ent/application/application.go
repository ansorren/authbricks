// Code generated by ent, DO NOT EDIT.

package application

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the application type in the database.
	Label = "application"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPublic holds the string denoting the public field in the database.
	FieldPublic = "public"
	// EdgeM2mGrant holds the string denoting the m2m_grant edge name in mutations.
	EdgeM2mGrant = "m2m_grant"
	// EdgeCodeGrant holds the string denoting the code_grant edge name in mutations.
	EdgeCodeGrant = "code_grant"
	// EdgeCredentials holds the string denoting the credentials edge name in mutations.
	EdgeCredentials = "credentials"
	// EdgeService holds the string denoting the service edge name in mutations.
	EdgeService = "service"
	// Table holds the table name of the application in the database.
	Table = "applications"
	// M2mGrantTable is the table that holds the m2m_grant relation/edge.
	M2mGrantTable = "m2m_grants"
	// M2mGrantInverseTable is the table name for the M2MGrant entity.
	// It exists in this package in order to avoid circular dependency with the "m2mgrant" package.
	M2mGrantInverseTable = "m2m_grants"
	// M2mGrantColumn is the table column denoting the m2m_grant relation/edge.
	M2mGrantColumn = "application_m2m_grant"
	// CodeGrantTable is the table that holds the code_grant relation/edge.
	CodeGrantTable = "code_grants"
	// CodeGrantInverseTable is the table name for the CodeGrant entity.
	// It exists in this package in order to avoid circular dependency with the "codegrant" package.
	CodeGrantInverseTable = "code_grants"
	// CodeGrantColumn is the table column denoting the code_grant relation/edge.
	CodeGrantColumn = "application_code_grant"
	// CredentialsTable is the table that holds the credentials relation/edge.
	CredentialsTable = "credentials"
	// CredentialsInverseTable is the table name for the Credentials entity.
	// It exists in this package in order to avoid circular dependency with the "credentials" package.
	CredentialsInverseTable = "credentials"
	// CredentialsColumn is the table column denoting the credentials relation/edge.
	CredentialsColumn = "application_credentials"
	// ServiceTable is the table that holds the service relation/edge.
	ServiceTable = "applications"
	// ServiceInverseTable is the table name for the Service entity.
	// It exists in this package in order to avoid circular dependency with the "service" package.
	ServiceInverseTable = "services"
	// ServiceColumn is the table column denoting the service relation/edge.
	ServiceColumn = "service_applications"
)

// Columns holds all SQL columns for application fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldPublic,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "applications"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"service_applications",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultPublic holds the default value on creation for the "public" field.
	DefaultPublic bool
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the Application queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPublic orders the results by the public field.
func ByPublic(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublic, opts...).ToFunc()
}

// ByM2mGrantField orders the results by m2m_grant field.
func ByM2mGrantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newM2mGrantStep(), sql.OrderByField(field, opts...))
	}
}

// ByCodeGrantField orders the results by code_grant field.
func ByCodeGrantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCodeGrantStep(), sql.OrderByField(field, opts...))
	}
}

// ByCredentialsCount orders the results by credentials count.
func ByCredentialsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCredentialsStep(), opts...)
	}
}

// ByCredentials orders the results by credentials terms.
func ByCredentials(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCredentialsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByServiceField orders the results by service field.
func ByServiceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newServiceStep(), sql.OrderByField(field, opts...))
	}
}
func newM2mGrantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(M2mGrantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, M2mGrantTable, M2mGrantColumn),
	)
}
func newCodeGrantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CodeGrantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, CodeGrantTable, CodeGrantColumn),
	)
}
func newCredentialsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CredentialsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CredentialsTable, CredentialsColumn),
	)
}
func newServiceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ServiceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ServiceTable, ServiceColumn),
	)
}
