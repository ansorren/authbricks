// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"go.authbricks.com/bricks/ent/application"
	"go.authbricks.com/bricks/ent/codegrant"
	"go.authbricks.com/bricks/ent/m2mgrant"
	"go.authbricks.com/bricks/ent/service"
)

// Application is the model entity for the Application schema.
type Application struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id"`
	// Name holds the value of the "name" field.
	Name string `json:"name"`
	// Public holds the value of the "public" field.
	Public *bool `json:"public"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ApplicationQuery when eager-loading is set.
	Edges                ApplicationEdges `json:"edges"`
	service_applications *string
	selectValues         sql.SelectValues
}

// ApplicationEdges holds the relations/edges for other nodes in the graph.
type ApplicationEdges struct {
	// M2mGrants holds the value of the m2m_grants edge.
	M2mGrants *M2MGrant `json:"m2m_grants,omitempty"`
	// CodeGrants holds the value of the code_grants edge.
	CodeGrants *CodeGrant `json:"code_grants,omitempty"`
	// Credentials holds the value of the credentials edge.
	Credentials []*Credentials `json:"credentials,omitempty"`
	// Service holds the value of the service edge.
	Service *Service `json:"service,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// M2mGrantsOrErr returns the M2mGrants value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ApplicationEdges) M2mGrantsOrErr() (*M2MGrant, error) {
	if e.M2mGrants != nil {
		return e.M2mGrants, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: m2mgrant.Label}
	}
	return nil, &NotLoadedError{edge: "m2m_grants"}
}

// CodeGrantsOrErr returns the CodeGrants value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ApplicationEdges) CodeGrantsOrErr() (*CodeGrant, error) {
	if e.CodeGrants != nil {
		return e.CodeGrants, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: codegrant.Label}
	}
	return nil, &NotLoadedError{edge: "code_grants"}
}

// CredentialsOrErr returns the Credentials value or an error if the edge
// was not loaded in eager-loading.
func (e ApplicationEdges) CredentialsOrErr() ([]*Credentials, error) {
	if e.loadedTypes[2] {
		return e.Credentials, nil
	}
	return nil, &NotLoadedError{edge: "credentials"}
}

// ServiceOrErr returns the Service value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ApplicationEdges) ServiceOrErr() (*Service, error) {
	if e.Service != nil {
		return e.Service, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: service.Label}
	}
	return nil, &NotLoadedError{edge: "service"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Application) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case application.FieldPublic:
			values[i] = new(sql.NullBool)
		case application.FieldID, application.FieldName:
			values[i] = new(sql.NullString)
		case application.ForeignKeys[0]: // service_applications
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Application fields.
func (a *Application) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case application.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				a.ID = value.String
			}
		case application.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case application.FieldPublic:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field public", values[i])
			} else if value.Valid {
				a.Public = new(bool)
				*a.Public = value.Bool
			}
		case application.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field service_applications", values[i])
			} else if value.Valid {
				a.service_applications = new(string)
				*a.service_applications = value.String
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Application.
// This includes values selected through modifiers, order, etc.
func (a *Application) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryM2mGrants queries the "m2m_grants" edge of the Application entity.
func (a *Application) QueryM2mGrants() *M2MGrantQuery {
	return NewApplicationClient(a.config).QueryM2mGrants(a)
}

// QueryCodeGrants queries the "code_grants" edge of the Application entity.
func (a *Application) QueryCodeGrants() *CodeGrantQuery {
	return NewApplicationClient(a.config).QueryCodeGrants(a)
}

// QueryCredentials queries the "credentials" edge of the Application entity.
func (a *Application) QueryCredentials() *CredentialsQuery {
	return NewApplicationClient(a.config).QueryCredentials(a)
}

// QueryService queries the "service" edge of the Application entity.
func (a *Application) QueryService() *ServiceQuery {
	return NewApplicationClient(a.config).QueryService(a)
}

// Update returns a builder for updating this Application.
// Note that you need to call Application.Unwrap() before calling this method if this Application
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Application) Update() *ApplicationUpdateOne {
	return NewApplicationClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Application entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Application) Unwrap() *Application {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Application is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Application) String() string {
	var builder strings.Builder
	builder.WriteString("Application(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("name=")
	builder.WriteString(a.Name)
	builder.WriteString(", ")
	if v := a.Public; v != nil {
		builder.WriteString("public=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Applications is a parsable slice of Application.
type Applications []*Application
