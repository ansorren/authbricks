// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.authbricks.com/bricks/ent/connectionconfig"
	"go.authbricks.com/bricks/ent/emailpasswordconnection"
	"go.authbricks.com/bricks/ent/predicate"
	"go.authbricks.com/bricks/ent/user"
)

// EmailPasswordConnectionQuery is the builder for querying EmailPasswordConnection entities.
type EmailPasswordConnectionQuery struct {
	config
	ctx                  *QueryContext
	order                []emailpasswordconnection.OrderOption
	inters               []Interceptor
	predicates           []predicate.EmailPasswordConnection
	withConnectionConfig *ConnectionConfigQuery
	withUsers            *UserQuery
	withFKs              bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EmailPasswordConnectionQuery builder.
func (epcq *EmailPasswordConnectionQuery) Where(ps ...predicate.EmailPasswordConnection) *EmailPasswordConnectionQuery {
	epcq.predicates = append(epcq.predicates, ps...)
	return epcq
}

// Limit the number of records to be returned by this query.
func (epcq *EmailPasswordConnectionQuery) Limit(limit int) *EmailPasswordConnectionQuery {
	epcq.ctx.Limit = &limit
	return epcq
}

// Offset to start from.
func (epcq *EmailPasswordConnectionQuery) Offset(offset int) *EmailPasswordConnectionQuery {
	epcq.ctx.Offset = &offset
	return epcq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (epcq *EmailPasswordConnectionQuery) Unique(unique bool) *EmailPasswordConnectionQuery {
	epcq.ctx.Unique = &unique
	return epcq
}

// Order specifies how the records should be ordered.
func (epcq *EmailPasswordConnectionQuery) Order(o ...emailpasswordconnection.OrderOption) *EmailPasswordConnectionQuery {
	epcq.order = append(epcq.order, o...)
	return epcq
}

// QueryConnectionConfig chains the current query on the "connection_config" edge.
func (epcq *EmailPasswordConnectionQuery) QueryConnectionConfig() *ConnectionConfigQuery {
	query := (&ConnectionConfigClient{config: epcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := epcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := epcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(emailpasswordconnection.Table, emailpasswordconnection.FieldID, selector),
			sqlgraph.To(connectionconfig.Table, connectionconfig.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, emailpasswordconnection.ConnectionConfigTable, emailpasswordconnection.ConnectionConfigColumn),
		)
		fromU = sqlgraph.SetNeighbors(epcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUsers chains the current query on the "users" edge.
func (epcq *EmailPasswordConnectionQuery) QueryUsers() *UserQuery {
	query := (&UserClient{config: epcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := epcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := epcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(emailpasswordconnection.Table, emailpasswordconnection.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, emailpasswordconnection.UsersTable, emailpasswordconnection.UsersColumn),
		)
		fromU = sqlgraph.SetNeighbors(epcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first EmailPasswordConnection entity from the query.
// Returns a *NotFoundError when no EmailPasswordConnection was found.
func (epcq *EmailPasswordConnectionQuery) First(ctx context.Context) (*EmailPasswordConnection, error) {
	nodes, err := epcq.Limit(1).All(setContextOp(ctx, epcq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{emailpasswordconnection.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (epcq *EmailPasswordConnectionQuery) FirstX(ctx context.Context) *EmailPasswordConnection {
	node, err := epcq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EmailPasswordConnection ID from the query.
// Returns a *NotFoundError when no EmailPasswordConnection ID was found.
func (epcq *EmailPasswordConnectionQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = epcq.Limit(1).IDs(setContextOp(ctx, epcq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{emailpasswordconnection.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (epcq *EmailPasswordConnectionQuery) FirstIDX(ctx context.Context) string {
	id, err := epcq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EmailPasswordConnection entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one EmailPasswordConnection entity is found.
// Returns a *NotFoundError when no EmailPasswordConnection entities are found.
func (epcq *EmailPasswordConnectionQuery) Only(ctx context.Context) (*EmailPasswordConnection, error) {
	nodes, err := epcq.Limit(2).All(setContextOp(ctx, epcq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{emailpasswordconnection.Label}
	default:
		return nil, &NotSingularError{emailpasswordconnection.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (epcq *EmailPasswordConnectionQuery) OnlyX(ctx context.Context) *EmailPasswordConnection {
	node, err := epcq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EmailPasswordConnection ID in the query.
// Returns a *NotSingularError when more than one EmailPasswordConnection ID is found.
// Returns a *NotFoundError when no entities are found.
func (epcq *EmailPasswordConnectionQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = epcq.Limit(2).IDs(setContextOp(ctx, epcq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{emailpasswordconnection.Label}
	default:
		err = &NotSingularError{emailpasswordconnection.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (epcq *EmailPasswordConnectionQuery) OnlyIDX(ctx context.Context) string {
	id, err := epcq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EmailPasswordConnections.
func (epcq *EmailPasswordConnectionQuery) All(ctx context.Context) ([]*EmailPasswordConnection, error) {
	ctx = setContextOp(ctx, epcq.ctx, "All")
	if err := epcq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*EmailPasswordConnection, *EmailPasswordConnectionQuery]()
	return withInterceptors[[]*EmailPasswordConnection](ctx, epcq, qr, epcq.inters)
}

// AllX is like All, but panics if an error occurs.
func (epcq *EmailPasswordConnectionQuery) AllX(ctx context.Context) []*EmailPasswordConnection {
	nodes, err := epcq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EmailPasswordConnection IDs.
func (epcq *EmailPasswordConnectionQuery) IDs(ctx context.Context) (ids []string, err error) {
	if epcq.ctx.Unique == nil && epcq.path != nil {
		epcq.Unique(true)
	}
	ctx = setContextOp(ctx, epcq.ctx, "IDs")
	if err = epcq.Select(emailpasswordconnection.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (epcq *EmailPasswordConnectionQuery) IDsX(ctx context.Context) []string {
	ids, err := epcq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (epcq *EmailPasswordConnectionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, epcq.ctx, "Count")
	if err := epcq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, epcq, querierCount[*EmailPasswordConnectionQuery](), epcq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (epcq *EmailPasswordConnectionQuery) CountX(ctx context.Context) int {
	count, err := epcq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (epcq *EmailPasswordConnectionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, epcq.ctx, "Exist")
	switch _, err := epcq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (epcq *EmailPasswordConnectionQuery) ExistX(ctx context.Context) bool {
	exist, err := epcq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EmailPasswordConnectionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (epcq *EmailPasswordConnectionQuery) Clone() *EmailPasswordConnectionQuery {
	if epcq == nil {
		return nil
	}
	return &EmailPasswordConnectionQuery{
		config:               epcq.config,
		ctx:                  epcq.ctx.Clone(),
		order:                append([]emailpasswordconnection.OrderOption{}, epcq.order...),
		inters:               append([]Interceptor{}, epcq.inters...),
		predicates:           append([]predicate.EmailPasswordConnection{}, epcq.predicates...),
		withConnectionConfig: epcq.withConnectionConfig.Clone(),
		withUsers:            epcq.withUsers.Clone(),
		// clone intermediate query.
		sql:  epcq.sql.Clone(),
		path: epcq.path,
	}
}

// WithConnectionConfig tells the query-builder to eager-load the nodes that are connected to
// the "connection_config" edge. The optional arguments are used to configure the query builder of the edge.
func (epcq *EmailPasswordConnectionQuery) WithConnectionConfig(opts ...func(*ConnectionConfigQuery)) *EmailPasswordConnectionQuery {
	query := (&ConnectionConfigClient{config: epcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	epcq.withConnectionConfig = query
	return epcq
}

// WithUsers tells the query-builder to eager-load the nodes that are connected to
// the "users" edge. The optional arguments are used to configure the query builder of the edge.
func (epcq *EmailPasswordConnectionQuery) WithUsers(opts ...func(*UserQuery)) *EmailPasswordConnectionQuery {
	query := (&UserClient{config: epcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	epcq.withUsers = query
	return epcq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Enabled bool `json:"enabled" hcl:"enabled"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EmailPasswordConnection.Query().
//		GroupBy(emailpasswordconnection.FieldEnabled).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (epcq *EmailPasswordConnectionQuery) GroupBy(field string, fields ...string) *EmailPasswordConnectionGroupBy {
	epcq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &EmailPasswordConnectionGroupBy{build: epcq}
	grbuild.flds = &epcq.ctx.Fields
	grbuild.label = emailpasswordconnection.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Enabled bool `json:"enabled" hcl:"enabled"`
//	}
//
//	client.EmailPasswordConnection.Query().
//		Select(emailpasswordconnection.FieldEnabled).
//		Scan(ctx, &v)
func (epcq *EmailPasswordConnectionQuery) Select(fields ...string) *EmailPasswordConnectionSelect {
	epcq.ctx.Fields = append(epcq.ctx.Fields, fields...)
	sbuild := &EmailPasswordConnectionSelect{EmailPasswordConnectionQuery: epcq}
	sbuild.label = emailpasswordconnection.Label
	sbuild.flds, sbuild.scan = &epcq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a EmailPasswordConnectionSelect configured with the given aggregations.
func (epcq *EmailPasswordConnectionQuery) Aggregate(fns ...AggregateFunc) *EmailPasswordConnectionSelect {
	return epcq.Select().Aggregate(fns...)
}

func (epcq *EmailPasswordConnectionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range epcq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, epcq); err != nil {
				return err
			}
		}
	}
	for _, f := range epcq.ctx.Fields {
		if !emailpasswordconnection.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if epcq.path != nil {
		prev, err := epcq.path(ctx)
		if err != nil {
			return err
		}
		epcq.sql = prev
	}
	return nil
}

func (epcq *EmailPasswordConnectionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*EmailPasswordConnection, error) {
	var (
		nodes       = []*EmailPasswordConnection{}
		withFKs     = epcq.withFKs
		_spec       = epcq.querySpec()
		loadedTypes = [2]bool{
			epcq.withConnectionConfig != nil,
			epcq.withUsers != nil,
		}
	)
	if epcq.withConnectionConfig != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, emailpasswordconnection.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*EmailPasswordConnection).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &EmailPasswordConnection{config: epcq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, epcq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := epcq.withConnectionConfig; query != nil {
		if err := epcq.loadConnectionConfig(ctx, query, nodes, nil,
			func(n *EmailPasswordConnection, e *ConnectionConfig) { n.Edges.ConnectionConfig = e }); err != nil {
			return nil, err
		}
	}
	if query := epcq.withUsers; query != nil {
		if err := epcq.loadUsers(ctx, query, nodes, nil,
			func(n *EmailPasswordConnection, e *User) { n.Edges.Users = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (epcq *EmailPasswordConnectionQuery) loadConnectionConfig(ctx context.Context, query *ConnectionConfigQuery, nodes []*EmailPasswordConnection, init func(*EmailPasswordConnection), assign func(*EmailPasswordConnection, *ConnectionConfig)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*EmailPasswordConnection)
	for i := range nodes {
		if nodes[i].connection_config_email_password_connection == nil {
			continue
		}
		fk := *nodes[i].connection_config_email_password_connection
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(connectionconfig.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "connection_config_email_password_connection" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (epcq *EmailPasswordConnectionQuery) loadUsers(ctx context.Context, query *UserQuery, nodes []*EmailPasswordConnection, init func(*EmailPasswordConnection), assign func(*EmailPasswordConnection, *User)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*EmailPasswordConnection)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.User(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(emailpasswordconnection.UsersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.email_password_connection_users
		if fk == nil {
			return fmt.Errorf(`foreign-key "email_password_connection_users" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "email_password_connection_users" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (epcq *EmailPasswordConnectionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := epcq.querySpec()
	_spec.Node.Columns = epcq.ctx.Fields
	if len(epcq.ctx.Fields) > 0 {
		_spec.Unique = epcq.ctx.Unique != nil && *epcq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, epcq.driver, _spec)
}

func (epcq *EmailPasswordConnectionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(emailpasswordconnection.Table, emailpasswordconnection.Columns, sqlgraph.NewFieldSpec(emailpasswordconnection.FieldID, field.TypeString))
	_spec.From = epcq.sql
	if unique := epcq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if epcq.path != nil {
		_spec.Unique = true
	}
	if fields := epcq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, emailpasswordconnection.FieldID)
		for i := range fields {
			if fields[i] != emailpasswordconnection.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := epcq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := epcq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := epcq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := epcq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (epcq *EmailPasswordConnectionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(epcq.driver.Dialect())
	t1 := builder.Table(emailpasswordconnection.Table)
	columns := epcq.ctx.Fields
	if len(columns) == 0 {
		columns = emailpasswordconnection.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if epcq.sql != nil {
		selector = epcq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if epcq.ctx.Unique != nil && *epcq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range epcq.predicates {
		p(selector)
	}
	for _, p := range epcq.order {
		p(selector)
	}
	if offset := epcq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := epcq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EmailPasswordConnectionGroupBy is the group-by builder for EmailPasswordConnection entities.
type EmailPasswordConnectionGroupBy struct {
	selector
	build *EmailPasswordConnectionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (epcgb *EmailPasswordConnectionGroupBy) Aggregate(fns ...AggregateFunc) *EmailPasswordConnectionGroupBy {
	epcgb.fns = append(epcgb.fns, fns...)
	return epcgb
}

// Scan applies the selector query and scans the result into the given value.
func (epcgb *EmailPasswordConnectionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, epcgb.build.ctx, "GroupBy")
	if err := epcgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EmailPasswordConnectionQuery, *EmailPasswordConnectionGroupBy](ctx, epcgb.build, epcgb, epcgb.build.inters, v)
}

func (epcgb *EmailPasswordConnectionGroupBy) sqlScan(ctx context.Context, root *EmailPasswordConnectionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(epcgb.fns))
	for _, fn := range epcgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*epcgb.flds)+len(epcgb.fns))
		for _, f := range *epcgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*epcgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := epcgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// EmailPasswordConnectionSelect is the builder for selecting fields of EmailPasswordConnection entities.
type EmailPasswordConnectionSelect struct {
	*EmailPasswordConnectionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (epcs *EmailPasswordConnectionSelect) Aggregate(fns ...AggregateFunc) *EmailPasswordConnectionSelect {
	epcs.fns = append(epcs.fns, fns...)
	return epcs
}

// Scan applies the selector query and scans the result into the given value.
func (epcs *EmailPasswordConnectionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, epcs.ctx, "Select")
	if err := epcs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EmailPasswordConnectionQuery, *EmailPasswordConnectionSelect](ctx, epcs.EmailPasswordConnectionQuery, epcs, epcs.inters, v)
}

func (epcs *EmailPasswordConnectionSelect) sqlScan(ctx context.Context, root *EmailPasswordConnectionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(epcs.fns))
	for _, fn := range epcs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*epcs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := epcs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
