// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.authbricks.com/bricks/ent/predicate"
	"go.authbricks.com/bricks/ent/serviceintrospectionendpointconfig"
)

// ServiceIntrospectionEndpointConfigDelete is the builder for deleting a ServiceIntrospectionEndpointConfig entity.
type ServiceIntrospectionEndpointConfigDelete struct {
	config
	hooks    []Hook
	mutation *ServiceIntrospectionEndpointConfigMutation
}

// Where appends a list predicates to the ServiceIntrospectionEndpointConfigDelete builder.
func (siecd *ServiceIntrospectionEndpointConfigDelete) Where(ps ...predicate.ServiceIntrospectionEndpointConfig) *ServiceIntrospectionEndpointConfigDelete {
	siecd.mutation.Where(ps...)
	return siecd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (siecd *ServiceIntrospectionEndpointConfigDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, siecd.sqlExec, siecd.mutation, siecd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (siecd *ServiceIntrospectionEndpointConfigDelete) ExecX(ctx context.Context) int {
	n, err := siecd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (siecd *ServiceIntrospectionEndpointConfigDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(serviceintrospectionendpointconfig.Table, sqlgraph.NewFieldSpec(serviceintrospectionendpointconfig.FieldID, field.TypeString))
	if ps := siecd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, siecd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	siecd.mutation.done = true
	return affected, err
}

// ServiceIntrospectionEndpointConfigDeleteOne is the builder for deleting a single ServiceIntrospectionEndpointConfig entity.
type ServiceIntrospectionEndpointConfigDeleteOne struct {
	siecd *ServiceIntrospectionEndpointConfigDelete
}

// Where appends a list predicates to the ServiceIntrospectionEndpointConfigDelete builder.
func (siecdo *ServiceIntrospectionEndpointConfigDeleteOne) Where(ps ...predicate.ServiceIntrospectionEndpointConfig) *ServiceIntrospectionEndpointConfigDeleteOne {
	siecdo.siecd.mutation.Where(ps...)
	return siecdo
}

// Exec executes the deletion query.
func (siecdo *ServiceIntrospectionEndpointConfigDeleteOne) Exec(ctx context.Context) error {
	n, err := siecdo.siecd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{serviceintrospectionendpointconfig.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (siecdo *ServiceIntrospectionEndpointConfigDeleteOne) ExecX(ctx context.Context) {
	if err := siecdo.Exec(ctx); err != nil {
		panic(err)
	}
}
