// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.authbricks.com/bricks/ent/predicate"
	"go.authbricks.com/bricks/ent/serviceuserinfoendpointconfig"
)

// ServiceUserInfoEndpointConfigDelete is the builder for deleting a ServiceUserInfoEndpointConfig entity.
type ServiceUserInfoEndpointConfigDelete struct {
	config
	hooks    []Hook
	mutation *ServiceUserInfoEndpointConfigMutation
}

// Where appends a list predicates to the ServiceUserInfoEndpointConfigDelete builder.
func (suiecd *ServiceUserInfoEndpointConfigDelete) Where(ps ...predicate.ServiceUserInfoEndpointConfig) *ServiceUserInfoEndpointConfigDelete {
	suiecd.mutation.Where(ps...)
	return suiecd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (suiecd *ServiceUserInfoEndpointConfigDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, suiecd.sqlExec, suiecd.mutation, suiecd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (suiecd *ServiceUserInfoEndpointConfigDelete) ExecX(ctx context.Context) int {
	n, err := suiecd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (suiecd *ServiceUserInfoEndpointConfigDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(serviceuserinfoendpointconfig.Table, sqlgraph.NewFieldSpec(serviceuserinfoendpointconfig.FieldID, field.TypeString))
	if ps := suiecd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, suiecd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	suiecd.mutation.done = true
	return affected, err
}

// ServiceUserInfoEndpointConfigDeleteOne is the builder for deleting a single ServiceUserInfoEndpointConfig entity.
type ServiceUserInfoEndpointConfigDeleteOne struct {
	suiecd *ServiceUserInfoEndpointConfigDelete
}

// Where appends a list predicates to the ServiceUserInfoEndpointConfigDelete builder.
func (suiecdo *ServiceUserInfoEndpointConfigDeleteOne) Where(ps ...predicate.ServiceUserInfoEndpointConfig) *ServiceUserInfoEndpointConfigDeleteOne {
	suiecdo.suiecd.mutation.Where(ps...)
	return suiecdo
}

// Exec executes the deletion query.
func (suiecdo *ServiceUserInfoEndpointConfigDeleteOne) Exec(ctx context.Context) error {
	n, err := suiecdo.suiecd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{serviceuserinfoendpointconfig.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (suiecdo *ServiceUserInfoEndpointConfigDeleteOne) ExecX(ctx context.Context) {
	if err := suiecdo.Exec(ctx); err != nil {
		panic(err)
	}
}
