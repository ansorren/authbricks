// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.authbricks.com/bricks/ent/predicate"
	"go.authbricks.com/bricks/ent/user"
	"go.authbricks.com/bricks/ent/userpool"
)

// UserPoolUpdate is the builder for updating UserPool entities.
type UserPoolUpdate struct {
	config
	hooks    []Hook
	mutation *UserPoolMutation
}

// Where appends a list predicates to the UserPoolUpdate builder.
func (upu *UserPoolUpdate) Where(ps ...predicate.UserPool) *UserPoolUpdate {
	upu.mutation.Where(ps...)
	return upu
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (upu *UserPoolUpdate) AddUserIDs(ids ...string) *UserPoolUpdate {
	upu.mutation.AddUserIDs(ids...)
	return upu
}

// AddUsers adds the "users" edges to the User entity.
func (upu *UserPoolUpdate) AddUsers(u ...*User) *UserPoolUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return upu.AddUserIDs(ids...)
}

// Mutation returns the UserPoolMutation object of the builder.
func (upu *UserPoolUpdate) Mutation() *UserPoolMutation {
	return upu.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (upu *UserPoolUpdate) ClearUsers() *UserPoolUpdate {
	upu.mutation.ClearUsers()
	return upu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (upu *UserPoolUpdate) RemoveUserIDs(ids ...string) *UserPoolUpdate {
	upu.mutation.RemoveUserIDs(ids...)
	return upu
}

// RemoveUsers removes "users" edges to User entities.
func (upu *UserPoolUpdate) RemoveUsers(u ...*User) *UserPoolUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return upu.RemoveUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (upu *UserPoolUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, upu.sqlSave, upu.mutation, upu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upu *UserPoolUpdate) SaveX(ctx context.Context) int {
	affected, err := upu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (upu *UserPoolUpdate) Exec(ctx context.Context) error {
	_, err := upu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upu *UserPoolUpdate) ExecX(ctx context.Context) {
	if err := upu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (upu *UserPoolUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(userpool.Table, userpool.Columns, sqlgraph.NewFieldSpec(userpool.FieldID, field.TypeString))
	if ps := upu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if upu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userpool.UsersTable,
			Columns: []string{userpool.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !upu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userpool.UsersTable,
			Columns: []string{userpool.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userpool.UsersTable,
			Columns: []string{userpool.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, upu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userpool.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	upu.mutation.done = true
	return n, nil
}

// UserPoolUpdateOne is the builder for updating a single UserPool entity.
type UserPoolUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserPoolMutation
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (upuo *UserPoolUpdateOne) AddUserIDs(ids ...string) *UserPoolUpdateOne {
	upuo.mutation.AddUserIDs(ids...)
	return upuo
}

// AddUsers adds the "users" edges to the User entity.
func (upuo *UserPoolUpdateOne) AddUsers(u ...*User) *UserPoolUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return upuo.AddUserIDs(ids...)
}

// Mutation returns the UserPoolMutation object of the builder.
func (upuo *UserPoolUpdateOne) Mutation() *UserPoolMutation {
	return upuo.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (upuo *UserPoolUpdateOne) ClearUsers() *UserPoolUpdateOne {
	upuo.mutation.ClearUsers()
	return upuo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (upuo *UserPoolUpdateOne) RemoveUserIDs(ids ...string) *UserPoolUpdateOne {
	upuo.mutation.RemoveUserIDs(ids...)
	return upuo
}

// RemoveUsers removes "users" edges to User entities.
func (upuo *UserPoolUpdateOne) RemoveUsers(u ...*User) *UserPoolUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return upuo.RemoveUserIDs(ids...)
}

// Where appends a list predicates to the UserPoolUpdate builder.
func (upuo *UserPoolUpdateOne) Where(ps ...predicate.UserPool) *UserPoolUpdateOne {
	upuo.mutation.Where(ps...)
	return upuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (upuo *UserPoolUpdateOne) Select(field string, fields ...string) *UserPoolUpdateOne {
	upuo.fields = append([]string{field}, fields...)
	return upuo
}

// Save executes the query and returns the updated UserPool entity.
func (upuo *UserPoolUpdateOne) Save(ctx context.Context) (*UserPool, error) {
	return withHooks(ctx, upuo.sqlSave, upuo.mutation, upuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upuo *UserPoolUpdateOne) SaveX(ctx context.Context) *UserPool {
	node, err := upuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (upuo *UserPoolUpdateOne) Exec(ctx context.Context) error {
	_, err := upuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upuo *UserPoolUpdateOne) ExecX(ctx context.Context) {
	if err := upuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (upuo *UserPoolUpdateOne) sqlSave(ctx context.Context) (_node *UserPool, err error) {
	_spec := sqlgraph.NewUpdateSpec(userpool.Table, userpool.Columns, sqlgraph.NewFieldSpec(userpool.FieldID, field.TypeString))
	id, ok := upuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserPool.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := upuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userpool.FieldID)
		for _, f := range fields {
			if !userpool.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userpool.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := upuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if upuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userpool.UsersTable,
			Columns: []string{userpool.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upuo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !upuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userpool.UsersTable,
			Columns: []string{userpool.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userpool.UsersTable,
			Columns: []string{userpool.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserPool{config: upuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, upuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userpool.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	upuo.mutation.done = true
	return _node, nil
}
