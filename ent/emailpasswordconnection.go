// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"go.authbricks.com/bricks/ent/connectionconfig"
	"go.authbricks.com/bricks/ent/emailpasswordconnection"
	"go.authbricks.com/bricks/ent/user"
)

// EmailPasswordConnection is the model entity for the EmailPasswordConnection schema.
type EmailPasswordConnection struct {
	config `hcl:"-" json:"-"`
	// ID of the ent.
	ID string `json:"id" hcl:"id"`
	// Enabled holds the value of the "enabled" field.
	Enabled bool `json:"enabled" hcl:"enabled"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EmailPasswordConnectionQuery when eager-loading is set.
	Edges                                       EmailPasswordConnectionEdges `json:"edges"`
	connection_config_email_password_connection *string
	selectValues                                sql.SelectValues
}

// EmailPasswordConnectionEdges holds the relations/edges for other nodes in the graph.
type EmailPasswordConnectionEdges struct {
	// ConnectionConfig holds the value of the connection_config edge.
	ConnectionConfig *ConnectionConfig `json:"connection_config,omitempty"`
	// Users holds the value of the users edge.
	Users *User `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ConnectionConfigOrErr returns the ConnectionConfig value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmailPasswordConnectionEdges) ConnectionConfigOrErr() (*ConnectionConfig, error) {
	if e.ConnectionConfig != nil {
		return e.ConnectionConfig, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: connectionconfig.Label}
	}
	return nil, &NotLoadedError{edge: "connection_config"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmailPasswordConnectionEdges) UsersOrErr() (*User, error) {
	if e.Users != nil {
		return e.Users, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EmailPasswordConnection) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case emailpasswordconnection.FieldEnabled:
			values[i] = new(sql.NullBool)
		case emailpasswordconnection.FieldID:
			values[i] = new(sql.NullString)
		case emailpasswordconnection.ForeignKeys[0]: // connection_config_email_password_connection
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EmailPasswordConnection fields.
func (epc *EmailPasswordConnection) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case emailpasswordconnection.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				epc.ID = value.String
			}
		case emailpasswordconnection.FieldEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enabled", values[i])
			} else if value.Valid {
				epc.Enabled = value.Bool
			}
		case emailpasswordconnection.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field connection_config_email_password_connection", values[i])
			} else if value.Valid {
				epc.connection_config_email_password_connection = new(string)
				*epc.connection_config_email_password_connection = value.String
			}
		default:
			epc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EmailPasswordConnection.
// This includes values selected through modifiers, order, etc.
func (epc *EmailPasswordConnection) Value(name string) (ent.Value, error) {
	return epc.selectValues.Get(name)
}

// QueryConnectionConfig queries the "connection_config" edge of the EmailPasswordConnection entity.
func (epc *EmailPasswordConnection) QueryConnectionConfig() *ConnectionConfigQuery {
	return NewEmailPasswordConnectionClient(epc.config).QueryConnectionConfig(epc)
}

// QueryUsers queries the "users" edge of the EmailPasswordConnection entity.
func (epc *EmailPasswordConnection) QueryUsers() *UserQuery {
	return NewEmailPasswordConnectionClient(epc.config).QueryUsers(epc)
}

// Update returns a builder for updating this EmailPasswordConnection.
// Note that you need to call EmailPasswordConnection.Unwrap() before calling this method if this EmailPasswordConnection
// was returned from a transaction, and the transaction was committed or rolled back.
func (epc *EmailPasswordConnection) Update() *EmailPasswordConnectionUpdateOne {
	return NewEmailPasswordConnectionClient(epc.config).UpdateOne(epc)
}

// Unwrap unwraps the EmailPasswordConnection entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (epc *EmailPasswordConnection) Unwrap() *EmailPasswordConnection {
	_tx, ok := epc.config.driver.(*txDriver)
	if !ok {
		panic("ent: EmailPasswordConnection is not a transactional entity")
	}
	epc.config.driver = _tx.drv
	return epc
}

// String implements the fmt.Stringer.
func (epc *EmailPasswordConnection) String() string {
	var builder strings.Builder
	builder.WriteString("EmailPasswordConnection(")
	builder.WriteString(fmt.Sprintf("id=%v, ", epc.ID))
	builder.WriteString("enabled=")
	builder.WriteString(fmt.Sprintf("%v", epc.Enabled))
	builder.WriteByte(')')
	return builder.String()
}

// EmailPasswordConnections is a parsable slice of EmailPasswordConnection.
type EmailPasswordConnections []*EmailPasswordConnection
