// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.authbricks.com/bricks/ent/connectionconfig"
	"go.authbricks.com/bricks/ent/oidcconnection"
	"go.authbricks.com/bricks/ent/user"
)

// OIDCConnectionCreate is the builder for creating a OIDCConnection entity.
type OIDCConnectionCreate struct {
	config
	mutation *OIDCConnectionMutation
	hooks    []Hook
}

// SetEnabled sets the "enabled" field.
func (occ *OIDCConnectionCreate) SetEnabled(b bool) *OIDCConnectionCreate {
	occ.mutation.SetEnabled(b)
	return occ
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (occ *OIDCConnectionCreate) SetNillableEnabled(b *bool) *OIDCConnectionCreate {
	if b != nil {
		occ.SetEnabled(*b)
	}
	return occ
}

// SetClientID sets the "client_id" field.
func (occ *OIDCConnectionCreate) SetClientID(s string) *OIDCConnectionCreate {
	occ.mutation.SetClientID(s)
	return occ
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (occ *OIDCConnectionCreate) SetNillableClientID(s *string) *OIDCConnectionCreate {
	if s != nil {
		occ.SetClientID(*s)
	}
	return occ
}

// SetClientSecret sets the "client_secret" field.
func (occ *OIDCConnectionCreate) SetClientSecret(s string) *OIDCConnectionCreate {
	occ.mutation.SetClientSecret(s)
	return occ
}

// SetNillableClientSecret sets the "client_secret" field if the given value is not nil.
func (occ *OIDCConnectionCreate) SetNillableClientSecret(s *string) *OIDCConnectionCreate {
	if s != nil {
		occ.SetClientSecret(*s)
	}
	return occ
}

// SetScopes sets the "scopes" field.
func (occ *OIDCConnectionCreate) SetScopes(s []string) *OIDCConnectionCreate {
	occ.mutation.SetScopes(s)
	return occ
}

// SetRedirectURI sets the "redirect_uri" field.
func (occ *OIDCConnectionCreate) SetRedirectURI(s string) *OIDCConnectionCreate {
	occ.mutation.SetRedirectURI(s)
	return occ
}

// SetNillableRedirectURI sets the "redirect_uri" field if the given value is not nil.
func (occ *OIDCConnectionCreate) SetNillableRedirectURI(s *string) *OIDCConnectionCreate {
	if s != nil {
		occ.SetRedirectURI(*s)
	}
	return occ
}

// SetWellKnownOpenidConfiguration sets the "well_known_openid_configuration" field.
func (occ *OIDCConnectionCreate) SetWellKnownOpenidConfiguration(s string) *OIDCConnectionCreate {
	occ.mutation.SetWellKnownOpenidConfiguration(s)
	return occ
}

// SetNillableWellKnownOpenidConfiguration sets the "well_known_openid_configuration" field if the given value is not nil.
func (occ *OIDCConnectionCreate) SetNillableWellKnownOpenidConfiguration(s *string) *OIDCConnectionCreate {
	if s != nil {
		occ.SetWellKnownOpenidConfiguration(*s)
	}
	return occ
}

// SetID sets the "id" field.
func (occ *OIDCConnectionCreate) SetID(s string) *OIDCConnectionCreate {
	occ.mutation.SetID(s)
	return occ
}

// SetConnectionConfigID sets the "connection_config" edge to the ConnectionConfig entity by ID.
func (occ *OIDCConnectionCreate) SetConnectionConfigID(id string) *OIDCConnectionCreate {
	occ.mutation.SetConnectionConfigID(id)
	return occ
}

// SetNillableConnectionConfigID sets the "connection_config" edge to the ConnectionConfig entity by ID if the given value is not nil.
func (occ *OIDCConnectionCreate) SetNillableConnectionConfigID(id *string) *OIDCConnectionCreate {
	if id != nil {
		occ = occ.SetConnectionConfigID(*id)
	}
	return occ
}

// SetConnectionConfig sets the "connection_config" edge to the ConnectionConfig entity.
func (occ *OIDCConnectionCreate) SetConnectionConfig(c *ConnectionConfig) *OIDCConnectionCreate {
	return occ.SetConnectionConfigID(c.ID)
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (occ *OIDCConnectionCreate) SetUsersID(id string) *OIDCConnectionCreate {
	occ.mutation.SetUsersID(id)
	return occ
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (occ *OIDCConnectionCreate) SetNillableUsersID(id *string) *OIDCConnectionCreate {
	if id != nil {
		occ = occ.SetUsersID(*id)
	}
	return occ
}

// SetUsers sets the "users" edge to the User entity.
func (occ *OIDCConnectionCreate) SetUsers(u *User) *OIDCConnectionCreate {
	return occ.SetUsersID(u.ID)
}

// Mutation returns the OIDCConnectionMutation object of the builder.
func (occ *OIDCConnectionCreate) Mutation() *OIDCConnectionMutation {
	return occ.mutation
}

// Save creates the OIDCConnection in the database.
func (occ *OIDCConnectionCreate) Save(ctx context.Context) (*OIDCConnection, error) {
	occ.defaults()
	return withHooks(ctx, occ.sqlSave, occ.mutation, occ.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (occ *OIDCConnectionCreate) SaveX(ctx context.Context) *OIDCConnection {
	v, err := occ.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (occ *OIDCConnectionCreate) Exec(ctx context.Context) error {
	_, err := occ.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (occ *OIDCConnectionCreate) ExecX(ctx context.Context) {
	if err := occ.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (occ *OIDCConnectionCreate) defaults() {
	if _, ok := occ.mutation.Enabled(); !ok {
		v := oidcconnection.DefaultEnabled
		occ.mutation.SetEnabled(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (occ *OIDCConnectionCreate) check() error {
	if _, ok := occ.mutation.Enabled(); !ok {
		return &ValidationError{Name: "enabled", err: errors.New(`ent: missing required field "OIDCConnection.enabled"`)}
	}
	if v, ok := occ.mutation.ID(); ok {
		if err := oidcconnection.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "OIDCConnection.id": %w`, err)}
		}
	}
	return nil
}

func (occ *OIDCConnectionCreate) sqlSave(ctx context.Context) (*OIDCConnection, error) {
	if err := occ.check(); err != nil {
		return nil, err
	}
	_node, _spec := occ.createSpec()
	if err := sqlgraph.CreateNode(ctx, occ.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected OIDCConnection.ID type: %T", _spec.ID.Value)
		}
	}
	occ.mutation.id = &_node.ID
	occ.mutation.done = true
	return _node, nil
}

func (occ *OIDCConnectionCreate) createSpec() (*OIDCConnection, *sqlgraph.CreateSpec) {
	var (
		_node = &OIDCConnection{config: occ.config}
		_spec = sqlgraph.NewCreateSpec(oidcconnection.Table, sqlgraph.NewFieldSpec(oidcconnection.FieldID, field.TypeString))
	)
	if id, ok := occ.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := occ.mutation.Enabled(); ok {
		_spec.SetField(oidcconnection.FieldEnabled, field.TypeBool, value)
		_node.Enabled = value
	}
	if value, ok := occ.mutation.ClientID(); ok {
		_spec.SetField(oidcconnection.FieldClientID, field.TypeString, value)
		_node.ClientID = value
	}
	if value, ok := occ.mutation.ClientSecret(); ok {
		_spec.SetField(oidcconnection.FieldClientSecret, field.TypeString, value)
		_node.ClientSecret = value
	}
	if value, ok := occ.mutation.Scopes(); ok {
		_spec.SetField(oidcconnection.FieldScopes, field.TypeJSON, value)
		_node.Scopes = value
	}
	if value, ok := occ.mutation.RedirectURI(); ok {
		_spec.SetField(oidcconnection.FieldRedirectURI, field.TypeString, value)
		_node.RedirectURI = value
	}
	if value, ok := occ.mutation.WellKnownOpenidConfiguration(); ok {
		_spec.SetField(oidcconnection.FieldWellKnownOpenidConfiguration, field.TypeString, value)
		_node.WellKnownOpenidConfiguration = value
	}
	if nodes := occ.mutation.ConnectionConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oidcconnection.ConnectionConfigTable,
			Columns: []string{oidcconnection.ConnectionConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectionconfig.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.connection_config_oidc_connections = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := occ.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oidcconnection.UsersTable,
			Columns: []string{oidcconnection.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OIDCConnectionCreateBulk is the builder for creating many OIDCConnection entities in bulk.
type OIDCConnectionCreateBulk struct {
	config
	err      error
	builders []*OIDCConnectionCreate
}

// Save creates the OIDCConnection entities in the database.
func (occb *OIDCConnectionCreateBulk) Save(ctx context.Context) ([]*OIDCConnection, error) {
	if occb.err != nil {
		return nil, occb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(occb.builders))
	nodes := make([]*OIDCConnection, len(occb.builders))
	mutators := make([]Mutator, len(occb.builders))
	for i := range occb.builders {
		func(i int, root context.Context) {
			builder := occb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OIDCConnectionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, occb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, occb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, occb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (occb *OIDCConnectionCreateBulk) SaveX(ctx context.Context) []*OIDCConnection {
	v, err := occb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (occb *OIDCConnectionCreateBulk) Exec(ctx context.Context) error {
	_, err := occb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (occb *OIDCConnectionCreateBulk) ExecX(ctx context.Context) {
	if err := occb.Exec(ctx); err != nil {
		panic(err)
	}
}
