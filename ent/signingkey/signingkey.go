// Code generated by ent, DO NOT EDIT.

package signingkey

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the signingkey type in the database.
	Label = "signing_key"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldKey holds the string denoting the key field in the database.
	FieldKey = "key"
	// EdgeKeySet holds the string denoting the key_set edge name in mutations.
	EdgeKeySet = "key_set"
	// Table holds the table name of the signingkey in the database.
	Table = "signing_keys"
	// KeySetTable is the table that holds the key_set relation/edge.
	KeySetTable = "signing_keys"
	// KeySetInverseTable is the table name for the KeySet entity.
	// It exists in this package in order to avoid circular dependency with the "keyset" package.
	KeySetInverseTable = "key_sets"
	// KeySetColumn is the table column denoting the key_set relation/edge.
	KeySetColumn = "key_set_signing_keys"
)

// Columns holds all SQL columns for signingkey fields.
var Columns = []string{
	FieldID,
	FieldKey,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "signing_keys"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"key_set_signing_keys",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// KeyValidator is a validator for the "key" field. It is called by the builders before save.
	KeyValidator func(string) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the SigningKey queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByKey orders the results by the key field.
func ByKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKey, opts...).ToFunc()
}

// ByKeySetField orders the results by key_set field.
func ByKeySetField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newKeySetStep(), sql.OrderByField(field, opts...))
	}
}
func newKeySetStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(KeySetInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, KeySetTable, KeySetColumn),
	)
}
