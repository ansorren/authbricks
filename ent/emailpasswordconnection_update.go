// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.authbricks.com/bricks/ent/connectionconfig"
	"go.authbricks.com/bricks/ent/emailpasswordconnection"
	"go.authbricks.com/bricks/ent/predicate"
	"go.authbricks.com/bricks/ent/user"
)

// EmailPasswordConnectionUpdate is the builder for updating EmailPasswordConnection entities.
type EmailPasswordConnectionUpdate struct {
	config
	hooks    []Hook
	mutation *EmailPasswordConnectionMutation
}

// Where appends a list predicates to the EmailPasswordConnectionUpdate builder.
func (epcu *EmailPasswordConnectionUpdate) Where(ps ...predicate.EmailPasswordConnection) *EmailPasswordConnectionUpdate {
	epcu.mutation.Where(ps...)
	return epcu
}

// SetEnabled sets the "enabled" field.
func (epcu *EmailPasswordConnectionUpdate) SetEnabled(b bool) *EmailPasswordConnectionUpdate {
	epcu.mutation.SetEnabled(b)
	return epcu
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (epcu *EmailPasswordConnectionUpdate) SetNillableEnabled(b *bool) *EmailPasswordConnectionUpdate {
	if b != nil {
		epcu.SetEnabled(*b)
	}
	return epcu
}

// SetConnectionConfigID sets the "connection_config" edge to the ConnectionConfig entity by ID.
func (epcu *EmailPasswordConnectionUpdate) SetConnectionConfigID(id string) *EmailPasswordConnectionUpdate {
	epcu.mutation.SetConnectionConfigID(id)
	return epcu
}

// SetConnectionConfig sets the "connection_config" edge to the ConnectionConfig entity.
func (epcu *EmailPasswordConnectionUpdate) SetConnectionConfig(c *ConnectionConfig) *EmailPasswordConnectionUpdate {
	return epcu.SetConnectionConfigID(c.ID)
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (epcu *EmailPasswordConnectionUpdate) SetUsersID(id string) *EmailPasswordConnectionUpdate {
	epcu.mutation.SetUsersID(id)
	return epcu
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (epcu *EmailPasswordConnectionUpdate) SetNillableUsersID(id *string) *EmailPasswordConnectionUpdate {
	if id != nil {
		epcu = epcu.SetUsersID(*id)
	}
	return epcu
}

// SetUsers sets the "users" edge to the User entity.
func (epcu *EmailPasswordConnectionUpdate) SetUsers(u *User) *EmailPasswordConnectionUpdate {
	return epcu.SetUsersID(u.ID)
}

// Mutation returns the EmailPasswordConnectionMutation object of the builder.
func (epcu *EmailPasswordConnectionUpdate) Mutation() *EmailPasswordConnectionMutation {
	return epcu.mutation
}

// ClearConnectionConfig clears the "connection_config" edge to the ConnectionConfig entity.
func (epcu *EmailPasswordConnectionUpdate) ClearConnectionConfig() *EmailPasswordConnectionUpdate {
	epcu.mutation.ClearConnectionConfig()
	return epcu
}

// ClearUsers clears the "users" edge to the User entity.
func (epcu *EmailPasswordConnectionUpdate) ClearUsers() *EmailPasswordConnectionUpdate {
	epcu.mutation.ClearUsers()
	return epcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (epcu *EmailPasswordConnectionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, epcu.sqlSave, epcu.mutation, epcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (epcu *EmailPasswordConnectionUpdate) SaveX(ctx context.Context) int {
	affected, err := epcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (epcu *EmailPasswordConnectionUpdate) Exec(ctx context.Context) error {
	_, err := epcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epcu *EmailPasswordConnectionUpdate) ExecX(ctx context.Context) {
	if err := epcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (epcu *EmailPasswordConnectionUpdate) check() error {
	if _, ok := epcu.mutation.ConnectionConfigID(); epcu.mutation.ConnectionConfigCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EmailPasswordConnection.connection_config"`)
	}
	return nil
}

func (epcu *EmailPasswordConnectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := epcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(emailpasswordconnection.Table, emailpasswordconnection.Columns, sqlgraph.NewFieldSpec(emailpasswordconnection.FieldID, field.TypeString))
	if ps := epcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := epcu.mutation.Enabled(); ok {
		_spec.SetField(emailpasswordconnection.FieldEnabled, field.TypeBool, value)
	}
	if epcu.mutation.ConnectionConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   emailpasswordconnection.ConnectionConfigTable,
			Columns: []string{emailpasswordconnection.ConnectionConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectionconfig.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epcu.mutation.ConnectionConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   emailpasswordconnection.ConnectionConfigTable,
			Columns: []string{emailpasswordconnection.ConnectionConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectionconfig.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epcu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   emailpasswordconnection.UsersTable,
			Columns: []string{emailpasswordconnection.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epcu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   emailpasswordconnection.UsersTable,
			Columns: []string{emailpasswordconnection.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, epcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emailpasswordconnection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	epcu.mutation.done = true
	return n, nil
}

// EmailPasswordConnectionUpdateOne is the builder for updating a single EmailPasswordConnection entity.
type EmailPasswordConnectionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmailPasswordConnectionMutation
}

// SetEnabled sets the "enabled" field.
func (epcuo *EmailPasswordConnectionUpdateOne) SetEnabled(b bool) *EmailPasswordConnectionUpdateOne {
	epcuo.mutation.SetEnabled(b)
	return epcuo
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (epcuo *EmailPasswordConnectionUpdateOne) SetNillableEnabled(b *bool) *EmailPasswordConnectionUpdateOne {
	if b != nil {
		epcuo.SetEnabled(*b)
	}
	return epcuo
}

// SetConnectionConfigID sets the "connection_config" edge to the ConnectionConfig entity by ID.
func (epcuo *EmailPasswordConnectionUpdateOne) SetConnectionConfigID(id string) *EmailPasswordConnectionUpdateOne {
	epcuo.mutation.SetConnectionConfigID(id)
	return epcuo
}

// SetConnectionConfig sets the "connection_config" edge to the ConnectionConfig entity.
func (epcuo *EmailPasswordConnectionUpdateOne) SetConnectionConfig(c *ConnectionConfig) *EmailPasswordConnectionUpdateOne {
	return epcuo.SetConnectionConfigID(c.ID)
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (epcuo *EmailPasswordConnectionUpdateOne) SetUsersID(id string) *EmailPasswordConnectionUpdateOne {
	epcuo.mutation.SetUsersID(id)
	return epcuo
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (epcuo *EmailPasswordConnectionUpdateOne) SetNillableUsersID(id *string) *EmailPasswordConnectionUpdateOne {
	if id != nil {
		epcuo = epcuo.SetUsersID(*id)
	}
	return epcuo
}

// SetUsers sets the "users" edge to the User entity.
func (epcuo *EmailPasswordConnectionUpdateOne) SetUsers(u *User) *EmailPasswordConnectionUpdateOne {
	return epcuo.SetUsersID(u.ID)
}

// Mutation returns the EmailPasswordConnectionMutation object of the builder.
func (epcuo *EmailPasswordConnectionUpdateOne) Mutation() *EmailPasswordConnectionMutation {
	return epcuo.mutation
}

// ClearConnectionConfig clears the "connection_config" edge to the ConnectionConfig entity.
func (epcuo *EmailPasswordConnectionUpdateOne) ClearConnectionConfig() *EmailPasswordConnectionUpdateOne {
	epcuo.mutation.ClearConnectionConfig()
	return epcuo
}

// ClearUsers clears the "users" edge to the User entity.
func (epcuo *EmailPasswordConnectionUpdateOne) ClearUsers() *EmailPasswordConnectionUpdateOne {
	epcuo.mutation.ClearUsers()
	return epcuo
}

// Where appends a list predicates to the EmailPasswordConnectionUpdate builder.
func (epcuo *EmailPasswordConnectionUpdateOne) Where(ps ...predicate.EmailPasswordConnection) *EmailPasswordConnectionUpdateOne {
	epcuo.mutation.Where(ps...)
	return epcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (epcuo *EmailPasswordConnectionUpdateOne) Select(field string, fields ...string) *EmailPasswordConnectionUpdateOne {
	epcuo.fields = append([]string{field}, fields...)
	return epcuo
}

// Save executes the query and returns the updated EmailPasswordConnection entity.
func (epcuo *EmailPasswordConnectionUpdateOne) Save(ctx context.Context) (*EmailPasswordConnection, error) {
	return withHooks(ctx, epcuo.sqlSave, epcuo.mutation, epcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (epcuo *EmailPasswordConnectionUpdateOne) SaveX(ctx context.Context) *EmailPasswordConnection {
	node, err := epcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (epcuo *EmailPasswordConnectionUpdateOne) Exec(ctx context.Context) error {
	_, err := epcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epcuo *EmailPasswordConnectionUpdateOne) ExecX(ctx context.Context) {
	if err := epcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (epcuo *EmailPasswordConnectionUpdateOne) check() error {
	if _, ok := epcuo.mutation.ConnectionConfigID(); epcuo.mutation.ConnectionConfigCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EmailPasswordConnection.connection_config"`)
	}
	return nil
}

func (epcuo *EmailPasswordConnectionUpdateOne) sqlSave(ctx context.Context) (_node *EmailPasswordConnection, err error) {
	if err := epcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(emailpasswordconnection.Table, emailpasswordconnection.Columns, sqlgraph.NewFieldSpec(emailpasswordconnection.FieldID, field.TypeString))
	id, ok := epcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EmailPasswordConnection.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := epcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, emailpasswordconnection.FieldID)
		for _, f := range fields {
			if !emailpasswordconnection.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != emailpasswordconnection.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := epcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := epcuo.mutation.Enabled(); ok {
		_spec.SetField(emailpasswordconnection.FieldEnabled, field.TypeBool, value)
	}
	if epcuo.mutation.ConnectionConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   emailpasswordconnection.ConnectionConfigTable,
			Columns: []string{emailpasswordconnection.ConnectionConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectionconfig.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epcuo.mutation.ConnectionConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   emailpasswordconnection.ConnectionConfigTable,
			Columns: []string{emailpasswordconnection.ConnectionConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectionconfig.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epcuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   emailpasswordconnection.UsersTable,
			Columns: []string{emailpasswordconnection.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epcuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   emailpasswordconnection.UsersTable,
			Columns: []string{emailpasswordconnection.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EmailPasswordConnection{config: epcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, epcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emailpasswordconnection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	epcuo.mutation.done = true
	return _node, nil
}
