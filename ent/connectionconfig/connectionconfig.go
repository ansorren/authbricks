// Code generated by ent, DO NOT EDIT.

package connectionconfig

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the connectionconfig type in the database.
	Label = "connection_config"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// EdgeService holds the string denoting the service edge name in mutations.
	EdgeService = "service"
	// EdgeOidcConnections holds the string denoting the oidc_connections edge name in mutations.
	EdgeOidcConnections = "oidc_connections"
	// EdgeEmailPasswordConnection holds the string denoting the email_password_connection edge name in mutations.
	EdgeEmailPasswordConnection = "email_password_connection"
	// Table holds the table name of the connectionconfig in the database.
	Table = "connection_configs"
	// ServiceTable is the table that holds the service relation/edge.
	ServiceTable = "connection_configs"
	// ServiceInverseTable is the table name for the Service entity.
	// It exists in this package in order to avoid circular dependency with the "service" package.
	ServiceInverseTable = "services"
	// ServiceColumn is the table column denoting the service relation/edge.
	ServiceColumn = "service_service_connection_config"
	// OidcConnectionsTable is the table that holds the oidc_connections relation/edge.
	OidcConnectionsTable = "oidc_connections"
	// OidcConnectionsInverseTable is the table name for the OIDCConnection entity.
	// It exists in this package in order to avoid circular dependency with the "oidcconnection" package.
	OidcConnectionsInverseTable = "oidc_connections"
	// OidcConnectionsColumn is the table column denoting the oidc_connections relation/edge.
	OidcConnectionsColumn = "connection_config_oidc_connections"
	// EmailPasswordConnectionTable is the table that holds the email_password_connection relation/edge.
	EmailPasswordConnectionTable = "email_password_connections"
	// EmailPasswordConnectionInverseTable is the table name for the EmailPasswordConnection entity.
	// It exists in this package in order to avoid circular dependency with the "emailpasswordconnection" package.
	EmailPasswordConnectionInverseTable = "email_password_connections"
	// EmailPasswordConnectionColumn is the table column denoting the email_password_connection relation/edge.
	EmailPasswordConnectionColumn = "connection_config_email_password_connection"
)

// Columns holds all SQL columns for connectionconfig fields.
var Columns = []string{
	FieldID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "connection_configs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"service_service_connection_config",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the ConnectionConfig queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByServiceField orders the results by service field.
func ByServiceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newServiceStep(), sql.OrderByField(field, opts...))
	}
}

// ByOidcConnectionsCount orders the results by oidc_connections count.
func ByOidcConnectionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOidcConnectionsStep(), opts...)
	}
}

// ByOidcConnections orders the results by oidc_connections terms.
func ByOidcConnections(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOidcConnectionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEmailPasswordConnectionField orders the results by email_password_connection field.
func ByEmailPasswordConnectionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEmailPasswordConnectionStep(), sql.OrderByField(field, opts...))
	}
}
func newServiceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ServiceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ServiceTable, ServiceColumn),
	)
}
func newOidcConnectionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OidcConnectionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OidcConnectionsTable, OidcConnectionsColumn),
	)
}
func newEmailPasswordConnectionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EmailPasswordConnectionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, EmailPasswordConnectionTable, EmailPasswordConnectionColumn),
	)
}
