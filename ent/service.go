// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"go.authbricks.com/bricks/ent/service"
	"go.authbricks.com/bricks/ent/serviceconfig"
)

// Service is the model entity for the Service schema.
type Service struct {
	config `hcl:"-" json:"-"`
	// ID of the ent.
	ID string `json:"id" hcl:"id"`
	// Name holds the value of the "name" field.
	Name string `json:"name" hcl:"name"`
	// Issuer holds the value of the "issuer" field.
	Issuer string `json:"issuer" hcl:"issuer"`
	// Scopes holds the value of the "scopes" field.
	Scopes []string `json:"scopes" hcl:"scopes"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ServiceQuery when eager-loading is set.
	Edges        ServiceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ServiceEdges holds the relations/edges for other nodes in the graph.
type ServiceEdges struct {
	// ServiceConfig holds the value of the service_config edge.
	ServiceConfig *ServiceConfig `json:"service_config,omitempty"`
	// Applications holds the value of the applications edge.
	Applications []*Application `json:"applications,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ServiceConfigOrErr returns the ServiceConfig value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServiceEdges) ServiceConfigOrErr() (*ServiceConfig, error) {
	if e.ServiceConfig != nil {
		return e.ServiceConfig, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: serviceconfig.Label}
	}
	return nil, &NotLoadedError{edge: "service_config"}
}

// ApplicationsOrErr returns the Applications value or an error if the edge
// was not loaded in eager-loading.
func (e ServiceEdges) ApplicationsOrErr() ([]*Application, error) {
	if e.loadedTypes[1] {
		return e.Applications, nil
	}
	return nil, &NotLoadedError{edge: "applications"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Service) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case service.FieldScopes:
			values[i] = new([]byte)
		case service.FieldID, service.FieldName, service.FieldIssuer:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Service fields.
func (s *Service) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case service.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				s.ID = value.String
			}
		case service.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case service.FieldIssuer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field issuer", values[i])
			} else if value.Valid {
				s.Issuer = value.String
			}
		case service.FieldScopes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field scopes", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.Scopes); err != nil {
					return fmt.Errorf("unmarshal field scopes: %w", err)
				}
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Service.
// This includes values selected through modifiers, order, etc.
func (s *Service) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryServiceConfig queries the "service_config" edge of the Service entity.
func (s *Service) QueryServiceConfig() *ServiceConfigQuery {
	return NewServiceClient(s.config).QueryServiceConfig(s)
}

// QueryApplications queries the "applications" edge of the Service entity.
func (s *Service) QueryApplications() *ApplicationQuery {
	return NewServiceClient(s.config).QueryApplications(s)
}

// Update returns a builder for updating this Service.
// Note that you need to call Service.Unwrap() before calling this method if this Service
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Service) Update() *ServiceUpdateOne {
	return NewServiceClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Service entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Service) Unwrap() *Service {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Service is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Service) String() string {
	var builder strings.Builder
	builder.WriteString("Service(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("issuer=")
	builder.WriteString(s.Issuer)
	builder.WriteString(", ")
	builder.WriteString("scopes=")
	builder.WriteString(fmt.Sprintf("%v", s.Scopes))
	builder.WriteByte(')')
	return builder.String()
}

// Services is a parsable slice of Service.
type Services []*Service
