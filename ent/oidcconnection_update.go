// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"go.authbricks.com/bricks/ent/connectionconfig"
	"go.authbricks.com/bricks/ent/oidcconnection"
	"go.authbricks.com/bricks/ent/predicate"
	"go.authbricks.com/bricks/ent/user"
)

// OIDCConnectionUpdate is the builder for updating OIDCConnection entities.
type OIDCConnectionUpdate struct {
	config
	hooks    []Hook
	mutation *OIDCConnectionMutation
}

// Where appends a list predicates to the OIDCConnectionUpdate builder.
func (ocu *OIDCConnectionUpdate) Where(ps ...predicate.OIDCConnection) *OIDCConnectionUpdate {
	ocu.mutation.Where(ps...)
	return ocu
}

// SetEnabled sets the "enabled" field.
func (ocu *OIDCConnectionUpdate) SetEnabled(b bool) *OIDCConnectionUpdate {
	ocu.mutation.SetEnabled(b)
	return ocu
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (ocu *OIDCConnectionUpdate) SetNillableEnabled(b *bool) *OIDCConnectionUpdate {
	if b != nil {
		ocu.SetEnabled(*b)
	}
	return ocu
}

// SetClientID sets the "client_id" field.
func (ocu *OIDCConnectionUpdate) SetClientID(s string) *OIDCConnectionUpdate {
	ocu.mutation.SetClientID(s)
	return ocu
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (ocu *OIDCConnectionUpdate) SetNillableClientID(s *string) *OIDCConnectionUpdate {
	if s != nil {
		ocu.SetClientID(*s)
	}
	return ocu
}

// ClearClientID clears the value of the "client_id" field.
func (ocu *OIDCConnectionUpdate) ClearClientID() *OIDCConnectionUpdate {
	ocu.mutation.ClearClientID()
	return ocu
}

// SetClientSecret sets the "client_secret" field.
func (ocu *OIDCConnectionUpdate) SetClientSecret(s string) *OIDCConnectionUpdate {
	ocu.mutation.SetClientSecret(s)
	return ocu
}

// SetNillableClientSecret sets the "client_secret" field if the given value is not nil.
func (ocu *OIDCConnectionUpdate) SetNillableClientSecret(s *string) *OIDCConnectionUpdate {
	if s != nil {
		ocu.SetClientSecret(*s)
	}
	return ocu
}

// ClearClientSecret clears the value of the "client_secret" field.
func (ocu *OIDCConnectionUpdate) ClearClientSecret() *OIDCConnectionUpdate {
	ocu.mutation.ClearClientSecret()
	return ocu
}

// SetScopes sets the "scopes" field.
func (ocu *OIDCConnectionUpdate) SetScopes(s []string) *OIDCConnectionUpdate {
	ocu.mutation.SetScopes(s)
	return ocu
}

// AppendScopes appends s to the "scopes" field.
func (ocu *OIDCConnectionUpdate) AppendScopes(s []string) *OIDCConnectionUpdate {
	ocu.mutation.AppendScopes(s)
	return ocu
}

// ClearScopes clears the value of the "scopes" field.
func (ocu *OIDCConnectionUpdate) ClearScopes() *OIDCConnectionUpdate {
	ocu.mutation.ClearScopes()
	return ocu
}

// SetRedirectURI sets the "redirect_uri" field.
func (ocu *OIDCConnectionUpdate) SetRedirectURI(s string) *OIDCConnectionUpdate {
	ocu.mutation.SetRedirectURI(s)
	return ocu
}

// SetNillableRedirectURI sets the "redirect_uri" field if the given value is not nil.
func (ocu *OIDCConnectionUpdate) SetNillableRedirectURI(s *string) *OIDCConnectionUpdate {
	if s != nil {
		ocu.SetRedirectURI(*s)
	}
	return ocu
}

// ClearRedirectURI clears the value of the "redirect_uri" field.
func (ocu *OIDCConnectionUpdate) ClearRedirectURI() *OIDCConnectionUpdate {
	ocu.mutation.ClearRedirectURI()
	return ocu
}

// SetWellKnownOpenidConfiguration sets the "well_known_openid_configuration" field.
func (ocu *OIDCConnectionUpdate) SetWellKnownOpenidConfiguration(s string) *OIDCConnectionUpdate {
	ocu.mutation.SetWellKnownOpenidConfiguration(s)
	return ocu
}

// SetNillableWellKnownOpenidConfiguration sets the "well_known_openid_configuration" field if the given value is not nil.
func (ocu *OIDCConnectionUpdate) SetNillableWellKnownOpenidConfiguration(s *string) *OIDCConnectionUpdate {
	if s != nil {
		ocu.SetWellKnownOpenidConfiguration(*s)
	}
	return ocu
}

// ClearWellKnownOpenidConfiguration clears the value of the "well_known_openid_configuration" field.
func (ocu *OIDCConnectionUpdate) ClearWellKnownOpenidConfiguration() *OIDCConnectionUpdate {
	ocu.mutation.ClearWellKnownOpenidConfiguration()
	return ocu
}

// SetConnectionConfigID sets the "connection_config" edge to the ConnectionConfig entity by ID.
func (ocu *OIDCConnectionUpdate) SetConnectionConfigID(id string) *OIDCConnectionUpdate {
	ocu.mutation.SetConnectionConfigID(id)
	return ocu
}

// SetNillableConnectionConfigID sets the "connection_config" edge to the ConnectionConfig entity by ID if the given value is not nil.
func (ocu *OIDCConnectionUpdate) SetNillableConnectionConfigID(id *string) *OIDCConnectionUpdate {
	if id != nil {
		ocu = ocu.SetConnectionConfigID(*id)
	}
	return ocu
}

// SetConnectionConfig sets the "connection_config" edge to the ConnectionConfig entity.
func (ocu *OIDCConnectionUpdate) SetConnectionConfig(c *ConnectionConfig) *OIDCConnectionUpdate {
	return ocu.SetConnectionConfigID(c.ID)
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (ocu *OIDCConnectionUpdate) SetUsersID(id string) *OIDCConnectionUpdate {
	ocu.mutation.SetUsersID(id)
	return ocu
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (ocu *OIDCConnectionUpdate) SetNillableUsersID(id *string) *OIDCConnectionUpdate {
	if id != nil {
		ocu = ocu.SetUsersID(*id)
	}
	return ocu
}

// SetUsers sets the "users" edge to the User entity.
func (ocu *OIDCConnectionUpdate) SetUsers(u *User) *OIDCConnectionUpdate {
	return ocu.SetUsersID(u.ID)
}

// Mutation returns the OIDCConnectionMutation object of the builder.
func (ocu *OIDCConnectionUpdate) Mutation() *OIDCConnectionMutation {
	return ocu.mutation
}

// ClearConnectionConfig clears the "connection_config" edge to the ConnectionConfig entity.
func (ocu *OIDCConnectionUpdate) ClearConnectionConfig() *OIDCConnectionUpdate {
	ocu.mutation.ClearConnectionConfig()
	return ocu
}

// ClearUsers clears the "users" edge to the User entity.
func (ocu *OIDCConnectionUpdate) ClearUsers() *OIDCConnectionUpdate {
	ocu.mutation.ClearUsers()
	return ocu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ocu *OIDCConnectionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ocu.sqlSave, ocu.mutation, ocu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ocu *OIDCConnectionUpdate) SaveX(ctx context.Context) int {
	affected, err := ocu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ocu *OIDCConnectionUpdate) Exec(ctx context.Context) error {
	_, err := ocu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocu *OIDCConnectionUpdate) ExecX(ctx context.Context) {
	if err := ocu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ocu *OIDCConnectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(oidcconnection.Table, oidcconnection.Columns, sqlgraph.NewFieldSpec(oidcconnection.FieldID, field.TypeString))
	if ps := ocu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ocu.mutation.Enabled(); ok {
		_spec.SetField(oidcconnection.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := ocu.mutation.ClientID(); ok {
		_spec.SetField(oidcconnection.FieldClientID, field.TypeString, value)
	}
	if ocu.mutation.ClientIDCleared() {
		_spec.ClearField(oidcconnection.FieldClientID, field.TypeString)
	}
	if value, ok := ocu.mutation.ClientSecret(); ok {
		_spec.SetField(oidcconnection.FieldClientSecret, field.TypeString, value)
	}
	if ocu.mutation.ClientSecretCleared() {
		_spec.ClearField(oidcconnection.FieldClientSecret, field.TypeString)
	}
	if value, ok := ocu.mutation.Scopes(); ok {
		_spec.SetField(oidcconnection.FieldScopes, field.TypeJSON, value)
	}
	if value, ok := ocu.mutation.AppendedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, oidcconnection.FieldScopes, value)
		})
	}
	if ocu.mutation.ScopesCleared() {
		_spec.ClearField(oidcconnection.FieldScopes, field.TypeJSON)
	}
	if value, ok := ocu.mutation.RedirectURI(); ok {
		_spec.SetField(oidcconnection.FieldRedirectURI, field.TypeString, value)
	}
	if ocu.mutation.RedirectURICleared() {
		_spec.ClearField(oidcconnection.FieldRedirectURI, field.TypeString)
	}
	if value, ok := ocu.mutation.WellKnownOpenidConfiguration(); ok {
		_spec.SetField(oidcconnection.FieldWellKnownOpenidConfiguration, field.TypeString, value)
	}
	if ocu.mutation.WellKnownOpenidConfigurationCleared() {
		_spec.ClearField(oidcconnection.FieldWellKnownOpenidConfiguration, field.TypeString)
	}
	if ocu.mutation.ConnectionConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oidcconnection.ConnectionConfigTable,
			Columns: []string{oidcconnection.ConnectionConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectionconfig.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ocu.mutation.ConnectionConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oidcconnection.ConnectionConfigTable,
			Columns: []string{oidcconnection.ConnectionConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectionconfig.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ocu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oidcconnection.UsersTable,
			Columns: []string{oidcconnection.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ocu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oidcconnection.UsersTable,
			Columns: []string{oidcconnection.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ocu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oidcconnection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ocu.mutation.done = true
	return n, nil
}

// OIDCConnectionUpdateOne is the builder for updating a single OIDCConnection entity.
type OIDCConnectionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OIDCConnectionMutation
}

// SetEnabled sets the "enabled" field.
func (ocuo *OIDCConnectionUpdateOne) SetEnabled(b bool) *OIDCConnectionUpdateOne {
	ocuo.mutation.SetEnabled(b)
	return ocuo
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (ocuo *OIDCConnectionUpdateOne) SetNillableEnabled(b *bool) *OIDCConnectionUpdateOne {
	if b != nil {
		ocuo.SetEnabled(*b)
	}
	return ocuo
}

// SetClientID sets the "client_id" field.
func (ocuo *OIDCConnectionUpdateOne) SetClientID(s string) *OIDCConnectionUpdateOne {
	ocuo.mutation.SetClientID(s)
	return ocuo
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (ocuo *OIDCConnectionUpdateOne) SetNillableClientID(s *string) *OIDCConnectionUpdateOne {
	if s != nil {
		ocuo.SetClientID(*s)
	}
	return ocuo
}

// ClearClientID clears the value of the "client_id" field.
func (ocuo *OIDCConnectionUpdateOne) ClearClientID() *OIDCConnectionUpdateOne {
	ocuo.mutation.ClearClientID()
	return ocuo
}

// SetClientSecret sets the "client_secret" field.
func (ocuo *OIDCConnectionUpdateOne) SetClientSecret(s string) *OIDCConnectionUpdateOne {
	ocuo.mutation.SetClientSecret(s)
	return ocuo
}

// SetNillableClientSecret sets the "client_secret" field if the given value is not nil.
func (ocuo *OIDCConnectionUpdateOne) SetNillableClientSecret(s *string) *OIDCConnectionUpdateOne {
	if s != nil {
		ocuo.SetClientSecret(*s)
	}
	return ocuo
}

// ClearClientSecret clears the value of the "client_secret" field.
func (ocuo *OIDCConnectionUpdateOne) ClearClientSecret() *OIDCConnectionUpdateOne {
	ocuo.mutation.ClearClientSecret()
	return ocuo
}

// SetScopes sets the "scopes" field.
func (ocuo *OIDCConnectionUpdateOne) SetScopes(s []string) *OIDCConnectionUpdateOne {
	ocuo.mutation.SetScopes(s)
	return ocuo
}

// AppendScopes appends s to the "scopes" field.
func (ocuo *OIDCConnectionUpdateOne) AppendScopes(s []string) *OIDCConnectionUpdateOne {
	ocuo.mutation.AppendScopes(s)
	return ocuo
}

// ClearScopes clears the value of the "scopes" field.
func (ocuo *OIDCConnectionUpdateOne) ClearScopes() *OIDCConnectionUpdateOne {
	ocuo.mutation.ClearScopes()
	return ocuo
}

// SetRedirectURI sets the "redirect_uri" field.
func (ocuo *OIDCConnectionUpdateOne) SetRedirectURI(s string) *OIDCConnectionUpdateOne {
	ocuo.mutation.SetRedirectURI(s)
	return ocuo
}

// SetNillableRedirectURI sets the "redirect_uri" field if the given value is not nil.
func (ocuo *OIDCConnectionUpdateOne) SetNillableRedirectURI(s *string) *OIDCConnectionUpdateOne {
	if s != nil {
		ocuo.SetRedirectURI(*s)
	}
	return ocuo
}

// ClearRedirectURI clears the value of the "redirect_uri" field.
func (ocuo *OIDCConnectionUpdateOne) ClearRedirectURI() *OIDCConnectionUpdateOne {
	ocuo.mutation.ClearRedirectURI()
	return ocuo
}

// SetWellKnownOpenidConfiguration sets the "well_known_openid_configuration" field.
func (ocuo *OIDCConnectionUpdateOne) SetWellKnownOpenidConfiguration(s string) *OIDCConnectionUpdateOne {
	ocuo.mutation.SetWellKnownOpenidConfiguration(s)
	return ocuo
}

// SetNillableWellKnownOpenidConfiguration sets the "well_known_openid_configuration" field if the given value is not nil.
func (ocuo *OIDCConnectionUpdateOne) SetNillableWellKnownOpenidConfiguration(s *string) *OIDCConnectionUpdateOne {
	if s != nil {
		ocuo.SetWellKnownOpenidConfiguration(*s)
	}
	return ocuo
}

// ClearWellKnownOpenidConfiguration clears the value of the "well_known_openid_configuration" field.
func (ocuo *OIDCConnectionUpdateOne) ClearWellKnownOpenidConfiguration() *OIDCConnectionUpdateOne {
	ocuo.mutation.ClearWellKnownOpenidConfiguration()
	return ocuo
}

// SetConnectionConfigID sets the "connection_config" edge to the ConnectionConfig entity by ID.
func (ocuo *OIDCConnectionUpdateOne) SetConnectionConfigID(id string) *OIDCConnectionUpdateOne {
	ocuo.mutation.SetConnectionConfigID(id)
	return ocuo
}

// SetNillableConnectionConfigID sets the "connection_config" edge to the ConnectionConfig entity by ID if the given value is not nil.
func (ocuo *OIDCConnectionUpdateOne) SetNillableConnectionConfigID(id *string) *OIDCConnectionUpdateOne {
	if id != nil {
		ocuo = ocuo.SetConnectionConfigID(*id)
	}
	return ocuo
}

// SetConnectionConfig sets the "connection_config" edge to the ConnectionConfig entity.
func (ocuo *OIDCConnectionUpdateOne) SetConnectionConfig(c *ConnectionConfig) *OIDCConnectionUpdateOne {
	return ocuo.SetConnectionConfigID(c.ID)
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (ocuo *OIDCConnectionUpdateOne) SetUsersID(id string) *OIDCConnectionUpdateOne {
	ocuo.mutation.SetUsersID(id)
	return ocuo
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (ocuo *OIDCConnectionUpdateOne) SetNillableUsersID(id *string) *OIDCConnectionUpdateOne {
	if id != nil {
		ocuo = ocuo.SetUsersID(*id)
	}
	return ocuo
}

// SetUsers sets the "users" edge to the User entity.
func (ocuo *OIDCConnectionUpdateOne) SetUsers(u *User) *OIDCConnectionUpdateOne {
	return ocuo.SetUsersID(u.ID)
}

// Mutation returns the OIDCConnectionMutation object of the builder.
func (ocuo *OIDCConnectionUpdateOne) Mutation() *OIDCConnectionMutation {
	return ocuo.mutation
}

// ClearConnectionConfig clears the "connection_config" edge to the ConnectionConfig entity.
func (ocuo *OIDCConnectionUpdateOne) ClearConnectionConfig() *OIDCConnectionUpdateOne {
	ocuo.mutation.ClearConnectionConfig()
	return ocuo
}

// ClearUsers clears the "users" edge to the User entity.
func (ocuo *OIDCConnectionUpdateOne) ClearUsers() *OIDCConnectionUpdateOne {
	ocuo.mutation.ClearUsers()
	return ocuo
}

// Where appends a list predicates to the OIDCConnectionUpdate builder.
func (ocuo *OIDCConnectionUpdateOne) Where(ps ...predicate.OIDCConnection) *OIDCConnectionUpdateOne {
	ocuo.mutation.Where(ps...)
	return ocuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ocuo *OIDCConnectionUpdateOne) Select(field string, fields ...string) *OIDCConnectionUpdateOne {
	ocuo.fields = append([]string{field}, fields...)
	return ocuo
}

// Save executes the query and returns the updated OIDCConnection entity.
func (ocuo *OIDCConnectionUpdateOne) Save(ctx context.Context) (*OIDCConnection, error) {
	return withHooks(ctx, ocuo.sqlSave, ocuo.mutation, ocuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ocuo *OIDCConnectionUpdateOne) SaveX(ctx context.Context) *OIDCConnection {
	node, err := ocuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ocuo *OIDCConnectionUpdateOne) Exec(ctx context.Context) error {
	_, err := ocuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocuo *OIDCConnectionUpdateOne) ExecX(ctx context.Context) {
	if err := ocuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ocuo *OIDCConnectionUpdateOne) sqlSave(ctx context.Context) (_node *OIDCConnection, err error) {
	_spec := sqlgraph.NewUpdateSpec(oidcconnection.Table, oidcconnection.Columns, sqlgraph.NewFieldSpec(oidcconnection.FieldID, field.TypeString))
	id, ok := ocuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OIDCConnection.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ocuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oidcconnection.FieldID)
		for _, f := range fields {
			if !oidcconnection.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oidcconnection.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ocuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ocuo.mutation.Enabled(); ok {
		_spec.SetField(oidcconnection.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := ocuo.mutation.ClientID(); ok {
		_spec.SetField(oidcconnection.FieldClientID, field.TypeString, value)
	}
	if ocuo.mutation.ClientIDCleared() {
		_spec.ClearField(oidcconnection.FieldClientID, field.TypeString)
	}
	if value, ok := ocuo.mutation.ClientSecret(); ok {
		_spec.SetField(oidcconnection.FieldClientSecret, field.TypeString, value)
	}
	if ocuo.mutation.ClientSecretCleared() {
		_spec.ClearField(oidcconnection.FieldClientSecret, field.TypeString)
	}
	if value, ok := ocuo.mutation.Scopes(); ok {
		_spec.SetField(oidcconnection.FieldScopes, field.TypeJSON, value)
	}
	if value, ok := ocuo.mutation.AppendedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, oidcconnection.FieldScopes, value)
		})
	}
	if ocuo.mutation.ScopesCleared() {
		_spec.ClearField(oidcconnection.FieldScopes, field.TypeJSON)
	}
	if value, ok := ocuo.mutation.RedirectURI(); ok {
		_spec.SetField(oidcconnection.FieldRedirectURI, field.TypeString, value)
	}
	if ocuo.mutation.RedirectURICleared() {
		_spec.ClearField(oidcconnection.FieldRedirectURI, field.TypeString)
	}
	if value, ok := ocuo.mutation.WellKnownOpenidConfiguration(); ok {
		_spec.SetField(oidcconnection.FieldWellKnownOpenidConfiguration, field.TypeString, value)
	}
	if ocuo.mutation.WellKnownOpenidConfigurationCleared() {
		_spec.ClearField(oidcconnection.FieldWellKnownOpenidConfiguration, field.TypeString)
	}
	if ocuo.mutation.ConnectionConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oidcconnection.ConnectionConfigTable,
			Columns: []string{oidcconnection.ConnectionConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectionconfig.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ocuo.mutation.ConnectionConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oidcconnection.ConnectionConfigTable,
			Columns: []string{oidcconnection.ConnectionConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectionconfig.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ocuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oidcconnection.UsersTable,
			Columns: []string{oidcconnection.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ocuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   oidcconnection.UsersTable,
			Columns: []string{oidcconnection.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OIDCConnection{config: ocuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ocuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oidcconnection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ocuo.mutation.done = true
	return _node, nil
}
