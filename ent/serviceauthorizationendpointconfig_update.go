// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.authbricks.com/bricks/ent/predicate"
	"go.authbricks.com/bricks/ent/service"
	"go.authbricks.com/bricks/ent/serviceauthorizationendpointconfig"
)

// ServiceAuthorizationEndpointConfigUpdate is the builder for updating ServiceAuthorizationEndpointConfig entities.
type ServiceAuthorizationEndpointConfigUpdate struct {
	config
	hooks    []Hook
	mutation *ServiceAuthorizationEndpointConfigMutation
}

// Where appends a list predicates to the ServiceAuthorizationEndpointConfigUpdate builder.
func (saecu *ServiceAuthorizationEndpointConfigUpdate) Where(ps ...predicate.ServiceAuthorizationEndpointConfig) *ServiceAuthorizationEndpointConfigUpdate {
	saecu.mutation.Where(ps...)
	return saecu
}

// SetEndpoint sets the "endpoint" field.
func (saecu *ServiceAuthorizationEndpointConfigUpdate) SetEndpoint(s string) *ServiceAuthorizationEndpointConfigUpdate {
	saecu.mutation.SetEndpoint(s)
	return saecu
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (saecu *ServiceAuthorizationEndpointConfigUpdate) SetNillableEndpoint(s *string) *ServiceAuthorizationEndpointConfigUpdate {
	if s != nil {
		saecu.SetEndpoint(*s)
	}
	return saecu
}

// SetPkceRequired sets the "pkce_required" field.
func (saecu *ServiceAuthorizationEndpointConfigUpdate) SetPkceRequired(b bool) *ServiceAuthorizationEndpointConfigUpdate {
	saecu.mutation.SetPkceRequired(b)
	return saecu
}

// SetNillablePkceRequired sets the "pkce_required" field if the given value is not nil.
func (saecu *ServiceAuthorizationEndpointConfigUpdate) SetNillablePkceRequired(b *bool) *ServiceAuthorizationEndpointConfigUpdate {
	if b != nil {
		saecu.SetPkceRequired(*b)
	}
	return saecu
}

// SetPkceS256CodeChallengeMethodRequired sets the "pkce_s256_code_challenge_method_required" field.
func (saecu *ServiceAuthorizationEndpointConfigUpdate) SetPkceS256CodeChallengeMethodRequired(b bool) *ServiceAuthorizationEndpointConfigUpdate {
	saecu.mutation.SetPkceS256CodeChallengeMethodRequired(b)
	return saecu
}

// SetNillablePkceS256CodeChallengeMethodRequired sets the "pkce_s256_code_challenge_method_required" field if the given value is not nil.
func (saecu *ServiceAuthorizationEndpointConfigUpdate) SetNillablePkceS256CodeChallengeMethodRequired(b *bool) *ServiceAuthorizationEndpointConfigUpdate {
	if b != nil {
		saecu.SetPkceS256CodeChallengeMethodRequired(*b)
	}
	return saecu
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (saecu *ServiceAuthorizationEndpointConfigUpdate) SetServiceID(id string) *ServiceAuthorizationEndpointConfigUpdate {
	saecu.mutation.SetServiceID(id)
	return saecu
}

// SetService sets the "service" edge to the Service entity.
func (saecu *ServiceAuthorizationEndpointConfigUpdate) SetService(s *Service) *ServiceAuthorizationEndpointConfigUpdate {
	return saecu.SetServiceID(s.ID)
}

// Mutation returns the ServiceAuthorizationEndpointConfigMutation object of the builder.
func (saecu *ServiceAuthorizationEndpointConfigUpdate) Mutation() *ServiceAuthorizationEndpointConfigMutation {
	return saecu.mutation
}

// ClearService clears the "service" edge to the Service entity.
func (saecu *ServiceAuthorizationEndpointConfigUpdate) ClearService() *ServiceAuthorizationEndpointConfigUpdate {
	saecu.mutation.ClearService()
	return saecu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (saecu *ServiceAuthorizationEndpointConfigUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, saecu.sqlSave, saecu.mutation, saecu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (saecu *ServiceAuthorizationEndpointConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := saecu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (saecu *ServiceAuthorizationEndpointConfigUpdate) Exec(ctx context.Context) error {
	_, err := saecu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (saecu *ServiceAuthorizationEndpointConfigUpdate) ExecX(ctx context.Context) {
	if err := saecu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (saecu *ServiceAuthorizationEndpointConfigUpdate) check() error {
	if v, ok := saecu.mutation.Endpoint(); ok {
		if err := serviceauthorizationendpointconfig.EndpointValidator(v); err != nil {
			return &ValidationError{Name: "endpoint", err: fmt.Errorf(`ent: validator failed for field "ServiceAuthorizationEndpointConfig.endpoint": %w`, err)}
		}
	}
	if _, ok := saecu.mutation.ServiceID(); saecu.mutation.ServiceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ServiceAuthorizationEndpointConfig.service"`)
	}
	return nil
}

func (saecu *ServiceAuthorizationEndpointConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := saecu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(serviceauthorizationendpointconfig.Table, serviceauthorizationendpointconfig.Columns, sqlgraph.NewFieldSpec(serviceauthorizationendpointconfig.FieldID, field.TypeString))
	if ps := saecu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := saecu.mutation.Endpoint(); ok {
		_spec.SetField(serviceauthorizationendpointconfig.FieldEndpoint, field.TypeString, value)
	}
	if value, ok := saecu.mutation.PkceRequired(); ok {
		_spec.SetField(serviceauthorizationendpointconfig.FieldPkceRequired, field.TypeBool, value)
	}
	if value, ok := saecu.mutation.PkceS256CodeChallengeMethodRequired(); ok {
		_spec.SetField(serviceauthorizationendpointconfig.FieldPkceS256CodeChallengeMethodRequired, field.TypeBool, value)
	}
	if saecu.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   serviceauthorizationendpointconfig.ServiceTable,
			Columns: []string{serviceauthorizationendpointconfig.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := saecu.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   serviceauthorizationendpointconfig.ServiceTable,
			Columns: []string{serviceauthorizationendpointconfig.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, saecu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{serviceauthorizationendpointconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	saecu.mutation.done = true
	return n, nil
}

// ServiceAuthorizationEndpointConfigUpdateOne is the builder for updating a single ServiceAuthorizationEndpointConfig entity.
type ServiceAuthorizationEndpointConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServiceAuthorizationEndpointConfigMutation
}

// SetEndpoint sets the "endpoint" field.
func (saecuo *ServiceAuthorizationEndpointConfigUpdateOne) SetEndpoint(s string) *ServiceAuthorizationEndpointConfigUpdateOne {
	saecuo.mutation.SetEndpoint(s)
	return saecuo
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (saecuo *ServiceAuthorizationEndpointConfigUpdateOne) SetNillableEndpoint(s *string) *ServiceAuthorizationEndpointConfigUpdateOne {
	if s != nil {
		saecuo.SetEndpoint(*s)
	}
	return saecuo
}

// SetPkceRequired sets the "pkce_required" field.
func (saecuo *ServiceAuthorizationEndpointConfigUpdateOne) SetPkceRequired(b bool) *ServiceAuthorizationEndpointConfigUpdateOne {
	saecuo.mutation.SetPkceRequired(b)
	return saecuo
}

// SetNillablePkceRequired sets the "pkce_required" field if the given value is not nil.
func (saecuo *ServiceAuthorizationEndpointConfigUpdateOne) SetNillablePkceRequired(b *bool) *ServiceAuthorizationEndpointConfigUpdateOne {
	if b != nil {
		saecuo.SetPkceRequired(*b)
	}
	return saecuo
}

// SetPkceS256CodeChallengeMethodRequired sets the "pkce_s256_code_challenge_method_required" field.
func (saecuo *ServiceAuthorizationEndpointConfigUpdateOne) SetPkceS256CodeChallengeMethodRequired(b bool) *ServiceAuthorizationEndpointConfigUpdateOne {
	saecuo.mutation.SetPkceS256CodeChallengeMethodRequired(b)
	return saecuo
}

// SetNillablePkceS256CodeChallengeMethodRequired sets the "pkce_s256_code_challenge_method_required" field if the given value is not nil.
func (saecuo *ServiceAuthorizationEndpointConfigUpdateOne) SetNillablePkceS256CodeChallengeMethodRequired(b *bool) *ServiceAuthorizationEndpointConfigUpdateOne {
	if b != nil {
		saecuo.SetPkceS256CodeChallengeMethodRequired(*b)
	}
	return saecuo
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (saecuo *ServiceAuthorizationEndpointConfigUpdateOne) SetServiceID(id string) *ServiceAuthorizationEndpointConfigUpdateOne {
	saecuo.mutation.SetServiceID(id)
	return saecuo
}

// SetService sets the "service" edge to the Service entity.
func (saecuo *ServiceAuthorizationEndpointConfigUpdateOne) SetService(s *Service) *ServiceAuthorizationEndpointConfigUpdateOne {
	return saecuo.SetServiceID(s.ID)
}

// Mutation returns the ServiceAuthorizationEndpointConfigMutation object of the builder.
func (saecuo *ServiceAuthorizationEndpointConfigUpdateOne) Mutation() *ServiceAuthorizationEndpointConfigMutation {
	return saecuo.mutation
}

// ClearService clears the "service" edge to the Service entity.
func (saecuo *ServiceAuthorizationEndpointConfigUpdateOne) ClearService() *ServiceAuthorizationEndpointConfigUpdateOne {
	saecuo.mutation.ClearService()
	return saecuo
}

// Where appends a list predicates to the ServiceAuthorizationEndpointConfigUpdate builder.
func (saecuo *ServiceAuthorizationEndpointConfigUpdateOne) Where(ps ...predicate.ServiceAuthorizationEndpointConfig) *ServiceAuthorizationEndpointConfigUpdateOne {
	saecuo.mutation.Where(ps...)
	return saecuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (saecuo *ServiceAuthorizationEndpointConfigUpdateOne) Select(field string, fields ...string) *ServiceAuthorizationEndpointConfigUpdateOne {
	saecuo.fields = append([]string{field}, fields...)
	return saecuo
}

// Save executes the query and returns the updated ServiceAuthorizationEndpointConfig entity.
func (saecuo *ServiceAuthorizationEndpointConfigUpdateOne) Save(ctx context.Context) (*ServiceAuthorizationEndpointConfig, error) {
	return withHooks(ctx, saecuo.sqlSave, saecuo.mutation, saecuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (saecuo *ServiceAuthorizationEndpointConfigUpdateOne) SaveX(ctx context.Context) *ServiceAuthorizationEndpointConfig {
	node, err := saecuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (saecuo *ServiceAuthorizationEndpointConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := saecuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (saecuo *ServiceAuthorizationEndpointConfigUpdateOne) ExecX(ctx context.Context) {
	if err := saecuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (saecuo *ServiceAuthorizationEndpointConfigUpdateOne) check() error {
	if v, ok := saecuo.mutation.Endpoint(); ok {
		if err := serviceauthorizationendpointconfig.EndpointValidator(v); err != nil {
			return &ValidationError{Name: "endpoint", err: fmt.Errorf(`ent: validator failed for field "ServiceAuthorizationEndpointConfig.endpoint": %w`, err)}
		}
	}
	if _, ok := saecuo.mutation.ServiceID(); saecuo.mutation.ServiceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ServiceAuthorizationEndpointConfig.service"`)
	}
	return nil
}

func (saecuo *ServiceAuthorizationEndpointConfigUpdateOne) sqlSave(ctx context.Context) (_node *ServiceAuthorizationEndpointConfig, err error) {
	if err := saecuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(serviceauthorizationendpointconfig.Table, serviceauthorizationendpointconfig.Columns, sqlgraph.NewFieldSpec(serviceauthorizationendpointconfig.FieldID, field.TypeString))
	id, ok := saecuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ServiceAuthorizationEndpointConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := saecuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, serviceauthorizationendpointconfig.FieldID)
		for _, f := range fields {
			if !serviceauthorizationendpointconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != serviceauthorizationendpointconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := saecuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := saecuo.mutation.Endpoint(); ok {
		_spec.SetField(serviceauthorizationendpointconfig.FieldEndpoint, field.TypeString, value)
	}
	if value, ok := saecuo.mutation.PkceRequired(); ok {
		_spec.SetField(serviceauthorizationendpointconfig.FieldPkceRequired, field.TypeBool, value)
	}
	if value, ok := saecuo.mutation.PkceS256CodeChallengeMethodRequired(); ok {
		_spec.SetField(serviceauthorizationendpointconfig.FieldPkceS256CodeChallengeMethodRequired, field.TypeBool, value)
	}
	if saecuo.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   serviceauthorizationendpointconfig.ServiceTable,
			Columns: []string{serviceauthorizationendpointconfig.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := saecuo.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   serviceauthorizationendpointconfig.ServiceTable,
			Columns: []string{serviceauthorizationendpointconfig.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ServiceAuthorizationEndpointConfig{config: saecuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, saecuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{serviceauthorizationendpointconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	saecuo.mutation.done = true
	return _node, nil
}
