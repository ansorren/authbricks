// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.authbricks.com/bricks/ent/authorizationcode"
	"go.authbricks.com/bricks/ent/predicate"
)

// AuthorizationCodeUpdate is the builder for updating AuthorizationCode entities.
type AuthorizationCodeUpdate struct {
	config
	hooks    []Hook
	mutation *AuthorizationCodeMutation
}

// Where appends a list predicates to the AuthorizationCodeUpdate builder.
func (acu *AuthorizationCodeUpdate) Where(ps ...predicate.AuthorizationCode) *AuthorizationCodeUpdate {
	acu.mutation.Where(ps...)
	return acu
}

// SetApplication sets the "application" field.
func (acu *AuthorizationCodeUpdate) SetApplication(s string) *AuthorizationCodeUpdate {
	acu.mutation.SetApplication(s)
	return acu
}

// SetNillableApplication sets the "application" field if the given value is not nil.
func (acu *AuthorizationCodeUpdate) SetNillableApplication(s *string) *AuthorizationCodeUpdate {
	if s != nil {
		acu.SetApplication(*s)
	}
	return acu
}

// SetCodeChallenge sets the "code_challenge" field.
func (acu *AuthorizationCodeUpdate) SetCodeChallenge(s string) *AuthorizationCodeUpdate {
	acu.mutation.SetCodeChallenge(s)
	return acu
}

// SetNillableCodeChallenge sets the "code_challenge" field if the given value is not nil.
func (acu *AuthorizationCodeUpdate) SetNillableCodeChallenge(s *string) *AuthorizationCodeUpdate {
	if s != nil {
		acu.SetCodeChallenge(*s)
	}
	return acu
}

// SetCodeChallengeMethod sets the "code_challenge_method" field.
func (acu *AuthorizationCodeUpdate) SetCodeChallengeMethod(s string) *AuthorizationCodeUpdate {
	acu.mutation.SetCodeChallengeMethod(s)
	return acu
}

// SetNillableCodeChallengeMethod sets the "code_challenge_method" field if the given value is not nil.
func (acu *AuthorizationCodeUpdate) SetNillableCodeChallengeMethod(s *string) *AuthorizationCodeUpdate {
	if s != nil {
		acu.SetCodeChallengeMethod(*s)
	}
	return acu
}

// SetCreatedAt sets the "created_at" field.
func (acu *AuthorizationCodeUpdate) SetCreatedAt(t time.Time) *AuthorizationCodeUpdate {
	acu.mutation.SetCreatedAt(t)
	return acu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (acu *AuthorizationCodeUpdate) SetNillableCreatedAt(t *time.Time) *AuthorizationCodeUpdate {
	if t != nil {
		acu.SetCreatedAt(*t)
	}
	return acu
}

// SetAuthTime sets the "auth_time" field.
func (acu *AuthorizationCodeUpdate) SetAuthTime(t time.Time) *AuthorizationCodeUpdate {
	acu.mutation.SetAuthTime(t)
	return acu
}

// SetNillableAuthTime sets the "auth_time" field if the given value is not nil.
func (acu *AuthorizationCodeUpdate) SetNillableAuthTime(t *time.Time) *AuthorizationCodeUpdate {
	if t != nil {
		acu.SetAuthTime(*t)
	}
	return acu
}

// SetRedirectURI sets the "redirect_uri" field.
func (acu *AuthorizationCodeUpdate) SetRedirectURI(s string) *AuthorizationCodeUpdate {
	acu.mutation.SetRedirectURI(s)
	return acu
}

// SetNillableRedirectURI sets the "redirect_uri" field if the given value is not nil.
func (acu *AuthorizationCodeUpdate) SetNillableRedirectURI(s *string) *AuthorizationCodeUpdate {
	if s != nil {
		acu.SetRedirectURI(*s)
	}
	return acu
}

// SetNonce sets the "nonce" field.
func (acu *AuthorizationCodeUpdate) SetNonce(s string) *AuthorizationCodeUpdate {
	acu.mutation.SetNonce(s)
	return acu
}

// SetNillableNonce sets the "nonce" field if the given value is not nil.
func (acu *AuthorizationCodeUpdate) SetNillableNonce(s *string) *AuthorizationCodeUpdate {
	if s != nil {
		acu.SetNonce(*s)
	}
	return acu
}

// SetService sets the "service" field.
func (acu *AuthorizationCodeUpdate) SetService(s string) *AuthorizationCodeUpdate {
	acu.mutation.SetService(s)
	return acu
}

// SetNillableService sets the "service" field if the given value is not nil.
func (acu *AuthorizationCodeUpdate) SetNillableService(s *string) *AuthorizationCodeUpdate {
	if s != nil {
		acu.SetService(*s)
	}
	return acu
}

// SetState sets the "state" field.
func (acu *AuthorizationCodeUpdate) SetState(s string) *AuthorizationCodeUpdate {
	acu.mutation.SetState(s)
	return acu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (acu *AuthorizationCodeUpdate) SetNillableState(s *string) *AuthorizationCodeUpdate {
	if s != nil {
		acu.SetState(*s)
	}
	return acu
}

// SetSubject sets the "subject" field.
func (acu *AuthorizationCodeUpdate) SetSubject(s string) *AuthorizationCodeUpdate {
	acu.mutation.SetSubject(s)
	return acu
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (acu *AuthorizationCodeUpdate) SetNillableSubject(s *string) *AuthorizationCodeUpdate {
	if s != nil {
		acu.SetSubject(*s)
	}
	return acu
}

// SetGrantedScopes sets the "granted_scopes" field.
func (acu *AuthorizationCodeUpdate) SetGrantedScopes(s string) *AuthorizationCodeUpdate {
	acu.mutation.SetGrantedScopes(s)
	return acu
}

// SetNillableGrantedScopes sets the "granted_scopes" field if the given value is not nil.
func (acu *AuthorizationCodeUpdate) SetNillableGrantedScopes(s *string) *AuthorizationCodeUpdate {
	if s != nil {
		acu.SetGrantedScopes(*s)
	}
	return acu
}

// Mutation returns the AuthorizationCodeMutation object of the builder.
func (acu *AuthorizationCodeUpdate) Mutation() *AuthorizationCodeMutation {
	return acu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (acu *AuthorizationCodeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, acu.sqlSave, acu.mutation, acu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (acu *AuthorizationCodeUpdate) SaveX(ctx context.Context) int {
	affected, err := acu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (acu *AuthorizationCodeUpdate) Exec(ctx context.Context) error {
	_, err := acu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acu *AuthorizationCodeUpdate) ExecX(ctx context.Context) {
	if err := acu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (acu *AuthorizationCodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(authorizationcode.Table, authorizationcode.Columns, sqlgraph.NewFieldSpec(authorizationcode.FieldID, field.TypeString))
	if ps := acu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acu.mutation.Application(); ok {
		_spec.SetField(authorizationcode.FieldApplication, field.TypeString, value)
	}
	if value, ok := acu.mutation.CodeChallenge(); ok {
		_spec.SetField(authorizationcode.FieldCodeChallenge, field.TypeString, value)
	}
	if value, ok := acu.mutation.CodeChallengeMethod(); ok {
		_spec.SetField(authorizationcode.FieldCodeChallengeMethod, field.TypeString, value)
	}
	if value, ok := acu.mutation.CreatedAt(); ok {
		_spec.SetField(authorizationcode.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := acu.mutation.AuthTime(); ok {
		_spec.SetField(authorizationcode.FieldAuthTime, field.TypeTime, value)
	}
	if value, ok := acu.mutation.RedirectURI(); ok {
		_spec.SetField(authorizationcode.FieldRedirectURI, field.TypeString, value)
	}
	if value, ok := acu.mutation.Nonce(); ok {
		_spec.SetField(authorizationcode.FieldNonce, field.TypeString, value)
	}
	if value, ok := acu.mutation.Service(); ok {
		_spec.SetField(authorizationcode.FieldService, field.TypeString, value)
	}
	if value, ok := acu.mutation.State(); ok {
		_spec.SetField(authorizationcode.FieldState, field.TypeString, value)
	}
	if value, ok := acu.mutation.Subject(); ok {
		_spec.SetField(authorizationcode.FieldSubject, field.TypeString, value)
	}
	if value, ok := acu.mutation.GrantedScopes(); ok {
		_spec.SetField(authorizationcode.FieldGrantedScopes, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, acu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authorizationcode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	acu.mutation.done = true
	return n, nil
}

// AuthorizationCodeUpdateOne is the builder for updating a single AuthorizationCode entity.
type AuthorizationCodeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AuthorizationCodeMutation
}

// SetApplication sets the "application" field.
func (acuo *AuthorizationCodeUpdateOne) SetApplication(s string) *AuthorizationCodeUpdateOne {
	acuo.mutation.SetApplication(s)
	return acuo
}

// SetNillableApplication sets the "application" field if the given value is not nil.
func (acuo *AuthorizationCodeUpdateOne) SetNillableApplication(s *string) *AuthorizationCodeUpdateOne {
	if s != nil {
		acuo.SetApplication(*s)
	}
	return acuo
}

// SetCodeChallenge sets the "code_challenge" field.
func (acuo *AuthorizationCodeUpdateOne) SetCodeChallenge(s string) *AuthorizationCodeUpdateOne {
	acuo.mutation.SetCodeChallenge(s)
	return acuo
}

// SetNillableCodeChallenge sets the "code_challenge" field if the given value is not nil.
func (acuo *AuthorizationCodeUpdateOne) SetNillableCodeChallenge(s *string) *AuthorizationCodeUpdateOne {
	if s != nil {
		acuo.SetCodeChallenge(*s)
	}
	return acuo
}

// SetCodeChallengeMethod sets the "code_challenge_method" field.
func (acuo *AuthorizationCodeUpdateOne) SetCodeChallengeMethod(s string) *AuthorizationCodeUpdateOne {
	acuo.mutation.SetCodeChallengeMethod(s)
	return acuo
}

// SetNillableCodeChallengeMethod sets the "code_challenge_method" field if the given value is not nil.
func (acuo *AuthorizationCodeUpdateOne) SetNillableCodeChallengeMethod(s *string) *AuthorizationCodeUpdateOne {
	if s != nil {
		acuo.SetCodeChallengeMethod(*s)
	}
	return acuo
}

// SetCreatedAt sets the "created_at" field.
func (acuo *AuthorizationCodeUpdateOne) SetCreatedAt(t time.Time) *AuthorizationCodeUpdateOne {
	acuo.mutation.SetCreatedAt(t)
	return acuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (acuo *AuthorizationCodeUpdateOne) SetNillableCreatedAt(t *time.Time) *AuthorizationCodeUpdateOne {
	if t != nil {
		acuo.SetCreatedAt(*t)
	}
	return acuo
}

// SetAuthTime sets the "auth_time" field.
func (acuo *AuthorizationCodeUpdateOne) SetAuthTime(t time.Time) *AuthorizationCodeUpdateOne {
	acuo.mutation.SetAuthTime(t)
	return acuo
}

// SetNillableAuthTime sets the "auth_time" field if the given value is not nil.
func (acuo *AuthorizationCodeUpdateOne) SetNillableAuthTime(t *time.Time) *AuthorizationCodeUpdateOne {
	if t != nil {
		acuo.SetAuthTime(*t)
	}
	return acuo
}

// SetRedirectURI sets the "redirect_uri" field.
func (acuo *AuthorizationCodeUpdateOne) SetRedirectURI(s string) *AuthorizationCodeUpdateOne {
	acuo.mutation.SetRedirectURI(s)
	return acuo
}

// SetNillableRedirectURI sets the "redirect_uri" field if the given value is not nil.
func (acuo *AuthorizationCodeUpdateOne) SetNillableRedirectURI(s *string) *AuthorizationCodeUpdateOne {
	if s != nil {
		acuo.SetRedirectURI(*s)
	}
	return acuo
}

// SetNonce sets the "nonce" field.
func (acuo *AuthorizationCodeUpdateOne) SetNonce(s string) *AuthorizationCodeUpdateOne {
	acuo.mutation.SetNonce(s)
	return acuo
}

// SetNillableNonce sets the "nonce" field if the given value is not nil.
func (acuo *AuthorizationCodeUpdateOne) SetNillableNonce(s *string) *AuthorizationCodeUpdateOne {
	if s != nil {
		acuo.SetNonce(*s)
	}
	return acuo
}

// SetService sets the "service" field.
func (acuo *AuthorizationCodeUpdateOne) SetService(s string) *AuthorizationCodeUpdateOne {
	acuo.mutation.SetService(s)
	return acuo
}

// SetNillableService sets the "service" field if the given value is not nil.
func (acuo *AuthorizationCodeUpdateOne) SetNillableService(s *string) *AuthorizationCodeUpdateOne {
	if s != nil {
		acuo.SetService(*s)
	}
	return acuo
}

// SetState sets the "state" field.
func (acuo *AuthorizationCodeUpdateOne) SetState(s string) *AuthorizationCodeUpdateOne {
	acuo.mutation.SetState(s)
	return acuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (acuo *AuthorizationCodeUpdateOne) SetNillableState(s *string) *AuthorizationCodeUpdateOne {
	if s != nil {
		acuo.SetState(*s)
	}
	return acuo
}

// SetSubject sets the "subject" field.
func (acuo *AuthorizationCodeUpdateOne) SetSubject(s string) *AuthorizationCodeUpdateOne {
	acuo.mutation.SetSubject(s)
	return acuo
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (acuo *AuthorizationCodeUpdateOne) SetNillableSubject(s *string) *AuthorizationCodeUpdateOne {
	if s != nil {
		acuo.SetSubject(*s)
	}
	return acuo
}

// SetGrantedScopes sets the "granted_scopes" field.
func (acuo *AuthorizationCodeUpdateOne) SetGrantedScopes(s string) *AuthorizationCodeUpdateOne {
	acuo.mutation.SetGrantedScopes(s)
	return acuo
}

// SetNillableGrantedScopes sets the "granted_scopes" field if the given value is not nil.
func (acuo *AuthorizationCodeUpdateOne) SetNillableGrantedScopes(s *string) *AuthorizationCodeUpdateOne {
	if s != nil {
		acuo.SetGrantedScopes(*s)
	}
	return acuo
}

// Mutation returns the AuthorizationCodeMutation object of the builder.
func (acuo *AuthorizationCodeUpdateOne) Mutation() *AuthorizationCodeMutation {
	return acuo.mutation
}

// Where appends a list predicates to the AuthorizationCodeUpdate builder.
func (acuo *AuthorizationCodeUpdateOne) Where(ps ...predicate.AuthorizationCode) *AuthorizationCodeUpdateOne {
	acuo.mutation.Where(ps...)
	return acuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (acuo *AuthorizationCodeUpdateOne) Select(field string, fields ...string) *AuthorizationCodeUpdateOne {
	acuo.fields = append([]string{field}, fields...)
	return acuo
}

// Save executes the query and returns the updated AuthorizationCode entity.
func (acuo *AuthorizationCodeUpdateOne) Save(ctx context.Context) (*AuthorizationCode, error) {
	return withHooks(ctx, acuo.sqlSave, acuo.mutation, acuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (acuo *AuthorizationCodeUpdateOne) SaveX(ctx context.Context) *AuthorizationCode {
	node, err := acuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (acuo *AuthorizationCodeUpdateOne) Exec(ctx context.Context) error {
	_, err := acuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acuo *AuthorizationCodeUpdateOne) ExecX(ctx context.Context) {
	if err := acuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (acuo *AuthorizationCodeUpdateOne) sqlSave(ctx context.Context) (_node *AuthorizationCode, err error) {
	_spec := sqlgraph.NewUpdateSpec(authorizationcode.Table, authorizationcode.Columns, sqlgraph.NewFieldSpec(authorizationcode.FieldID, field.TypeString))
	id, ok := acuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AuthorizationCode.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := acuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, authorizationcode.FieldID)
		for _, f := range fields {
			if !authorizationcode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != authorizationcode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := acuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acuo.mutation.Application(); ok {
		_spec.SetField(authorizationcode.FieldApplication, field.TypeString, value)
	}
	if value, ok := acuo.mutation.CodeChallenge(); ok {
		_spec.SetField(authorizationcode.FieldCodeChallenge, field.TypeString, value)
	}
	if value, ok := acuo.mutation.CodeChallengeMethod(); ok {
		_spec.SetField(authorizationcode.FieldCodeChallengeMethod, field.TypeString, value)
	}
	if value, ok := acuo.mutation.CreatedAt(); ok {
		_spec.SetField(authorizationcode.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := acuo.mutation.AuthTime(); ok {
		_spec.SetField(authorizationcode.FieldAuthTime, field.TypeTime, value)
	}
	if value, ok := acuo.mutation.RedirectURI(); ok {
		_spec.SetField(authorizationcode.FieldRedirectURI, field.TypeString, value)
	}
	if value, ok := acuo.mutation.Nonce(); ok {
		_spec.SetField(authorizationcode.FieldNonce, field.TypeString, value)
	}
	if value, ok := acuo.mutation.Service(); ok {
		_spec.SetField(authorizationcode.FieldService, field.TypeString, value)
	}
	if value, ok := acuo.mutation.State(); ok {
		_spec.SetField(authorizationcode.FieldState, field.TypeString, value)
	}
	if value, ok := acuo.mutation.Subject(); ok {
		_spec.SetField(authorizationcode.FieldSubject, field.TypeString, value)
	}
	if value, ok := acuo.mutation.GrantedScopes(); ok {
		_spec.SetField(authorizationcode.FieldGrantedScopes, field.TypeString, value)
	}
	_node = &AuthorizationCode{config: acuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, acuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authorizationcode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	acuo.mutation.done = true
	return _node, nil
}
