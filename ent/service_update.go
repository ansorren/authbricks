// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"go.authbricks.com/bricks/ent/application"
	"go.authbricks.com/bricks/ent/predicate"
	"go.authbricks.com/bricks/ent/service"
	"go.authbricks.com/bricks/ent/serviceconfig"
)

// ServiceUpdate is the builder for updating Service entities.
type ServiceUpdate struct {
	config
	hooks    []Hook
	mutation *ServiceMutation
}

// Where appends a list predicates to the ServiceUpdate builder.
func (su *ServiceUpdate) Where(ps ...predicate.Service) *ServiceUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *ServiceUpdate) SetName(s string) *ServiceUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *ServiceUpdate) SetNillableName(s *string) *ServiceUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// SetIssuer sets the "issuer" field.
func (su *ServiceUpdate) SetIssuer(s string) *ServiceUpdate {
	su.mutation.SetIssuer(s)
	return su
}

// SetNillableIssuer sets the "issuer" field if the given value is not nil.
func (su *ServiceUpdate) SetNillableIssuer(s *string) *ServiceUpdate {
	if s != nil {
		su.SetIssuer(*s)
	}
	return su
}

// SetScopes sets the "scopes" field.
func (su *ServiceUpdate) SetScopes(s []string) *ServiceUpdate {
	su.mutation.SetScopes(s)
	return su
}

// AppendScopes appends s to the "scopes" field.
func (su *ServiceUpdate) AppendScopes(s []string) *ServiceUpdate {
	su.mutation.AppendScopes(s)
	return su
}

// SetServiceConfigID sets the "service_config" edge to the ServiceConfig entity by ID.
func (su *ServiceUpdate) SetServiceConfigID(id string) *ServiceUpdate {
	su.mutation.SetServiceConfigID(id)
	return su
}

// SetNillableServiceConfigID sets the "service_config" edge to the ServiceConfig entity by ID if the given value is not nil.
func (su *ServiceUpdate) SetNillableServiceConfigID(id *string) *ServiceUpdate {
	if id != nil {
		su = su.SetServiceConfigID(*id)
	}
	return su
}

// SetServiceConfig sets the "service_config" edge to the ServiceConfig entity.
func (su *ServiceUpdate) SetServiceConfig(s *ServiceConfig) *ServiceUpdate {
	return su.SetServiceConfigID(s.ID)
}

// AddApplicationIDs adds the "applications" edge to the Application entity by IDs.
func (su *ServiceUpdate) AddApplicationIDs(ids ...string) *ServiceUpdate {
	su.mutation.AddApplicationIDs(ids...)
	return su
}

// AddApplications adds the "applications" edges to the Application entity.
func (su *ServiceUpdate) AddApplications(a ...*Application) *ServiceUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return su.AddApplicationIDs(ids...)
}

// Mutation returns the ServiceMutation object of the builder.
func (su *ServiceUpdate) Mutation() *ServiceMutation {
	return su.mutation
}

// ClearServiceConfig clears the "service_config" edge to the ServiceConfig entity.
func (su *ServiceUpdate) ClearServiceConfig() *ServiceUpdate {
	su.mutation.ClearServiceConfig()
	return su
}

// ClearApplications clears all "applications" edges to the Application entity.
func (su *ServiceUpdate) ClearApplications() *ServiceUpdate {
	su.mutation.ClearApplications()
	return su
}

// RemoveApplicationIDs removes the "applications" edge to Application entities by IDs.
func (su *ServiceUpdate) RemoveApplicationIDs(ids ...string) *ServiceUpdate {
	su.mutation.RemoveApplicationIDs(ids...)
	return su
}

// RemoveApplications removes "applications" edges to Application entities.
func (su *ServiceUpdate) RemoveApplications(a ...*Application) *ServiceUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return su.RemoveApplicationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ServiceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ServiceUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ServiceUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ServiceUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *ServiceUpdate) check() error {
	if v, ok := su.mutation.Name(); ok {
		if err := service.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Service.name": %w`, err)}
		}
	}
	if v, ok := su.mutation.Issuer(); ok {
		if err := service.IssuerValidator(v); err != nil {
			return &ValidationError{Name: "issuer", err: fmt.Errorf(`ent: validator failed for field "Service.issuer": %w`, err)}
		}
	}
	return nil
}

func (su *ServiceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(service.Table, service.Columns, sqlgraph.NewFieldSpec(service.FieldID, field.TypeString))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(service.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Issuer(); ok {
		_spec.SetField(service.FieldIssuer, field.TypeString, value)
	}
	if value, ok := su.mutation.Scopes(); ok {
		_spec.SetField(service.FieldScopes, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, service.FieldScopes, value)
		})
	}
	if su.mutation.ServiceConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   service.ServiceConfigTable,
			Columns: []string{service.ServiceConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceconfig.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ServiceConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   service.ServiceConfigTable,
			Columns: []string{service.ServiceConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceconfig.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   service.ApplicationsTable,
			Columns: []string{service.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedApplicationsIDs(); len(nodes) > 0 && !su.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   service.ApplicationsTable,
			Columns: []string{service.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   service.ApplicationsTable,
			Columns: []string{service.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{service.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ServiceUpdateOne is the builder for updating a single Service entity.
type ServiceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServiceMutation
}

// SetName sets the "name" field.
func (suo *ServiceUpdateOne) SetName(s string) *ServiceUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableName(s *string) *ServiceUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// SetIssuer sets the "issuer" field.
func (suo *ServiceUpdateOne) SetIssuer(s string) *ServiceUpdateOne {
	suo.mutation.SetIssuer(s)
	return suo
}

// SetNillableIssuer sets the "issuer" field if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableIssuer(s *string) *ServiceUpdateOne {
	if s != nil {
		suo.SetIssuer(*s)
	}
	return suo
}

// SetScopes sets the "scopes" field.
func (suo *ServiceUpdateOne) SetScopes(s []string) *ServiceUpdateOne {
	suo.mutation.SetScopes(s)
	return suo
}

// AppendScopes appends s to the "scopes" field.
func (suo *ServiceUpdateOne) AppendScopes(s []string) *ServiceUpdateOne {
	suo.mutation.AppendScopes(s)
	return suo
}

// SetServiceConfigID sets the "service_config" edge to the ServiceConfig entity by ID.
func (suo *ServiceUpdateOne) SetServiceConfigID(id string) *ServiceUpdateOne {
	suo.mutation.SetServiceConfigID(id)
	return suo
}

// SetNillableServiceConfigID sets the "service_config" edge to the ServiceConfig entity by ID if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableServiceConfigID(id *string) *ServiceUpdateOne {
	if id != nil {
		suo = suo.SetServiceConfigID(*id)
	}
	return suo
}

// SetServiceConfig sets the "service_config" edge to the ServiceConfig entity.
func (suo *ServiceUpdateOne) SetServiceConfig(s *ServiceConfig) *ServiceUpdateOne {
	return suo.SetServiceConfigID(s.ID)
}

// AddApplicationIDs adds the "applications" edge to the Application entity by IDs.
func (suo *ServiceUpdateOne) AddApplicationIDs(ids ...string) *ServiceUpdateOne {
	suo.mutation.AddApplicationIDs(ids...)
	return suo
}

// AddApplications adds the "applications" edges to the Application entity.
func (suo *ServiceUpdateOne) AddApplications(a ...*Application) *ServiceUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suo.AddApplicationIDs(ids...)
}

// Mutation returns the ServiceMutation object of the builder.
func (suo *ServiceUpdateOne) Mutation() *ServiceMutation {
	return suo.mutation
}

// ClearServiceConfig clears the "service_config" edge to the ServiceConfig entity.
func (suo *ServiceUpdateOne) ClearServiceConfig() *ServiceUpdateOne {
	suo.mutation.ClearServiceConfig()
	return suo
}

// ClearApplications clears all "applications" edges to the Application entity.
func (suo *ServiceUpdateOne) ClearApplications() *ServiceUpdateOne {
	suo.mutation.ClearApplications()
	return suo
}

// RemoveApplicationIDs removes the "applications" edge to Application entities by IDs.
func (suo *ServiceUpdateOne) RemoveApplicationIDs(ids ...string) *ServiceUpdateOne {
	suo.mutation.RemoveApplicationIDs(ids...)
	return suo
}

// RemoveApplications removes "applications" edges to Application entities.
func (suo *ServiceUpdateOne) RemoveApplications(a ...*Application) *ServiceUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suo.RemoveApplicationIDs(ids...)
}

// Where appends a list predicates to the ServiceUpdate builder.
func (suo *ServiceUpdateOne) Where(ps ...predicate.Service) *ServiceUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ServiceUpdateOne) Select(field string, fields ...string) *ServiceUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Service entity.
func (suo *ServiceUpdateOne) Save(ctx context.Context) (*Service, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ServiceUpdateOne) SaveX(ctx context.Context) *Service {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ServiceUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ServiceUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *ServiceUpdateOne) check() error {
	if v, ok := suo.mutation.Name(); ok {
		if err := service.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Service.name": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Issuer(); ok {
		if err := service.IssuerValidator(v); err != nil {
			return &ValidationError{Name: "issuer", err: fmt.Errorf(`ent: validator failed for field "Service.issuer": %w`, err)}
		}
	}
	return nil
}

func (suo *ServiceUpdateOne) sqlSave(ctx context.Context) (_node *Service, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(service.Table, service.Columns, sqlgraph.NewFieldSpec(service.FieldID, field.TypeString))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Service.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, service.FieldID)
		for _, f := range fields {
			if !service.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != service.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(service.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Issuer(); ok {
		_spec.SetField(service.FieldIssuer, field.TypeString, value)
	}
	if value, ok := suo.mutation.Scopes(); ok {
		_spec.SetField(service.FieldScopes, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, service.FieldScopes, value)
		})
	}
	if suo.mutation.ServiceConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   service.ServiceConfigTable,
			Columns: []string{service.ServiceConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceconfig.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ServiceConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   service.ServiceConfigTable,
			Columns: []string{service.ServiceConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceconfig.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   service.ApplicationsTable,
			Columns: []string{service.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedApplicationsIDs(); len(nodes) > 0 && !suo.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   service.ApplicationsTable,
			Columns: []string{service.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   service.ApplicationsTable,
			Columns: []string{service.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Service{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{service.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
