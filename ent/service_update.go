// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"go.authbricks.com/bricks/ent/application"
	"go.authbricks.com/bricks/ent/keyset"
	"go.authbricks.com/bricks/ent/predicate"
	"go.authbricks.com/bricks/ent/service"
	"go.authbricks.com/bricks/ent/serviceauthorizationendpointconfig"
	"go.authbricks.com/bricks/ent/serviceintrospectionendpointconfig"
	"go.authbricks.com/bricks/ent/servicetokenendpointconfig"
	"go.authbricks.com/bricks/ent/serviceuserinfoendpointconfig"
)

// ServiceUpdate is the builder for updating Service entities.
type ServiceUpdate struct {
	config
	hooks    []Hook
	mutation *ServiceMutation
}

// Where appends a list predicates to the ServiceUpdate builder.
func (su *ServiceUpdate) Where(ps ...predicate.Service) *ServiceUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *ServiceUpdate) SetName(s string) *ServiceUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *ServiceUpdate) SetNillableName(s *string) *ServiceUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// SetIssuer sets the "issuer" field.
func (su *ServiceUpdate) SetIssuer(s string) *ServiceUpdate {
	su.mutation.SetIssuer(s)
	return su
}

// SetNillableIssuer sets the "issuer" field if the given value is not nil.
func (su *ServiceUpdate) SetNillableIssuer(s *string) *ServiceUpdate {
	if s != nil {
		su.SetIssuer(*s)
	}
	return su
}

// SetDescription sets the "description" field.
func (su *ServiceUpdate) SetDescription(s string) *ServiceUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (su *ServiceUpdate) SetNillableDescription(s *string) *ServiceUpdate {
	if s != nil {
		su.SetDescription(*s)
	}
	return su
}

// SetScopes sets the "scopes" field.
func (su *ServiceUpdate) SetScopes(s []string) *ServiceUpdate {
	su.mutation.SetScopes(s)
	return su
}

// AppendScopes appends s to the "scopes" field.
func (su *ServiceUpdate) AppendScopes(s []string) *ServiceUpdate {
	su.mutation.AppendScopes(s)
	return su
}

// SetServiceMetadata sets the "service_metadata" field.
func (su *ServiceUpdate) SetServiceMetadata(s string) *ServiceUpdate {
	su.mutation.SetServiceMetadata(s)
	return su
}

// SetNillableServiceMetadata sets the "service_metadata" field if the given value is not nil.
func (su *ServiceUpdate) SetNillableServiceMetadata(s *string) *ServiceUpdate {
	if s != nil {
		su.SetServiceMetadata(*s)
	}
	return su
}

// SetAllowedClientMetadata sets the "allowed_client_metadata" field.
func (su *ServiceUpdate) SetAllowedClientMetadata(s []string) *ServiceUpdate {
	su.mutation.SetAllowedClientMetadata(s)
	return su
}

// AppendAllowedClientMetadata appends s to the "allowed_client_metadata" field.
func (su *ServiceUpdate) AppendAllowedClientMetadata(s []string) *ServiceUpdate {
	su.mutation.AppendAllowedClientMetadata(s)
	return su
}

// SetGrantTypes sets the "grant_types" field.
func (su *ServiceUpdate) SetGrantTypes(s []string) *ServiceUpdate {
	su.mutation.SetGrantTypes(s)
	return su
}

// AppendGrantTypes appends s to the "grant_types" field.
func (su *ServiceUpdate) AppendGrantTypes(s []string) *ServiceUpdate {
	su.mutation.AppendGrantTypes(s)
	return su
}

// SetResponseTypes sets the "response_types" field.
func (su *ServiceUpdate) SetResponseTypes(s []string) *ServiceUpdate {
	su.mutation.SetResponseTypes(s)
	return su
}

// AppendResponseTypes appends s to the "response_types" field.
func (su *ServiceUpdate) AppendResponseTypes(s []string) *ServiceUpdate {
	su.mutation.AppendResponseTypes(s)
	return su
}

// AddKeySetIDs adds the "key_sets" edge to the KeySet entity by IDs.
func (su *ServiceUpdate) AddKeySetIDs(ids ...string) *ServiceUpdate {
	su.mutation.AddKeySetIDs(ids...)
	return su
}

// AddKeySets adds the "key_sets" edges to the KeySet entity.
func (su *ServiceUpdate) AddKeySets(k ...*KeySet) *ServiceUpdate {
	ids := make([]string, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return su.AddKeySetIDs(ids...)
}

// SetServiceAuthorizationEndpointConfigID sets the "service_authorization_endpoint_config" edge to the ServiceAuthorizationEndpointConfig entity by ID.
func (su *ServiceUpdate) SetServiceAuthorizationEndpointConfigID(id string) *ServiceUpdate {
	su.mutation.SetServiceAuthorizationEndpointConfigID(id)
	return su
}

// SetNillableServiceAuthorizationEndpointConfigID sets the "service_authorization_endpoint_config" edge to the ServiceAuthorizationEndpointConfig entity by ID if the given value is not nil.
func (su *ServiceUpdate) SetNillableServiceAuthorizationEndpointConfigID(id *string) *ServiceUpdate {
	if id != nil {
		su = su.SetServiceAuthorizationEndpointConfigID(*id)
	}
	return su
}

// SetServiceAuthorizationEndpointConfig sets the "service_authorization_endpoint_config" edge to the ServiceAuthorizationEndpointConfig entity.
func (su *ServiceUpdate) SetServiceAuthorizationEndpointConfig(s *ServiceAuthorizationEndpointConfig) *ServiceUpdate {
	return su.SetServiceAuthorizationEndpointConfigID(s.ID)
}

// SetServiceIntrospectionEndpointConfigID sets the "service_introspection_endpoint_config" edge to the ServiceIntrospectionEndpointConfig entity by ID.
func (su *ServiceUpdate) SetServiceIntrospectionEndpointConfigID(id string) *ServiceUpdate {
	su.mutation.SetServiceIntrospectionEndpointConfigID(id)
	return su
}

// SetNillableServiceIntrospectionEndpointConfigID sets the "service_introspection_endpoint_config" edge to the ServiceIntrospectionEndpointConfig entity by ID if the given value is not nil.
func (su *ServiceUpdate) SetNillableServiceIntrospectionEndpointConfigID(id *string) *ServiceUpdate {
	if id != nil {
		su = su.SetServiceIntrospectionEndpointConfigID(*id)
	}
	return su
}

// SetServiceIntrospectionEndpointConfig sets the "service_introspection_endpoint_config" edge to the ServiceIntrospectionEndpointConfig entity.
func (su *ServiceUpdate) SetServiceIntrospectionEndpointConfig(s *ServiceIntrospectionEndpointConfig) *ServiceUpdate {
	return su.SetServiceIntrospectionEndpointConfigID(s.ID)
}

// SetServiceTokenEndpointConfigID sets the "service_token_endpoint_config" edge to the ServiceTokenEndpointConfig entity by ID.
func (su *ServiceUpdate) SetServiceTokenEndpointConfigID(id string) *ServiceUpdate {
	su.mutation.SetServiceTokenEndpointConfigID(id)
	return su
}

// SetNillableServiceTokenEndpointConfigID sets the "service_token_endpoint_config" edge to the ServiceTokenEndpointConfig entity by ID if the given value is not nil.
func (su *ServiceUpdate) SetNillableServiceTokenEndpointConfigID(id *string) *ServiceUpdate {
	if id != nil {
		su = su.SetServiceTokenEndpointConfigID(*id)
	}
	return su
}

// SetServiceTokenEndpointConfig sets the "service_token_endpoint_config" edge to the ServiceTokenEndpointConfig entity.
func (su *ServiceUpdate) SetServiceTokenEndpointConfig(s *ServiceTokenEndpointConfig) *ServiceUpdate {
	return su.SetServiceTokenEndpointConfigID(s.ID)
}

// SetServiceUserInfoEndpointConfigID sets the "service_user_info_endpoint_config" edge to the ServiceUserInfoEndpointConfig entity by ID.
func (su *ServiceUpdate) SetServiceUserInfoEndpointConfigID(id string) *ServiceUpdate {
	su.mutation.SetServiceUserInfoEndpointConfigID(id)
	return su
}

// SetNillableServiceUserInfoEndpointConfigID sets the "service_user_info_endpoint_config" edge to the ServiceUserInfoEndpointConfig entity by ID if the given value is not nil.
func (su *ServiceUpdate) SetNillableServiceUserInfoEndpointConfigID(id *string) *ServiceUpdate {
	if id != nil {
		su = su.SetServiceUserInfoEndpointConfigID(*id)
	}
	return su
}

// SetServiceUserInfoEndpointConfig sets the "service_user_info_endpoint_config" edge to the ServiceUserInfoEndpointConfig entity.
func (su *ServiceUpdate) SetServiceUserInfoEndpointConfig(s *ServiceUserInfoEndpointConfig) *ServiceUpdate {
	return su.SetServiceUserInfoEndpointConfigID(s.ID)
}

// AddApplicationIDs adds the "applications" edge to the Application entity by IDs.
func (su *ServiceUpdate) AddApplicationIDs(ids ...string) *ServiceUpdate {
	su.mutation.AddApplicationIDs(ids...)
	return su
}

// AddApplications adds the "applications" edges to the Application entity.
func (su *ServiceUpdate) AddApplications(a ...*Application) *ServiceUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return su.AddApplicationIDs(ids...)
}

// Mutation returns the ServiceMutation object of the builder.
func (su *ServiceUpdate) Mutation() *ServiceMutation {
	return su.mutation
}

// ClearKeySets clears all "key_sets" edges to the KeySet entity.
func (su *ServiceUpdate) ClearKeySets() *ServiceUpdate {
	su.mutation.ClearKeySets()
	return su
}

// RemoveKeySetIDs removes the "key_sets" edge to KeySet entities by IDs.
func (su *ServiceUpdate) RemoveKeySetIDs(ids ...string) *ServiceUpdate {
	su.mutation.RemoveKeySetIDs(ids...)
	return su
}

// RemoveKeySets removes "key_sets" edges to KeySet entities.
func (su *ServiceUpdate) RemoveKeySets(k ...*KeySet) *ServiceUpdate {
	ids := make([]string, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return su.RemoveKeySetIDs(ids...)
}

// ClearServiceAuthorizationEndpointConfig clears the "service_authorization_endpoint_config" edge to the ServiceAuthorizationEndpointConfig entity.
func (su *ServiceUpdate) ClearServiceAuthorizationEndpointConfig() *ServiceUpdate {
	su.mutation.ClearServiceAuthorizationEndpointConfig()
	return su
}

// ClearServiceIntrospectionEndpointConfig clears the "service_introspection_endpoint_config" edge to the ServiceIntrospectionEndpointConfig entity.
func (su *ServiceUpdate) ClearServiceIntrospectionEndpointConfig() *ServiceUpdate {
	su.mutation.ClearServiceIntrospectionEndpointConfig()
	return su
}

// ClearServiceTokenEndpointConfig clears the "service_token_endpoint_config" edge to the ServiceTokenEndpointConfig entity.
func (su *ServiceUpdate) ClearServiceTokenEndpointConfig() *ServiceUpdate {
	su.mutation.ClearServiceTokenEndpointConfig()
	return su
}

// ClearServiceUserInfoEndpointConfig clears the "service_user_info_endpoint_config" edge to the ServiceUserInfoEndpointConfig entity.
func (su *ServiceUpdate) ClearServiceUserInfoEndpointConfig() *ServiceUpdate {
	su.mutation.ClearServiceUserInfoEndpointConfig()
	return su
}

// ClearApplications clears all "applications" edges to the Application entity.
func (su *ServiceUpdate) ClearApplications() *ServiceUpdate {
	su.mutation.ClearApplications()
	return su
}

// RemoveApplicationIDs removes the "applications" edge to Application entities by IDs.
func (su *ServiceUpdate) RemoveApplicationIDs(ids ...string) *ServiceUpdate {
	su.mutation.RemoveApplicationIDs(ids...)
	return su
}

// RemoveApplications removes "applications" edges to Application entities.
func (su *ServiceUpdate) RemoveApplications(a ...*Application) *ServiceUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return su.RemoveApplicationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ServiceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ServiceUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ServiceUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ServiceUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *ServiceUpdate) check() error {
	if v, ok := su.mutation.Name(); ok {
		if err := service.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Service.name": %w`, err)}
		}
	}
	if v, ok := su.mutation.Issuer(); ok {
		if err := service.IssuerValidator(v); err != nil {
			return &ValidationError{Name: "issuer", err: fmt.Errorf(`ent: validator failed for field "Service.issuer": %w`, err)}
		}
	}
	return nil
}

func (su *ServiceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(service.Table, service.Columns, sqlgraph.NewFieldSpec(service.FieldID, field.TypeString))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(service.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Issuer(); ok {
		_spec.SetField(service.FieldIssuer, field.TypeString, value)
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.SetField(service.FieldDescription, field.TypeString, value)
	}
	if value, ok := su.mutation.Scopes(); ok {
		_spec.SetField(service.FieldScopes, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, service.FieldScopes, value)
		})
	}
	if value, ok := su.mutation.ServiceMetadata(); ok {
		_spec.SetField(service.FieldServiceMetadata, field.TypeString, value)
	}
	if value, ok := su.mutation.AllowedClientMetadata(); ok {
		_spec.SetField(service.FieldAllowedClientMetadata, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedAllowedClientMetadata(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, service.FieldAllowedClientMetadata, value)
		})
	}
	if value, ok := su.mutation.GrantTypes(); ok {
		_spec.SetField(service.FieldGrantTypes, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedGrantTypes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, service.FieldGrantTypes, value)
		})
	}
	if value, ok := su.mutation.ResponseTypes(); ok {
		_spec.SetField(service.FieldResponseTypes, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedResponseTypes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, service.FieldResponseTypes, value)
		})
	}
	if su.mutation.KeySetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   service.KeySetsTable,
			Columns: []string{service.KeySetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(keyset.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedKeySetsIDs(); len(nodes) > 0 && !su.mutation.KeySetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   service.KeySetsTable,
			Columns: []string{service.KeySetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(keyset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.KeySetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   service.KeySetsTable,
			Columns: []string{service.KeySetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(keyset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ServiceAuthorizationEndpointConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   service.ServiceAuthorizationEndpointConfigTable,
			Columns: []string{service.ServiceAuthorizationEndpointConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceauthorizationendpointconfig.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ServiceAuthorizationEndpointConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   service.ServiceAuthorizationEndpointConfigTable,
			Columns: []string{service.ServiceAuthorizationEndpointConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceauthorizationendpointconfig.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ServiceIntrospectionEndpointConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   service.ServiceIntrospectionEndpointConfigTable,
			Columns: []string{service.ServiceIntrospectionEndpointConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceintrospectionendpointconfig.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ServiceIntrospectionEndpointConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   service.ServiceIntrospectionEndpointConfigTable,
			Columns: []string{service.ServiceIntrospectionEndpointConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceintrospectionendpointconfig.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ServiceTokenEndpointConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   service.ServiceTokenEndpointConfigTable,
			Columns: []string{service.ServiceTokenEndpointConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicetokenendpointconfig.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ServiceTokenEndpointConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   service.ServiceTokenEndpointConfigTable,
			Columns: []string{service.ServiceTokenEndpointConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicetokenendpointconfig.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ServiceUserInfoEndpointConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   service.ServiceUserInfoEndpointConfigTable,
			Columns: []string{service.ServiceUserInfoEndpointConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceuserinfoendpointconfig.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ServiceUserInfoEndpointConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   service.ServiceUserInfoEndpointConfigTable,
			Columns: []string{service.ServiceUserInfoEndpointConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceuserinfoendpointconfig.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   service.ApplicationsTable,
			Columns: []string{service.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedApplicationsIDs(); len(nodes) > 0 && !su.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   service.ApplicationsTable,
			Columns: []string{service.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   service.ApplicationsTable,
			Columns: []string{service.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{service.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ServiceUpdateOne is the builder for updating a single Service entity.
type ServiceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServiceMutation
}

// SetName sets the "name" field.
func (suo *ServiceUpdateOne) SetName(s string) *ServiceUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableName(s *string) *ServiceUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// SetIssuer sets the "issuer" field.
func (suo *ServiceUpdateOne) SetIssuer(s string) *ServiceUpdateOne {
	suo.mutation.SetIssuer(s)
	return suo
}

// SetNillableIssuer sets the "issuer" field if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableIssuer(s *string) *ServiceUpdateOne {
	if s != nil {
		suo.SetIssuer(*s)
	}
	return suo
}

// SetDescription sets the "description" field.
func (suo *ServiceUpdateOne) SetDescription(s string) *ServiceUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableDescription(s *string) *ServiceUpdateOne {
	if s != nil {
		suo.SetDescription(*s)
	}
	return suo
}

// SetScopes sets the "scopes" field.
func (suo *ServiceUpdateOne) SetScopes(s []string) *ServiceUpdateOne {
	suo.mutation.SetScopes(s)
	return suo
}

// AppendScopes appends s to the "scopes" field.
func (suo *ServiceUpdateOne) AppendScopes(s []string) *ServiceUpdateOne {
	suo.mutation.AppendScopes(s)
	return suo
}

// SetServiceMetadata sets the "service_metadata" field.
func (suo *ServiceUpdateOne) SetServiceMetadata(s string) *ServiceUpdateOne {
	suo.mutation.SetServiceMetadata(s)
	return suo
}

// SetNillableServiceMetadata sets the "service_metadata" field if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableServiceMetadata(s *string) *ServiceUpdateOne {
	if s != nil {
		suo.SetServiceMetadata(*s)
	}
	return suo
}

// SetAllowedClientMetadata sets the "allowed_client_metadata" field.
func (suo *ServiceUpdateOne) SetAllowedClientMetadata(s []string) *ServiceUpdateOne {
	suo.mutation.SetAllowedClientMetadata(s)
	return suo
}

// AppendAllowedClientMetadata appends s to the "allowed_client_metadata" field.
func (suo *ServiceUpdateOne) AppendAllowedClientMetadata(s []string) *ServiceUpdateOne {
	suo.mutation.AppendAllowedClientMetadata(s)
	return suo
}

// SetGrantTypes sets the "grant_types" field.
func (suo *ServiceUpdateOne) SetGrantTypes(s []string) *ServiceUpdateOne {
	suo.mutation.SetGrantTypes(s)
	return suo
}

// AppendGrantTypes appends s to the "grant_types" field.
func (suo *ServiceUpdateOne) AppendGrantTypes(s []string) *ServiceUpdateOne {
	suo.mutation.AppendGrantTypes(s)
	return suo
}

// SetResponseTypes sets the "response_types" field.
func (suo *ServiceUpdateOne) SetResponseTypes(s []string) *ServiceUpdateOne {
	suo.mutation.SetResponseTypes(s)
	return suo
}

// AppendResponseTypes appends s to the "response_types" field.
func (suo *ServiceUpdateOne) AppendResponseTypes(s []string) *ServiceUpdateOne {
	suo.mutation.AppendResponseTypes(s)
	return suo
}

// AddKeySetIDs adds the "key_sets" edge to the KeySet entity by IDs.
func (suo *ServiceUpdateOne) AddKeySetIDs(ids ...string) *ServiceUpdateOne {
	suo.mutation.AddKeySetIDs(ids...)
	return suo
}

// AddKeySets adds the "key_sets" edges to the KeySet entity.
func (suo *ServiceUpdateOne) AddKeySets(k ...*KeySet) *ServiceUpdateOne {
	ids := make([]string, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return suo.AddKeySetIDs(ids...)
}

// SetServiceAuthorizationEndpointConfigID sets the "service_authorization_endpoint_config" edge to the ServiceAuthorizationEndpointConfig entity by ID.
func (suo *ServiceUpdateOne) SetServiceAuthorizationEndpointConfigID(id string) *ServiceUpdateOne {
	suo.mutation.SetServiceAuthorizationEndpointConfigID(id)
	return suo
}

// SetNillableServiceAuthorizationEndpointConfigID sets the "service_authorization_endpoint_config" edge to the ServiceAuthorizationEndpointConfig entity by ID if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableServiceAuthorizationEndpointConfigID(id *string) *ServiceUpdateOne {
	if id != nil {
		suo = suo.SetServiceAuthorizationEndpointConfigID(*id)
	}
	return suo
}

// SetServiceAuthorizationEndpointConfig sets the "service_authorization_endpoint_config" edge to the ServiceAuthorizationEndpointConfig entity.
func (suo *ServiceUpdateOne) SetServiceAuthorizationEndpointConfig(s *ServiceAuthorizationEndpointConfig) *ServiceUpdateOne {
	return suo.SetServiceAuthorizationEndpointConfigID(s.ID)
}

// SetServiceIntrospectionEndpointConfigID sets the "service_introspection_endpoint_config" edge to the ServiceIntrospectionEndpointConfig entity by ID.
func (suo *ServiceUpdateOne) SetServiceIntrospectionEndpointConfigID(id string) *ServiceUpdateOne {
	suo.mutation.SetServiceIntrospectionEndpointConfigID(id)
	return suo
}

// SetNillableServiceIntrospectionEndpointConfigID sets the "service_introspection_endpoint_config" edge to the ServiceIntrospectionEndpointConfig entity by ID if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableServiceIntrospectionEndpointConfigID(id *string) *ServiceUpdateOne {
	if id != nil {
		suo = suo.SetServiceIntrospectionEndpointConfigID(*id)
	}
	return suo
}

// SetServiceIntrospectionEndpointConfig sets the "service_introspection_endpoint_config" edge to the ServiceIntrospectionEndpointConfig entity.
func (suo *ServiceUpdateOne) SetServiceIntrospectionEndpointConfig(s *ServiceIntrospectionEndpointConfig) *ServiceUpdateOne {
	return suo.SetServiceIntrospectionEndpointConfigID(s.ID)
}

// SetServiceTokenEndpointConfigID sets the "service_token_endpoint_config" edge to the ServiceTokenEndpointConfig entity by ID.
func (suo *ServiceUpdateOne) SetServiceTokenEndpointConfigID(id string) *ServiceUpdateOne {
	suo.mutation.SetServiceTokenEndpointConfigID(id)
	return suo
}

// SetNillableServiceTokenEndpointConfigID sets the "service_token_endpoint_config" edge to the ServiceTokenEndpointConfig entity by ID if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableServiceTokenEndpointConfigID(id *string) *ServiceUpdateOne {
	if id != nil {
		suo = suo.SetServiceTokenEndpointConfigID(*id)
	}
	return suo
}

// SetServiceTokenEndpointConfig sets the "service_token_endpoint_config" edge to the ServiceTokenEndpointConfig entity.
func (suo *ServiceUpdateOne) SetServiceTokenEndpointConfig(s *ServiceTokenEndpointConfig) *ServiceUpdateOne {
	return suo.SetServiceTokenEndpointConfigID(s.ID)
}

// SetServiceUserInfoEndpointConfigID sets the "service_user_info_endpoint_config" edge to the ServiceUserInfoEndpointConfig entity by ID.
func (suo *ServiceUpdateOne) SetServiceUserInfoEndpointConfigID(id string) *ServiceUpdateOne {
	suo.mutation.SetServiceUserInfoEndpointConfigID(id)
	return suo
}

// SetNillableServiceUserInfoEndpointConfigID sets the "service_user_info_endpoint_config" edge to the ServiceUserInfoEndpointConfig entity by ID if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableServiceUserInfoEndpointConfigID(id *string) *ServiceUpdateOne {
	if id != nil {
		suo = suo.SetServiceUserInfoEndpointConfigID(*id)
	}
	return suo
}

// SetServiceUserInfoEndpointConfig sets the "service_user_info_endpoint_config" edge to the ServiceUserInfoEndpointConfig entity.
func (suo *ServiceUpdateOne) SetServiceUserInfoEndpointConfig(s *ServiceUserInfoEndpointConfig) *ServiceUpdateOne {
	return suo.SetServiceUserInfoEndpointConfigID(s.ID)
}

// AddApplicationIDs adds the "applications" edge to the Application entity by IDs.
func (suo *ServiceUpdateOne) AddApplicationIDs(ids ...string) *ServiceUpdateOne {
	suo.mutation.AddApplicationIDs(ids...)
	return suo
}

// AddApplications adds the "applications" edges to the Application entity.
func (suo *ServiceUpdateOne) AddApplications(a ...*Application) *ServiceUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suo.AddApplicationIDs(ids...)
}

// Mutation returns the ServiceMutation object of the builder.
func (suo *ServiceUpdateOne) Mutation() *ServiceMutation {
	return suo.mutation
}

// ClearKeySets clears all "key_sets" edges to the KeySet entity.
func (suo *ServiceUpdateOne) ClearKeySets() *ServiceUpdateOne {
	suo.mutation.ClearKeySets()
	return suo
}

// RemoveKeySetIDs removes the "key_sets" edge to KeySet entities by IDs.
func (suo *ServiceUpdateOne) RemoveKeySetIDs(ids ...string) *ServiceUpdateOne {
	suo.mutation.RemoveKeySetIDs(ids...)
	return suo
}

// RemoveKeySets removes "key_sets" edges to KeySet entities.
func (suo *ServiceUpdateOne) RemoveKeySets(k ...*KeySet) *ServiceUpdateOne {
	ids := make([]string, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return suo.RemoveKeySetIDs(ids...)
}

// ClearServiceAuthorizationEndpointConfig clears the "service_authorization_endpoint_config" edge to the ServiceAuthorizationEndpointConfig entity.
func (suo *ServiceUpdateOne) ClearServiceAuthorizationEndpointConfig() *ServiceUpdateOne {
	suo.mutation.ClearServiceAuthorizationEndpointConfig()
	return suo
}

// ClearServiceIntrospectionEndpointConfig clears the "service_introspection_endpoint_config" edge to the ServiceIntrospectionEndpointConfig entity.
func (suo *ServiceUpdateOne) ClearServiceIntrospectionEndpointConfig() *ServiceUpdateOne {
	suo.mutation.ClearServiceIntrospectionEndpointConfig()
	return suo
}

// ClearServiceTokenEndpointConfig clears the "service_token_endpoint_config" edge to the ServiceTokenEndpointConfig entity.
func (suo *ServiceUpdateOne) ClearServiceTokenEndpointConfig() *ServiceUpdateOne {
	suo.mutation.ClearServiceTokenEndpointConfig()
	return suo
}

// ClearServiceUserInfoEndpointConfig clears the "service_user_info_endpoint_config" edge to the ServiceUserInfoEndpointConfig entity.
func (suo *ServiceUpdateOne) ClearServiceUserInfoEndpointConfig() *ServiceUpdateOne {
	suo.mutation.ClearServiceUserInfoEndpointConfig()
	return suo
}

// ClearApplications clears all "applications" edges to the Application entity.
func (suo *ServiceUpdateOne) ClearApplications() *ServiceUpdateOne {
	suo.mutation.ClearApplications()
	return suo
}

// RemoveApplicationIDs removes the "applications" edge to Application entities by IDs.
func (suo *ServiceUpdateOne) RemoveApplicationIDs(ids ...string) *ServiceUpdateOne {
	suo.mutation.RemoveApplicationIDs(ids...)
	return suo
}

// RemoveApplications removes "applications" edges to Application entities.
func (suo *ServiceUpdateOne) RemoveApplications(a ...*Application) *ServiceUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suo.RemoveApplicationIDs(ids...)
}

// Where appends a list predicates to the ServiceUpdate builder.
func (suo *ServiceUpdateOne) Where(ps ...predicate.Service) *ServiceUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ServiceUpdateOne) Select(field string, fields ...string) *ServiceUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Service entity.
func (suo *ServiceUpdateOne) Save(ctx context.Context) (*Service, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ServiceUpdateOne) SaveX(ctx context.Context) *Service {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ServiceUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ServiceUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *ServiceUpdateOne) check() error {
	if v, ok := suo.mutation.Name(); ok {
		if err := service.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Service.name": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Issuer(); ok {
		if err := service.IssuerValidator(v); err != nil {
			return &ValidationError{Name: "issuer", err: fmt.Errorf(`ent: validator failed for field "Service.issuer": %w`, err)}
		}
	}
	return nil
}

func (suo *ServiceUpdateOne) sqlSave(ctx context.Context) (_node *Service, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(service.Table, service.Columns, sqlgraph.NewFieldSpec(service.FieldID, field.TypeString))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Service.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, service.FieldID)
		for _, f := range fields {
			if !service.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != service.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(service.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Issuer(); ok {
		_spec.SetField(service.FieldIssuer, field.TypeString, value)
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.SetField(service.FieldDescription, field.TypeString, value)
	}
	if value, ok := suo.mutation.Scopes(); ok {
		_spec.SetField(service.FieldScopes, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, service.FieldScopes, value)
		})
	}
	if value, ok := suo.mutation.ServiceMetadata(); ok {
		_spec.SetField(service.FieldServiceMetadata, field.TypeString, value)
	}
	if value, ok := suo.mutation.AllowedClientMetadata(); ok {
		_spec.SetField(service.FieldAllowedClientMetadata, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedAllowedClientMetadata(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, service.FieldAllowedClientMetadata, value)
		})
	}
	if value, ok := suo.mutation.GrantTypes(); ok {
		_spec.SetField(service.FieldGrantTypes, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedGrantTypes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, service.FieldGrantTypes, value)
		})
	}
	if value, ok := suo.mutation.ResponseTypes(); ok {
		_spec.SetField(service.FieldResponseTypes, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedResponseTypes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, service.FieldResponseTypes, value)
		})
	}
	if suo.mutation.KeySetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   service.KeySetsTable,
			Columns: []string{service.KeySetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(keyset.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedKeySetsIDs(); len(nodes) > 0 && !suo.mutation.KeySetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   service.KeySetsTable,
			Columns: []string{service.KeySetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(keyset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.KeySetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   service.KeySetsTable,
			Columns: []string{service.KeySetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(keyset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ServiceAuthorizationEndpointConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   service.ServiceAuthorizationEndpointConfigTable,
			Columns: []string{service.ServiceAuthorizationEndpointConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceauthorizationendpointconfig.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ServiceAuthorizationEndpointConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   service.ServiceAuthorizationEndpointConfigTable,
			Columns: []string{service.ServiceAuthorizationEndpointConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceauthorizationendpointconfig.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ServiceIntrospectionEndpointConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   service.ServiceIntrospectionEndpointConfigTable,
			Columns: []string{service.ServiceIntrospectionEndpointConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceintrospectionendpointconfig.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ServiceIntrospectionEndpointConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   service.ServiceIntrospectionEndpointConfigTable,
			Columns: []string{service.ServiceIntrospectionEndpointConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceintrospectionendpointconfig.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ServiceTokenEndpointConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   service.ServiceTokenEndpointConfigTable,
			Columns: []string{service.ServiceTokenEndpointConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicetokenendpointconfig.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ServiceTokenEndpointConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   service.ServiceTokenEndpointConfigTable,
			Columns: []string{service.ServiceTokenEndpointConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicetokenendpointconfig.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ServiceUserInfoEndpointConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   service.ServiceUserInfoEndpointConfigTable,
			Columns: []string{service.ServiceUserInfoEndpointConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceuserinfoendpointconfig.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ServiceUserInfoEndpointConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   service.ServiceUserInfoEndpointConfigTable,
			Columns: []string{service.ServiceUserInfoEndpointConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceuserinfoendpointconfig.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   service.ApplicationsTable,
			Columns: []string{service.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedApplicationsIDs(); len(nodes) > 0 && !suo.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   service.ApplicationsTable,
			Columns: []string{service.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   service.ApplicationsTable,
			Columns: []string{service.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Service{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{service.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
