// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"go.authbricks.com/bricks/ent/codegrant"
	"go.authbricks.com/bricks/ent/m2mgrant"
	"go.authbricks.com/bricks/ent/oauthclient"
	"go.authbricks.com/bricks/ent/oauthserver"
)

// OAuthClient is the model entity for the OAuthClient schema.
type OAuthClient struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id"`
	// Name holds the value of the "name" field.
	Name string `json:"name"`
	// Public holds the value of the "public" field.
	Public *bool `json:"public"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OAuthClientQuery when eager-loading is set.
	Edges                OAuthClientEdges `json:"edges"`
	oauth_server_clients *int
	selectValues         sql.SelectValues
}

// OAuthClientEdges holds the relations/edges for other nodes in the graph.
type OAuthClientEdges struct {
	// M2mGrants holds the value of the m2m_grants edge.
	M2mGrants *M2MGrant `json:"m2m_grants,omitempty"`
	// CodeGrants holds the value of the code_grants edge.
	CodeGrants *CodeGrant `json:"code_grants,omitempty"`
	// Credentials holds the value of the credentials edge.
	Credentials []*Credentials `json:"credentials,omitempty"`
	// Server holds the value of the server edge.
	Server *OAuthServer `json:"server,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// M2mGrantsOrErr returns the M2mGrants value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OAuthClientEdges) M2mGrantsOrErr() (*M2MGrant, error) {
	if e.M2mGrants != nil {
		return e.M2mGrants, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: m2mgrant.Label}
	}
	return nil, &NotLoadedError{edge: "m2m_grants"}
}

// CodeGrantsOrErr returns the CodeGrants value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OAuthClientEdges) CodeGrantsOrErr() (*CodeGrant, error) {
	if e.CodeGrants != nil {
		return e.CodeGrants, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: codegrant.Label}
	}
	return nil, &NotLoadedError{edge: "code_grants"}
}

// CredentialsOrErr returns the Credentials value or an error if the edge
// was not loaded in eager-loading.
func (e OAuthClientEdges) CredentialsOrErr() ([]*Credentials, error) {
	if e.loadedTypes[2] {
		return e.Credentials, nil
	}
	return nil, &NotLoadedError{edge: "credentials"}
}

// ServerOrErr returns the Server value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OAuthClientEdges) ServerOrErr() (*OAuthServer, error) {
	if e.Server != nil {
		return e.Server, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: oauthserver.Label}
	}
	return nil, &NotLoadedError{edge: "server"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OAuthClient) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oauthclient.FieldPublic:
			values[i] = new(sql.NullBool)
		case oauthclient.FieldID, oauthclient.FieldName:
			values[i] = new(sql.NullString)
		case oauthclient.ForeignKeys[0]: // oauth_server_clients
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OAuthClient fields.
func (oc *OAuthClient) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oauthclient.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				oc.ID = value.String
			}
		case oauthclient.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				oc.Name = value.String
			}
		case oauthclient.FieldPublic:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field public", values[i])
			} else if value.Valid {
				oc.Public = new(bool)
				*oc.Public = value.Bool
			}
		case oauthclient.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field oauth_server_clients", value)
			} else if value.Valid {
				oc.oauth_server_clients = new(int)
				*oc.oauth_server_clients = int(value.Int64)
			}
		default:
			oc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OAuthClient.
// This includes values selected through modifiers, order, etc.
func (oc *OAuthClient) Value(name string) (ent.Value, error) {
	return oc.selectValues.Get(name)
}

// QueryM2mGrants queries the "m2m_grants" edge of the OAuthClient entity.
func (oc *OAuthClient) QueryM2mGrants() *M2MGrantQuery {
	return NewOAuthClientClient(oc.config).QueryM2mGrants(oc)
}

// QueryCodeGrants queries the "code_grants" edge of the OAuthClient entity.
func (oc *OAuthClient) QueryCodeGrants() *CodeGrantQuery {
	return NewOAuthClientClient(oc.config).QueryCodeGrants(oc)
}

// QueryCredentials queries the "credentials" edge of the OAuthClient entity.
func (oc *OAuthClient) QueryCredentials() *CredentialsQuery {
	return NewOAuthClientClient(oc.config).QueryCredentials(oc)
}

// QueryServer queries the "server" edge of the OAuthClient entity.
func (oc *OAuthClient) QueryServer() *OAuthServerQuery {
	return NewOAuthClientClient(oc.config).QueryServer(oc)
}

// Update returns a builder for updating this OAuthClient.
// Note that you need to call OAuthClient.Unwrap() before calling this method if this OAuthClient
// was returned from a transaction, and the transaction was committed or rolled back.
func (oc *OAuthClient) Update() *OAuthClientUpdateOne {
	return NewOAuthClientClient(oc.config).UpdateOne(oc)
}

// Unwrap unwraps the OAuthClient entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oc *OAuthClient) Unwrap() *OAuthClient {
	_tx, ok := oc.config.driver.(*txDriver)
	if !ok {
		panic("ent: OAuthClient is not a transactional entity")
	}
	oc.config.driver = _tx.drv
	return oc
}

// String implements the fmt.Stringer.
func (oc *OAuthClient) String() string {
	var builder strings.Builder
	builder.WriteString("OAuthClient(")
	builder.WriteString(fmt.Sprintf("id=%v, ", oc.ID))
	builder.WriteString("name=")
	builder.WriteString(oc.Name)
	builder.WriteString(", ")
	if v := oc.Public; v != nil {
		builder.WriteString("public=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// OAuthClients is a parsable slice of OAuthClient.
type OAuthClients []*OAuthClient
