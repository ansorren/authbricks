// Code generated by ent, DO NOT EDIT.

package authorizationcode

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the authorizationcode type in the database.
	Label = "authorization_code"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldApplication holds the string denoting the application field in the database.
	FieldApplication = "application"
	// FieldCodeChallenge holds the string denoting the code_challenge field in the database.
	FieldCodeChallenge = "code_challenge"
	// FieldCodeChallengeMethod holds the string denoting the code_challenge_method field in the database.
	FieldCodeChallengeMethod = "code_challenge_method"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldAuthTime holds the string denoting the auth_time field in the database.
	FieldAuthTime = "auth_time"
	// FieldRedirectURI holds the string denoting the redirect_uri field in the database.
	FieldRedirectURI = "redirect_uri"
	// FieldNonce holds the string denoting the nonce field in the database.
	FieldNonce = "nonce"
	// FieldService holds the string denoting the service field in the database.
	FieldService = "service"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldSubject holds the string denoting the subject field in the database.
	FieldSubject = "subject"
	// FieldGrantedScopes holds the string denoting the granted_scopes field in the database.
	FieldGrantedScopes = "granted_scopes"
	// Table holds the table name of the authorizationcode in the database.
	Table = "authorization_codes"
)

// Columns holds all SQL columns for authorizationcode fields.
var Columns = []string{
	FieldID,
	FieldApplication,
	FieldCodeChallenge,
	FieldCodeChallengeMethod,
	FieldCreatedAt,
	FieldAuthTime,
	FieldRedirectURI,
	FieldNonce,
	FieldService,
	FieldState,
	FieldSubject,
	FieldGrantedScopes,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the AuthorizationCode queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByApplication orders the results by the application field.
func ByApplication(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApplication, opts...).ToFunc()
}

// ByCodeChallenge orders the results by the code_challenge field.
func ByCodeChallenge(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCodeChallenge, opts...).ToFunc()
}

// ByCodeChallengeMethod orders the results by the code_challenge_method field.
func ByCodeChallengeMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCodeChallengeMethod, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByAuthTime orders the results by the auth_time field.
func ByAuthTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthTime, opts...).ToFunc()
}

// ByRedirectURI orders the results by the redirect_uri field.
func ByRedirectURI(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRedirectURI, opts...).ToFunc()
}

// ByNonce orders the results by the nonce field.
func ByNonce(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNonce, opts...).ToFunc()
}

// ByService orders the results by the service field.
func ByService(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldService, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// BySubject orders the results by the subject field.
func BySubject(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubject, opts...).ToFunc()
}

// ByGrantedScopes orders the results by the granted_scopes field.
func ByGrantedScopes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGrantedScopes, opts...).ToFunc()
}
