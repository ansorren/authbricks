// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.authbricks.com/bricks/ent/application"
	"go.authbricks.com/bricks/ent/m2mgrant"
)

// M2MGrantCreate is the builder for creating a M2MGrant entity.
type M2MGrantCreate struct {
	config
	mutation *M2MGrantMutation
	hooks    []Hook
}

// SetScopes sets the "scopes" field.
func (mgc *M2MGrantCreate) SetScopes(s []string) *M2MGrantCreate {
	mgc.mutation.SetScopes(s)
	return mgc
}

// SetID sets the "id" field.
func (mgc *M2MGrantCreate) SetID(s string) *M2MGrantCreate {
	mgc.mutation.SetID(s)
	return mgc
}

// SetApplicationID sets the "application" edge to the Application entity by ID.
func (mgc *M2MGrantCreate) SetApplicationID(id string) *M2MGrantCreate {
	mgc.mutation.SetApplicationID(id)
	return mgc
}

// SetNillableApplicationID sets the "application" edge to the Application entity by ID if the given value is not nil.
func (mgc *M2MGrantCreate) SetNillableApplicationID(id *string) *M2MGrantCreate {
	if id != nil {
		mgc = mgc.SetApplicationID(*id)
	}
	return mgc
}

// SetApplication sets the "application" edge to the Application entity.
func (mgc *M2MGrantCreate) SetApplication(a *Application) *M2MGrantCreate {
	return mgc.SetApplicationID(a.ID)
}

// Mutation returns the M2MGrantMutation object of the builder.
func (mgc *M2MGrantCreate) Mutation() *M2MGrantMutation {
	return mgc.mutation
}

// Save creates the M2MGrant in the database.
func (mgc *M2MGrantCreate) Save(ctx context.Context) (*M2MGrant, error) {
	return withHooks(ctx, mgc.sqlSave, mgc.mutation, mgc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mgc *M2MGrantCreate) SaveX(ctx context.Context) *M2MGrant {
	v, err := mgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mgc *M2MGrantCreate) Exec(ctx context.Context) error {
	_, err := mgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mgc *M2MGrantCreate) ExecX(ctx context.Context) {
	if err := mgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mgc *M2MGrantCreate) check() error {
	if _, ok := mgc.mutation.Scopes(); !ok {
		return &ValidationError{Name: "scopes", err: errors.New(`ent: missing required field "M2MGrant.scopes"`)}
	}
	if v, ok := mgc.mutation.ID(); ok {
		if err := m2mgrant.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "M2MGrant.id": %w`, err)}
		}
	}
	return nil
}

func (mgc *M2MGrantCreate) sqlSave(ctx context.Context) (*M2MGrant, error) {
	if err := mgc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected M2MGrant.ID type: %T", _spec.ID.Value)
		}
	}
	mgc.mutation.id = &_node.ID
	mgc.mutation.done = true
	return _node, nil
}

func (mgc *M2MGrantCreate) createSpec() (*M2MGrant, *sqlgraph.CreateSpec) {
	var (
		_node = &M2MGrant{config: mgc.config}
		_spec = sqlgraph.NewCreateSpec(m2mgrant.Table, sqlgraph.NewFieldSpec(m2mgrant.FieldID, field.TypeString))
	)
	if id, ok := mgc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mgc.mutation.Scopes(); ok {
		_spec.SetField(m2mgrant.FieldScopes, field.TypeJSON, value)
		_node.Scopes = value
	}
	if nodes := mgc.mutation.ApplicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   m2mgrant.ApplicationTable,
			Columns: []string{m2mgrant.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.application_m2m_grant = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// M2MGrantCreateBulk is the builder for creating many M2MGrant entities in bulk.
type M2MGrantCreateBulk struct {
	config
	err      error
	builders []*M2MGrantCreate
}

// Save creates the M2MGrant entities in the database.
func (mgcb *M2MGrantCreateBulk) Save(ctx context.Context) ([]*M2MGrant, error) {
	if mgcb.err != nil {
		return nil, mgcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mgcb.builders))
	nodes := make([]*M2MGrant, len(mgcb.builders))
	mutators := make([]Mutator, len(mgcb.builders))
	for i := range mgcb.builders {
		func(i int, root context.Context) {
			builder := mgcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*M2MGrantMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mgcb *M2MGrantCreateBulk) SaveX(ctx context.Context) []*M2MGrant {
	v, err := mgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mgcb *M2MGrantCreateBulk) Exec(ctx context.Context) error {
	_, err := mgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mgcb *M2MGrantCreateBulk) ExecX(ctx context.Context) {
	if err := mgcb.Exec(ctx); err != nil {
		panic(err)
	}
}
