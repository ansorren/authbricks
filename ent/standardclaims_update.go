// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.authbricks.com/bricks/ent/predicate"
	"go.authbricks.com/bricks/ent/standardclaims"
	"go.authbricks.com/bricks/ent/user"
)

// StandardClaimsUpdate is the builder for updating StandardClaims entities.
type StandardClaimsUpdate struct {
	config
	hooks    []Hook
	mutation *StandardClaimsMutation
}

// Where appends a list predicates to the StandardClaimsUpdate builder.
func (scu *StandardClaimsUpdate) Where(ps ...predicate.StandardClaims) *StandardClaimsUpdate {
	scu.mutation.Where(ps...)
	return scu
}

// SetSubject sets the "subject" field.
func (scu *StandardClaimsUpdate) SetSubject(s string) *StandardClaimsUpdate {
	scu.mutation.SetSubject(s)
	return scu
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (scu *StandardClaimsUpdate) SetNillableSubject(s *string) *StandardClaimsUpdate {
	if s != nil {
		scu.SetSubject(*s)
	}
	return scu
}

// SetName sets the "name" field.
func (scu *StandardClaimsUpdate) SetName(s string) *StandardClaimsUpdate {
	scu.mutation.SetName(s)
	return scu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (scu *StandardClaimsUpdate) SetNillableName(s *string) *StandardClaimsUpdate {
	if s != nil {
		scu.SetName(*s)
	}
	return scu
}

// ClearName clears the value of the "name" field.
func (scu *StandardClaimsUpdate) ClearName() *StandardClaimsUpdate {
	scu.mutation.ClearName()
	return scu
}

// SetGivenName sets the "given_name" field.
func (scu *StandardClaimsUpdate) SetGivenName(s string) *StandardClaimsUpdate {
	scu.mutation.SetGivenName(s)
	return scu
}

// SetNillableGivenName sets the "given_name" field if the given value is not nil.
func (scu *StandardClaimsUpdate) SetNillableGivenName(s *string) *StandardClaimsUpdate {
	if s != nil {
		scu.SetGivenName(*s)
	}
	return scu
}

// ClearGivenName clears the value of the "given_name" field.
func (scu *StandardClaimsUpdate) ClearGivenName() *StandardClaimsUpdate {
	scu.mutation.ClearGivenName()
	return scu
}

// SetFamilyName sets the "family_name" field.
func (scu *StandardClaimsUpdate) SetFamilyName(s string) *StandardClaimsUpdate {
	scu.mutation.SetFamilyName(s)
	return scu
}

// SetNillableFamilyName sets the "family_name" field if the given value is not nil.
func (scu *StandardClaimsUpdate) SetNillableFamilyName(s *string) *StandardClaimsUpdate {
	if s != nil {
		scu.SetFamilyName(*s)
	}
	return scu
}

// ClearFamilyName clears the value of the "family_name" field.
func (scu *StandardClaimsUpdate) ClearFamilyName() *StandardClaimsUpdate {
	scu.mutation.ClearFamilyName()
	return scu
}

// SetMiddleName sets the "middle_name" field.
func (scu *StandardClaimsUpdate) SetMiddleName(s string) *StandardClaimsUpdate {
	scu.mutation.SetMiddleName(s)
	return scu
}

// SetNillableMiddleName sets the "middle_name" field if the given value is not nil.
func (scu *StandardClaimsUpdate) SetNillableMiddleName(s *string) *StandardClaimsUpdate {
	if s != nil {
		scu.SetMiddleName(*s)
	}
	return scu
}

// ClearMiddleName clears the value of the "middle_name" field.
func (scu *StandardClaimsUpdate) ClearMiddleName() *StandardClaimsUpdate {
	scu.mutation.ClearMiddleName()
	return scu
}

// SetNickname sets the "nickname" field.
func (scu *StandardClaimsUpdate) SetNickname(s string) *StandardClaimsUpdate {
	scu.mutation.SetNickname(s)
	return scu
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (scu *StandardClaimsUpdate) SetNillableNickname(s *string) *StandardClaimsUpdate {
	if s != nil {
		scu.SetNickname(*s)
	}
	return scu
}

// ClearNickname clears the value of the "nickname" field.
func (scu *StandardClaimsUpdate) ClearNickname() *StandardClaimsUpdate {
	scu.mutation.ClearNickname()
	return scu
}

// SetPreferredUsername sets the "preferred_username" field.
func (scu *StandardClaimsUpdate) SetPreferredUsername(s string) *StandardClaimsUpdate {
	scu.mutation.SetPreferredUsername(s)
	return scu
}

// SetNillablePreferredUsername sets the "preferred_username" field if the given value is not nil.
func (scu *StandardClaimsUpdate) SetNillablePreferredUsername(s *string) *StandardClaimsUpdate {
	if s != nil {
		scu.SetPreferredUsername(*s)
	}
	return scu
}

// ClearPreferredUsername clears the value of the "preferred_username" field.
func (scu *StandardClaimsUpdate) ClearPreferredUsername() *StandardClaimsUpdate {
	scu.mutation.ClearPreferredUsername()
	return scu
}

// SetProfile sets the "profile" field.
func (scu *StandardClaimsUpdate) SetProfile(s string) *StandardClaimsUpdate {
	scu.mutation.SetProfile(s)
	return scu
}

// SetNillableProfile sets the "profile" field if the given value is not nil.
func (scu *StandardClaimsUpdate) SetNillableProfile(s *string) *StandardClaimsUpdate {
	if s != nil {
		scu.SetProfile(*s)
	}
	return scu
}

// ClearProfile clears the value of the "profile" field.
func (scu *StandardClaimsUpdate) ClearProfile() *StandardClaimsUpdate {
	scu.mutation.ClearProfile()
	return scu
}

// SetPicture sets the "picture" field.
func (scu *StandardClaimsUpdate) SetPicture(s string) *StandardClaimsUpdate {
	scu.mutation.SetPicture(s)
	return scu
}

// SetNillablePicture sets the "picture" field if the given value is not nil.
func (scu *StandardClaimsUpdate) SetNillablePicture(s *string) *StandardClaimsUpdate {
	if s != nil {
		scu.SetPicture(*s)
	}
	return scu
}

// ClearPicture clears the value of the "picture" field.
func (scu *StandardClaimsUpdate) ClearPicture() *StandardClaimsUpdate {
	scu.mutation.ClearPicture()
	return scu
}

// SetWebsite sets the "website" field.
func (scu *StandardClaimsUpdate) SetWebsite(s string) *StandardClaimsUpdate {
	scu.mutation.SetWebsite(s)
	return scu
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (scu *StandardClaimsUpdate) SetNillableWebsite(s *string) *StandardClaimsUpdate {
	if s != nil {
		scu.SetWebsite(*s)
	}
	return scu
}

// ClearWebsite clears the value of the "website" field.
func (scu *StandardClaimsUpdate) ClearWebsite() *StandardClaimsUpdate {
	scu.mutation.ClearWebsite()
	return scu
}

// SetEmail sets the "email" field.
func (scu *StandardClaimsUpdate) SetEmail(s string) *StandardClaimsUpdate {
	scu.mutation.SetEmail(s)
	return scu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (scu *StandardClaimsUpdate) SetNillableEmail(s *string) *StandardClaimsUpdate {
	if s != nil {
		scu.SetEmail(*s)
	}
	return scu
}

// ClearEmail clears the value of the "email" field.
func (scu *StandardClaimsUpdate) ClearEmail() *StandardClaimsUpdate {
	scu.mutation.ClearEmail()
	return scu
}

// SetEmailVerified sets the "email_verified" field.
func (scu *StandardClaimsUpdate) SetEmailVerified(b bool) *StandardClaimsUpdate {
	scu.mutation.SetEmailVerified(b)
	return scu
}

// SetNillableEmailVerified sets the "email_verified" field if the given value is not nil.
func (scu *StandardClaimsUpdate) SetNillableEmailVerified(b *bool) *StandardClaimsUpdate {
	if b != nil {
		scu.SetEmailVerified(*b)
	}
	return scu
}

// ClearEmailVerified clears the value of the "email_verified" field.
func (scu *StandardClaimsUpdate) ClearEmailVerified() *StandardClaimsUpdate {
	scu.mutation.ClearEmailVerified()
	return scu
}

// SetGender sets the "gender" field.
func (scu *StandardClaimsUpdate) SetGender(s string) *StandardClaimsUpdate {
	scu.mutation.SetGender(s)
	return scu
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (scu *StandardClaimsUpdate) SetNillableGender(s *string) *StandardClaimsUpdate {
	if s != nil {
		scu.SetGender(*s)
	}
	return scu
}

// ClearGender clears the value of the "gender" field.
func (scu *StandardClaimsUpdate) ClearGender() *StandardClaimsUpdate {
	scu.mutation.ClearGender()
	return scu
}

// SetBirthdate sets the "birthdate" field.
func (scu *StandardClaimsUpdate) SetBirthdate(s string) *StandardClaimsUpdate {
	scu.mutation.SetBirthdate(s)
	return scu
}

// SetNillableBirthdate sets the "birthdate" field if the given value is not nil.
func (scu *StandardClaimsUpdate) SetNillableBirthdate(s *string) *StandardClaimsUpdate {
	if s != nil {
		scu.SetBirthdate(*s)
	}
	return scu
}

// ClearBirthdate clears the value of the "birthdate" field.
func (scu *StandardClaimsUpdate) ClearBirthdate() *StandardClaimsUpdate {
	scu.mutation.ClearBirthdate()
	return scu
}

// SetZoneinfo sets the "zoneinfo" field.
func (scu *StandardClaimsUpdate) SetZoneinfo(s string) *StandardClaimsUpdate {
	scu.mutation.SetZoneinfo(s)
	return scu
}

// SetNillableZoneinfo sets the "zoneinfo" field if the given value is not nil.
func (scu *StandardClaimsUpdate) SetNillableZoneinfo(s *string) *StandardClaimsUpdate {
	if s != nil {
		scu.SetZoneinfo(*s)
	}
	return scu
}

// ClearZoneinfo clears the value of the "zoneinfo" field.
func (scu *StandardClaimsUpdate) ClearZoneinfo() *StandardClaimsUpdate {
	scu.mutation.ClearZoneinfo()
	return scu
}

// SetLocale sets the "locale" field.
func (scu *StandardClaimsUpdate) SetLocale(s string) *StandardClaimsUpdate {
	scu.mutation.SetLocale(s)
	return scu
}

// SetNillableLocale sets the "locale" field if the given value is not nil.
func (scu *StandardClaimsUpdate) SetNillableLocale(s *string) *StandardClaimsUpdate {
	if s != nil {
		scu.SetLocale(*s)
	}
	return scu
}

// ClearLocale clears the value of the "locale" field.
func (scu *StandardClaimsUpdate) ClearLocale() *StandardClaimsUpdate {
	scu.mutation.ClearLocale()
	return scu
}

// SetPhoneNumber sets the "phone_number" field.
func (scu *StandardClaimsUpdate) SetPhoneNumber(s string) *StandardClaimsUpdate {
	scu.mutation.SetPhoneNumber(s)
	return scu
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (scu *StandardClaimsUpdate) SetNillablePhoneNumber(s *string) *StandardClaimsUpdate {
	if s != nil {
		scu.SetPhoneNumber(*s)
	}
	return scu
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (scu *StandardClaimsUpdate) ClearPhoneNumber() *StandardClaimsUpdate {
	scu.mutation.ClearPhoneNumber()
	return scu
}

// SetPhoneNumberVerified sets the "phone_number_verified" field.
func (scu *StandardClaimsUpdate) SetPhoneNumberVerified(b bool) *StandardClaimsUpdate {
	scu.mutation.SetPhoneNumberVerified(b)
	return scu
}

// SetNillablePhoneNumberVerified sets the "phone_number_verified" field if the given value is not nil.
func (scu *StandardClaimsUpdate) SetNillablePhoneNumberVerified(b *bool) *StandardClaimsUpdate {
	if b != nil {
		scu.SetPhoneNumberVerified(*b)
	}
	return scu
}

// ClearPhoneNumberVerified clears the value of the "phone_number_verified" field.
func (scu *StandardClaimsUpdate) ClearPhoneNumberVerified() *StandardClaimsUpdate {
	scu.mutation.ClearPhoneNumberVerified()
	return scu
}

// SetAddress sets the "address" field.
func (scu *StandardClaimsUpdate) SetAddress(s string) *StandardClaimsUpdate {
	scu.mutation.SetAddress(s)
	return scu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (scu *StandardClaimsUpdate) SetNillableAddress(s *string) *StandardClaimsUpdate {
	if s != nil {
		scu.SetAddress(*s)
	}
	return scu
}

// ClearAddress clears the value of the "address" field.
func (scu *StandardClaimsUpdate) ClearAddress() *StandardClaimsUpdate {
	scu.mutation.ClearAddress()
	return scu
}

// SetUpdatedAt sets the "updated_at" field.
func (scu *StandardClaimsUpdate) SetUpdatedAt(i int64) *StandardClaimsUpdate {
	scu.mutation.ResetUpdatedAt()
	scu.mutation.SetUpdatedAt(i)
	return scu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (scu *StandardClaimsUpdate) SetNillableUpdatedAt(i *int64) *StandardClaimsUpdate {
	if i != nil {
		scu.SetUpdatedAt(*i)
	}
	return scu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (scu *StandardClaimsUpdate) AddUpdatedAt(i int64) *StandardClaimsUpdate {
	scu.mutation.AddUpdatedAt(i)
	return scu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (scu *StandardClaimsUpdate) ClearUpdatedAt() *StandardClaimsUpdate {
	scu.mutation.ClearUpdatedAt()
	return scu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (scu *StandardClaimsUpdate) SetUserID(id string) *StandardClaimsUpdate {
	scu.mutation.SetUserID(id)
	return scu
}

// SetUser sets the "user" edge to the User entity.
func (scu *StandardClaimsUpdate) SetUser(u *User) *StandardClaimsUpdate {
	return scu.SetUserID(u.ID)
}

// Mutation returns the StandardClaimsMutation object of the builder.
func (scu *StandardClaimsUpdate) Mutation() *StandardClaimsMutation {
	return scu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (scu *StandardClaimsUpdate) ClearUser() *StandardClaimsUpdate {
	scu.mutation.ClearUser()
	return scu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scu *StandardClaimsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, scu.sqlSave, scu.mutation, scu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scu *StandardClaimsUpdate) SaveX(ctx context.Context) int {
	affected, err := scu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scu *StandardClaimsUpdate) Exec(ctx context.Context) error {
	_, err := scu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scu *StandardClaimsUpdate) ExecX(ctx context.Context) {
	if err := scu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scu *StandardClaimsUpdate) check() error {
	if v, ok := scu.mutation.Subject(); ok {
		if err := standardclaims.SubjectValidator(v); err != nil {
			return &ValidationError{Name: "subject", err: fmt.Errorf(`ent: validator failed for field "StandardClaims.subject": %w`, err)}
		}
	}
	if _, ok := scu.mutation.UserID(); scu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "StandardClaims.user"`)
	}
	return nil
}

func (scu *StandardClaimsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := scu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(standardclaims.Table, standardclaims.Columns, sqlgraph.NewFieldSpec(standardclaims.FieldID, field.TypeInt))
	if ps := scu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scu.mutation.Subject(); ok {
		_spec.SetField(standardclaims.FieldSubject, field.TypeString, value)
	}
	if value, ok := scu.mutation.Name(); ok {
		_spec.SetField(standardclaims.FieldName, field.TypeString, value)
	}
	if scu.mutation.NameCleared() {
		_spec.ClearField(standardclaims.FieldName, field.TypeString)
	}
	if value, ok := scu.mutation.GivenName(); ok {
		_spec.SetField(standardclaims.FieldGivenName, field.TypeString, value)
	}
	if scu.mutation.GivenNameCleared() {
		_spec.ClearField(standardclaims.FieldGivenName, field.TypeString)
	}
	if value, ok := scu.mutation.FamilyName(); ok {
		_spec.SetField(standardclaims.FieldFamilyName, field.TypeString, value)
	}
	if scu.mutation.FamilyNameCleared() {
		_spec.ClearField(standardclaims.FieldFamilyName, field.TypeString)
	}
	if value, ok := scu.mutation.MiddleName(); ok {
		_spec.SetField(standardclaims.FieldMiddleName, field.TypeString, value)
	}
	if scu.mutation.MiddleNameCleared() {
		_spec.ClearField(standardclaims.FieldMiddleName, field.TypeString)
	}
	if value, ok := scu.mutation.Nickname(); ok {
		_spec.SetField(standardclaims.FieldNickname, field.TypeString, value)
	}
	if scu.mutation.NicknameCleared() {
		_spec.ClearField(standardclaims.FieldNickname, field.TypeString)
	}
	if value, ok := scu.mutation.PreferredUsername(); ok {
		_spec.SetField(standardclaims.FieldPreferredUsername, field.TypeString, value)
	}
	if scu.mutation.PreferredUsernameCleared() {
		_spec.ClearField(standardclaims.FieldPreferredUsername, field.TypeString)
	}
	if value, ok := scu.mutation.Profile(); ok {
		_spec.SetField(standardclaims.FieldProfile, field.TypeString, value)
	}
	if scu.mutation.ProfileCleared() {
		_spec.ClearField(standardclaims.FieldProfile, field.TypeString)
	}
	if value, ok := scu.mutation.Picture(); ok {
		_spec.SetField(standardclaims.FieldPicture, field.TypeString, value)
	}
	if scu.mutation.PictureCleared() {
		_spec.ClearField(standardclaims.FieldPicture, field.TypeString)
	}
	if value, ok := scu.mutation.Website(); ok {
		_spec.SetField(standardclaims.FieldWebsite, field.TypeString, value)
	}
	if scu.mutation.WebsiteCleared() {
		_spec.ClearField(standardclaims.FieldWebsite, field.TypeString)
	}
	if value, ok := scu.mutation.Email(); ok {
		_spec.SetField(standardclaims.FieldEmail, field.TypeString, value)
	}
	if scu.mutation.EmailCleared() {
		_spec.ClearField(standardclaims.FieldEmail, field.TypeString)
	}
	if value, ok := scu.mutation.EmailVerified(); ok {
		_spec.SetField(standardclaims.FieldEmailVerified, field.TypeBool, value)
	}
	if scu.mutation.EmailVerifiedCleared() {
		_spec.ClearField(standardclaims.FieldEmailVerified, field.TypeBool)
	}
	if value, ok := scu.mutation.Gender(); ok {
		_spec.SetField(standardclaims.FieldGender, field.TypeString, value)
	}
	if scu.mutation.GenderCleared() {
		_spec.ClearField(standardclaims.FieldGender, field.TypeString)
	}
	if value, ok := scu.mutation.Birthdate(); ok {
		_spec.SetField(standardclaims.FieldBirthdate, field.TypeString, value)
	}
	if scu.mutation.BirthdateCleared() {
		_spec.ClearField(standardclaims.FieldBirthdate, field.TypeString)
	}
	if value, ok := scu.mutation.Zoneinfo(); ok {
		_spec.SetField(standardclaims.FieldZoneinfo, field.TypeString, value)
	}
	if scu.mutation.ZoneinfoCleared() {
		_spec.ClearField(standardclaims.FieldZoneinfo, field.TypeString)
	}
	if value, ok := scu.mutation.Locale(); ok {
		_spec.SetField(standardclaims.FieldLocale, field.TypeString, value)
	}
	if scu.mutation.LocaleCleared() {
		_spec.ClearField(standardclaims.FieldLocale, field.TypeString)
	}
	if value, ok := scu.mutation.PhoneNumber(); ok {
		_spec.SetField(standardclaims.FieldPhoneNumber, field.TypeString, value)
	}
	if scu.mutation.PhoneNumberCleared() {
		_spec.ClearField(standardclaims.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := scu.mutation.PhoneNumberVerified(); ok {
		_spec.SetField(standardclaims.FieldPhoneNumberVerified, field.TypeBool, value)
	}
	if scu.mutation.PhoneNumberVerifiedCleared() {
		_spec.ClearField(standardclaims.FieldPhoneNumberVerified, field.TypeBool)
	}
	if value, ok := scu.mutation.Address(); ok {
		_spec.SetField(standardclaims.FieldAddress, field.TypeString, value)
	}
	if scu.mutation.AddressCleared() {
		_spec.ClearField(standardclaims.FieldAddress, field.TypeString)
	}
	if value, ok := scu.mutation.UpdatedAt(); ok {
		_spec.SetField(standardclaims.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := scu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(standardclaims.FieldUpdatedAt, field.TypeInt64, value)
	}
	if scu.mutation.UpdatedAtCleared() {
		_spec.ClearField(standardclaims.FieldUpdatedAt, field.TypeInt64)
	}
	if scu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   standardclaims.UserTable,
			Columns: []string{standardclaims.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   standardclaims.UserTable,
			Columns: []string{standardclaims.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, scu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{standardclaims.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	scu.mutation.done = true
	return n, nil
}

// StandardClaimsUpdateOne is the builder for updating a single StandardClaims entity.
type StandardClaimsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StandardClaimsMutation
}

// SetSubject sets the "subject" field.
func (scuo *StandardClaimsUpdateOne) SetSubject(s string) *StandardClaimsUpdateOne {
	scuo.mutation.SetSubject(s)
	return scuo
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (scuo *StandardClaimsUpdateOne) SetNillableSubject(s *string) *StandardClaimsUpdateOne {
	if s != nil {
		scuo.SetSubject(*s)
	}
	return scuo
}

// SetName sets the "name" field.
func (scuo *StandardClaimsUpdateOne) SetName(s string) *StandardClaimsUpdateOne {
	scuo.mutation.SetName(s)
	return scuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (scuo *StandardClaimsUpdateOne) SetNillableName(s *string) *StandardClaimsUpdateOne {
	if s != nil {
		scuo.SetName(*s)
	}
	return scuo
}

// ClearName clears the value of the "name" field.
func (scuo *StandardClaimsUpdateOne) ClearName() *StandardClaimsUpdateOne {
	scuo.mutation.ClearName()
	return scuo
}

// SetGivenName sets the "given_name" field.
func (scuo *StandardClaimsUpdateOne) SetGivenName(s string) *StandardClaimsUpdateOne {
	scuo.mutation.SetGivenName(s)
	return scuo
}

// SetNillableGivenName sets the "given_name" field if the given value is not nil.
func (scuo *StandardClaimsUpdateOne) SetNillableGivenName(s *string) *StandardClaimsUpdateOne {
	if s != nil {
		scuo.SetGivenName(*s)
	}
	return scuo
}

// ClearGivenName clears the value of the "given_name" field.
func (scuo *StandardClaimsUpdateOne) ClearGivenName() *StandardClaimsUpdateOne {
	scuo.mutation.ClearGivenName()
	return scuo
}

// SetFamilyName sets the "family_name" field.
func (scuo *StandardClaimsUpdateOne) SetFamilyName(s string) *StandardClaimsUpdateOne {
	scuo.mutation.SetFamilyName(s)
	return scuo
}

// SetNillableFamilyName sets the "family_name" field if the given value is not nil.
func (scuo *StandardClaimsUpdateOne) SetNillableFamilyName(s *string) *StandardClaimsUpdateOne {
	if s != nil {
		scuo.SetFamilyName(*s)
	}
	return scuo
}

// ClearFamilyName clears the value of the "family_name" field.
func (scuo *StandardClaimsUpdateOne) ClearFamilyName() *StandardClaimsUpdateOne {
	scuo.mutation.ClearFamilyName()
	return scuo
}

// SetMiddleName sets the "middle_name" field.
func (scuo *StandardClaimsUpdateOne) SetMiddleName(s string) *StandardClaimsUpdateOne {
	scuo.mutation.SetMiddleName(s)
	return scuo
}

// SetNillableMiddleName sets the "middle_name" field if the given value is not nil.
func (scuo *StandardClaimsUpdateOne) SetNillableMiddleName(s *string) *StandardClaimsUpdateOne {
	if s != nil {
		scuo.SetMiddleName(*s)
	}
	return scuo
}

// ClearMiddleName clears the value of the "middle_name" field.
func (scuo *StandardClaimsUpdateOne) ClearMiddleName() *StandardClaimsUpdateOne {
	scuo.mutation.ClearMiddleName()
	return scuo
}

// SetNickname sets the "nickname" field.
func (scuo *StandardClaimsUpdateOne) SetNickname(s string) *StandardClaimsUpdateOne {
	scuo.mutation.SetNickname(s)
	return scuo
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (scuo *StandardClaimsUpdateOne) SetNillableNickname(s *string) *StandardClaimsUpdateOne {
	if s != nil {
		scuo.SetNickname(*s)
	}
	return scuo
}

// ClearNickname clears the value of the "nickname" field.
func (scuo *StandardClaimsUpdateOne) ClearNickname() *StandardClaimsUpdateOne {
	scuo.mutation.ClearNickname()
	return scuo
}

// SetPreferredUsername sets the "preferred_username" field.
func (scuo *StandardClaimsUpdateOne) SetPreferredUsername(s string) *StandardClaimsUpdateOne {
	scuo.mutation.SetPreferredUsername(s)
	return scuo
}

// SetNillablePreferredUsername sets the "preferred_username" field if the given value is not nil.
func (scuo *StandardClaimsUpdateOne) SetNillablePreferredUsername(s *string) *StandardClaimsUpdateOne {
	if s != nil {
		scuo.SetPreferredUsername(*s)
	}
	return scuo
}

// ClearPreferredUsername clears the value of the "preferred_username" field.
func (scuo *StandardClaimsUpdateOne) ClearPreferredUsername() *StandardClaimsUpdateOne {
	scuo.mutation.ClearPreferredUsername()
	return scuo
}

// SetProfile sets the "profile" field.
func (scuo *StandardClaimsUpdateOne) SetProfile(s string) *StandardClaimsUpdateOne {
	scuo.mutation.SetProfile(s)
	return scuo
}

// SetNillableProfile sets the "profile" field if the given value is not nil.
func (scuo *StandardClaimsUpdateOne) SetNillableProfile(s *string) *StandardClaimsUpdateOne {
	if s != nil {
		scuo.SetProfile(*s)
	}
	return scuo
}

// ClearProfile clears the value of the "profile" field.
func (scuo *StandardClaimsUpdateOne) ClearProfile() *StandardClaimsUpdateOne {
	scuo.mutation.ClearProfile()
	return scuo
}

// SetPicture sets the "picture" field.
func (scuo *StandardClaimsUpdateOne) SetPicture(s string) *StandardClaimsUpdateOne {
	scuo.mutation.SetPicture(s)
	return scuo
}

// SetNillablePicture sets the "picture" field if the given value is not nil.
func (scuo *StandardClaimsUpdateOne) SetNillablePicture(s *string) *StandardClaimsUpdateOne {
	if s != nil {
		scuo.SetPicture(*s)
	}
	return scuo
}

// ClearPicture clears the value of the "picture" field.
func (scuo *StandardClaimsUpdateOne) ClearPicture() *StandardClaimsUpdateOne {
	scuo.mutation.ClearPicture()
	return scuo
}

// SetWebsite sets the "website" field.
func (scuo *StandardClaimsUpdateOne) SetWebsite(s string) *StandardClaimsUpdateOne {
	scuo.mutation.SetWebsite(s)
	return scuo
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (scuo *StandardClaimsUpdateOne) SetNillableWebsite(s *string) *StandardClaimsUpdateOne {
	if s != nil {
		scuo.SetWebsite(*s)
	}
	return scuo
}

// ClearWebsite clears the value of the "website" field.
func (scuo *StandardClaimsUpdateOne) ClearWebsite() *StandardClaimsUpdateOne {
	scuo.mutation.ClearWebsite()
	return scuo
}

// SetEmail sets the "email" field.
func (scuo *StandardClaimsUpdateOne) SetEmail(s string) *StandardClaimsUpdateOne {
	scuo.mutation.SetEmail(s)
	return scuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (scuo *StandardClaimsUpdateOne) SetNillableEmail(s *string) *StandardClaimsUpdateOne {
	if s != nil {
		scuo.SetEmail(*s)
	}
	return scuo
}

// ClearEmail clears the value of the "email" field.
func (scuo *StandardClaimsUpdateOne) ClearEmail() *StandardClaimsUpdateOne {
	scuo.mutation.ClearEmail()
	return scuo
}

// SetEmailVerified sets the "email_verified" field.
func (scuo *StandardClaimsUpdateOne) SetEmailVerified(b bool) *StandardClaimsUpdateOne {
	scuo.mutation.SetEmailVerified(b)
	return scuo
}

// SetNillableEmailVerified sets the "email_verified" field if the given value is not nil.
func (scuo *StandardClaimsUpdateOne) SetNillableEmailVerified(b *bool) *StandardClaimsUpdateOne {
	if b != nil {
		scuo.SetEmailVerified(*b)
	}
	return scuo
}

// ClearEmailVerified clears the value of the "email_verified" field.
func (scuo *StandardClaimsUpdateOne) ClearEmailVerified() *StandardClaimsUpdateOne {
	scuo.mutation.ClearEmailVerified()
	return scuo
}

// SetGender sets the "gender" field.
func (scuo *StandardClaimsUpdateOne) SetGender(s string) *StandardClaimsUpdateOne {
	scuo.mutation.SetGender(s)
	return scuo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (scuo *StandardClaimsUpdateOne) SetNillableGender(s *string) *StandardClaimsUpdateOne {
	if s != nil {
		scuo.SetGender(*s)
	}
	return scuo
}

// ClearGender clears the value of the "gender" field.
func (scuo *StandardClaimsUpdateOne) ClearGender() *StandardClaimsUpdateOne {
	scuo.mutation.ClearGender()
	return scuo
}

// SetBirthdate sets the "birthdate" field.
func (scuo *StandardClaimsUpdateOne) SetBirthdate(s string) *StandardClaimsUpdateOne {
	scuo.mutation.SetBirthdate(s)
	return scuo
}

// SetNillableBirthdate sets the "birthdate" field if the given value is not nil.
func (scuo *StandardClaimsUpdateOne) SetNillableBirthdate(s *string) *StandardClaimsUpdateOne {
	if s != nil {
		scuo.SetBirthdate(*s)
	}
	return scuo
}

// ClearBirthdate clears the value of the "birthdate" field.
func (scuo *StandardClaimsUpdateOne) ClearBirthdate() *StandardClaimsUpdateOne {
	scuo.mutation.ClearBirthdate()
	return scuo
}

// SetZoneinfo sets the "zoneinfo" field.
func (scuo *StandardClaimsUpdateOne) SetZoneinfo(s string) *StandardClaimsUpdateOne {
	scuo.mutation.SetZoneinfo(s)
	return scuo
}

// SetNillableZoneinfo sets the "zoneinfo" field if the given value is not nil.
func (scuo *StandardClaimsUpdateOne) SetNillableZoneinfo(s *string) *StandardClaimsUpdateOne {
	if s != nil {
		scuo.SetZoneinfo(*s)
	}
	return scuo
}

// ClearZoneinfo clears the value of the "zoneinfo" field.
func (scuo *StandardClaimsUpdateOne) ClearZoneinfo() *StandardClaimsUpdateOne {
	scuo.mutation.ClearZoneinfo()
	return scuo
}

// SetLocale sets the "locale" field.
func (scuo *StandardClaimsUpdateOne) SetLocale(s string) *StandardClaimsUpdateOne {
	scuo.mutation.SetLocale(s)
	return scuo
}

// SetNillableLocale sets the "locale" field if the given value is not nil.
func (scuo *StandardClaimsUpdateOne) SetNillableLocale(s *string) *StandardClaimsUpdateOne {
	if s != nil {
		scuo.SetLocale(*s)
	}
	return scuo
}

// ClearLocale clears the value of the "locale" field.
func (scuo *StandardClaimsUpdateOne) ClearLocale() *StandardClaimsUpdateOne {
	scuo.mutation.ClearLocale()
	return scuo
}

// SetPhoneNumber sets the "phone_number" field.
func (scuo *StandardClaimsUpdateOne) SetPhoneNumber(s string) *StandardClaimsUpdateOne {
	scuo.mutation.SetPhoneNumber(s)
	return scuo
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (scuo *StandardClaimsUpdateOne) SetNillablePhoneNumber(s *string) *StandardClaimsUpdateOne {
	if s != nil {
		scuo.SetPhoneNumber(*s)
	}
	return scuo
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (scuo *StandardClaimsUpdateOne) ClearPhoneNumber() *StandardClaimsUpdateOne {
	scuo.mutation.ClearPhoneNumber()
	return scuo
}

// SetPhoneNumberVerified sets the "phone_number_verified" field.
func (scuo *StandardClaimsUpdateOne) SetPhoneNumberVerified(b bool) *StandardClaimsUpdateOne {
	scuo.mutation.SetPhoneNumberVerified(b)
	return scuo
}

// SetNillablePhoneNumberVerified sets the "phone_number_verified" field if the given value is not nil.
func (scuo *StandardClaimsUpdateOne) SetNillablePhoneNumberVerified(b *bool) *StandardClaimsUpdateOne {
	if b != nil {
		scuo.SetPhoneNumberVerified(*b)
	}
	return scuo
}

// ClearPhoneNumberVerified clears the value of the "phone_number_verified" field.
func (scuo *StandardClaimsUpdateOne) ClearPhoneNumberVerified() *StandardClaimsUpdateOne {
	scuo.mutation.ClearPhoneNumberVerified()
	return scuo
}

// SetAddress sets the "address" field.
func (scuo *StandardClaimsUpdateOne) SetAddress(s string) *StandardClaimsUpdateOne {
	scuo.mutation.SetAddress(s)
	return scuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (scuo *StandardClaimsUpdateOne) SetNillableAddress(s *string) *StandardClaimsUpdateOne {
	if s != nil {
		scuo.SetAddress(*s)
	}
	return scuo
}

// ClearAddress clears the value of the "address" field.
func (scuo *StandardClaimsUpdateOne) ClearAddress() *StandardClaimsUpdateOne {
	scuo.mutation.ClearAddress()
	return scuo
}

// SetUpdatedAt sets the "updated_at" field.
func (scuo *StandardClaimsUpdateOne) SetUpdatedAt(i int64) *StandardClaimsUpdateOne {
	scuo.mutation.ResetUpdatedAt()
	scuo.mutation.SetUpdatedAt(i)
	return scuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (scuo *StandardClaimsUpdateOne) SetNillableUpdatedAt(i *int64) *StandardClaimsUpdateOne {
	if i != nil {
		scuo.SetUpdatedAt(*i)
	}
	return scuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (scuo *StandardClaimsUpdateOne) AddUpdatedAt(i int64) *StandardClaimsUpdateOne {
	scuo.mutation.AddUpdatedAt(i)
	return scuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (scuo *StandardClaimsUpdateOne) ClearUpdatedAt() *StandardClaimsUpdateOne {
	scuo.mutation.ClearUpdatedAt()
	return scuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (scuo *StandardClaimsUpdateOne) SetUserID(id string) *StandardClaimsUpdateOne {
	scuo.mutation.SetUserID(id)
	return scuo
}

// SetUser sets the "user" edge to the User entity.
func (scuo *StandardClaimsUpdateOne) SetUser(u *User) *StandardClaimsUpdateOne {
	return scuo.SetUserID(u.ID)
}

// Mutation returns the StandardClaimsMutation object of the builder.
func (scuo *StandardClaimsUpdateOne) Mutation() *StandardClaimsMutation {
	return scuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (scuo *StandardClaimsUpdateOne) ClearUser() *StandardClaimsUpdateOne {
	scuo.mutation.ClearUser()
	return scuo
}

// Where appends a list predicates to the StandardClaimsUpdate builder.
func (scuo *StandardClaimsUpdateOne) Where(ps ...predicate.StandardClaims) *StandardClaimsUpdateOne {
	scuo.mutation.Where(ps...)
	return scuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (scuo *StandardClaimsUpdateOne) Select(field string, fields ...string) *StandardClaimsUpdateOne {
	scuo.fields = append([]string{field}, fields...)
	return scuo
}

// Save executes the query and returns the updated StandardClaims entity.
func (scuo *StandardClaimsUpdateOne) Save(ctx context.Context) (*StandardClaims, error) {
	return withHooks(ctx, scuo.sqlSave, scuo.mutation, scuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scuo *StandardClaimsUpdateOne) SaveX(ctx context.Context) *StandardClaims {
	node, err := scuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scuo *StandardClaimsUpdateOne) Exec(ctx context.Context) error {
	_, err := scuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scuo *StandardClaimsUpdateOne) ExecX(ctx context.Context) {
	if err := scuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scuo *StandardClaimsUpdateOne) check() error {
	if v, ok := scuo.mutation.Subject(); ok {
		if err := standardclaims.SubjectValidator(v); err != nil {
			return &ValidationError{Name: "subject", err: fmt.Errorf(`ent: validator failed for field "StandardClaims.subject": %w`, err)}
		}
	}
	if _, ok := scuo.mutation.UserID(); scuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "StandardClaims.user"`)
	}
	return nil
}

func (scuo *StandardClaimsUpdateOne) sqlSave(ctx context.Context) (_node *StandardClaims, err error) {
	if err := scuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(standardclaims.Table, standardclaims.Columns, sqlgraph.NewFieldSpec(standardclaims.FieldID, field.TypeInt))
	id, ok := scuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StandardClaims.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := scuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, standardclaims.FieldID)
		for _, f := range fields {
			if !standardclaims.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != standardclaims.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := scuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scuo.mutation.Subject(); ok {
		_spec.SetField(standardclaims.FieldSubject, field.TypeString, value)
	}
	if value, ok := scuo.mutation.Name(); ok {
		_spec.SetField(standardclaims.FieldName, field.TypeString, value)
	}
	if scuo.mutation.NameCleared() {
		_spec.ClearField(standardclaims.FieldName, field.TypeString)
	}
	if value, ok := scuo.mutation.GivenName(); ok {
		_spec.SetField(standardclaims.FieldGivenName, field.TypeString, value)
	}
	if scuo.mutation.GivenNameCleared() {
		_spec.ClearField(standardclaims.FieldGivenName, field.TypeString)
	}
	if value, ok := scuo.mutation.FamilyName(); ok {
		_spec.SetField(standardclaims.FieldFamilyName, field.TypeString, value)
	}
	if scuo.mutation.FamilyNameCleared() {
		_spec.ClearField(standardclaims.FieldFamilyName, field.TypeString)
	}
	if value, ok := scuo.mutation.MiddleName(); ok {
		_spec.SetField(standardclaims.FieldMiddleName, field.TypeString, value)
	}
	if scuo.mutation.MiddleNameCleared() {
		_spec.ClearField(standardclaims.FieldMiddleName, field.TypeString)
	}
	if value, ok := scuo.mutation.Nickname(); ok {
		_spec.SetField(standardclaims.FieldNickname, field.TypeString, value)
	}
	if scuo.mutation.NicknameCleared() {
		_spec.ClearField(standardclaims.FieldNickname, field.TypeString)
	}
	if value, ok := scuo.mutation.PreferredUsername(); ok {
		_spec.SetField(standardclaims.FieldPreferredUsername, field.TypeString, value)
	}
	if scuo.mutation.PreferredUsernameCleared() {
		_spec.ClearField(standardclaims.FieldPreferredUsername, field.TypeString)
	}
	if value, ok := scuo.mutation.Profile(); ok {
		_spec.SetField(standardclaims.FieldProfile, field.TypeString, value)
	}
	if scuo.mutation.ProfileCleared() {
		_spec.ClearField(standardclaims.FieldProfile, field.TypeString)
	}
	if value, ok := scuo.mutation.Picture(); ok {
		_spec.SetField(standardclaims.FieldPicture, field.TypeString, value)
	}
	if scuo.mutation.PictureCleared() {
		_spec.ClearField(standardclaims.FieldPicture, field.TypeString)
	}
	if value, ok := scuo.mutation.Website(); ok {
		_spec.SetField(standardclaims.FieldWebsite, field.TypeString, value)
	}
	if scuo.mutation.WebsiteCleared() {
		_spec.ClearField(standardclaims.FieldWebsite, field.TypeString)
	}
	if value, ok := scuo.mutation.Email(); ok {
		_spec.SetField(standardclaims.FieldEmail, field.TypeString, value)
	}
	if scuo.mutation.EmailCleared() {
		_spec.ClearField(standardclaims.FieldEmail, field.TypeString)
	}
	if value, ok := scuo.mutation.EmailVerified(); ok {
		_spec.SetField(standardclaims.FieldEmailVerified, field.TypeBool, value)
	}
	if scuo.mutation.EmailVerifiedCleared() {
		_spec.ClearField(standardclaims.FieldEmailVerified, field.TypeBool)
	}
	if value, ok := scuo.mutation.Gender(); ok {
		_spec.SetField(standardclaims.FieldGender, field.TypeString, value)
	}
	if scuo.mutation.GenderCleared() {
		_spec.ClearField(standardclaims.FieldGender, field.TypeString)
	}
	if value, ok := scuo.mutation.Birthdate(); ok {
		_spec.SetField(standardclaims.FieldBirthdate, field.TypeString, value)
	}
	if scuo.mutation.BirthdateCleared() {
		_spec.ClearField(standardclaims.FieldBirthdate, field.TypeString)
	}
	if value, ok := scuo.mutation.Zoneinfo(); ok {
		_spec.SetField(standardclaims.FieldZoneinfo, field.TypeString, value)
	}
	if scuo.mutation.ZoneinfoCleared() {
		_spec.ClearField(standardclaims.FieldZoneinfo, field.TypeString)
	}
	if value, ok := scuo.mutation.Locale(); ok {
		_spec.SetField(standardclaims.FieldLocale, field.TypeString, value)
	}
	if scuo.mutation.LocaleCleared() {
		_spec.ClearField(standardclaims.FieldLocale, field.TypeString)
	}
	if value, ok := scuo.mutation.PhoneNumber(); ok {
		_spec.SetField(standardclaims.FieldPhoneNumber, field.TypeString, value)
	}
	if scuo.mutation.PhoneNumberCleared() {
		_spec.ClearField(standardclaims.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := scuo.mutation.PhoneNumberVerified(); ok {
		_spec.SetField(standardclaims.FieldPhoneNumberVerified, field.TypeBool, value)
	}
	if scuo.mutation.PhoneNumberVerifiedCleared() {
		_spec.ClearField(standardclaims.FieldPhoneNumberVerified, field.TypeBool)
	}
	if value, ok := scuo.mutation.Address(); ok {
		_spec.SetField(standardclaims.FieldAddress, field.TypeString, value)
	}
	if scuo.mutation.AddressCleared() {
		_spec.ClearField(standardclaims.FieldAddress, field.TypeString)
	}
	if value, ok := scuo.mutation.UpdatedAt(); ok {
		_spec.SetField(standardclaims.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := scuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(standardclaims.FieldUpdatedAt, field.TypeInt64, value)
	}
	if scuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(standardclaims.FieldUpdatedAt, field.TypeInt64)
	}
	if scuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   standardclaims.UserTable,
			Columns: []string{standardclaims.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   standardclaims.UserTable,
			Columns: []string{standardclaims.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &StandardClaims{config: scuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, scuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{standardclaims.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	scuo.mutation.done = true
	return _node, nil
}
