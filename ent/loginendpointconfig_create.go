// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.authbricks.com/bricks/ent/loginendpointconfig"
	"go.authbricks.com/bricks/ent/service"
)

// LoginEndpointConfigCreate is the builder for creating a LoginEndpointConfig entity.
type LoginEndpointConfigCreate struct {
	config
	mutation *LoginEndpointConfigMutation
	hooks    []Hook
}

// SetEndpoint sets the "endpoint" field.
func (lecc *LoginEndpointConfigCreate) SetEndpoint(s string) *LoginEndpointConfigCreate {
	lecc.mutation.SetEndpoint(s)
	return lecc
}

// SetSessionTimeout sets the "session_timeout" field.
func (lecc *LoginEndpointConfigCreate) SetSessionTimeout(i int64) *LoginEndpointConfigCreate {
	lecc.mutation.SetSessionTimeout(i)
	return lecc
}

// SetID sets the "id" field.
func (lecc *LoginEndpointConfigCreate) SetID(s string) *LoginEndpointConfigCreate {
	lecc.mutation.SetID(s)
	return lecc
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (lecc *LoginEndpointConfigCreate) SetServiceID(id string) *LoginEndpointConfigCreate {
	lecc.mutation.SetServiceID(id)
	return lecc
}

// SetService sets the "service" edge to the Service entity.
func (lecc *LoginEndpointConfigCreate) SetService(s *Service) *LoginEndpointConfigCreate {
	return lecc.SetServiceID(s.ID)
}

// Mutation returns the LoginEndpointConfigMutation object of the builder.
func (lecc *LoginEndpointConfigCreate) Mutation() *LoginEndpointConfigMutation {
	return lecc.mutation
}

// Save creates the LoginEndpointConfig in the database.
func (lecc *LoginEndpointConfigCreate) Save(ctx context.Context) (*LoginEndpointConfig, error) {
	return withHooks(ctx, lecc.sqlSave, lecc.mutation, lecc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lecc *LoginEndpointConfigCreate) SaveX(ctx context.Context) *LoginEndpointConfig {
	v, err := lecc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lecc *LoginEndpointConfigCreate) Exec(ctx context.Context) error {
	_, err := lecc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lecc *LoginEndpointConfigCreate) ExecX(ctx context.Context) {
	if err := lecc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lecc *LoginEndpointConfigCreate) check() error {
	if _, ok := lecc.mutation.Endpoint(); !ok {
		return &ValidationError{Name: "endpoint", err: errors.New(`ent: missing required field "LoginEndpointConfig.endpoint"`)}
	}
	if v, ok := lecc.mutation.Endpoint(); ok {
		if err := loginendpointconfig.EndpointValidator(v); err != nil {
			return &ValidationError{Name: "endpoint", err: fmt.Errorf(`ent: validator failed for field "LoginEndpointConfig.endpoint": %w`, err)}
		}
	}
	if _, ok := lecc.mutation.SessionTimeout(); !ok {
		return &ValidationError{Name: "session_timeout", err: errors.New(`ent: missing required field "LoginEndpointConfig.session_timeout"`)}
	}
	if v, ok := lecc.mutation.SessionTimeout(); ok {
		if err := loginendpointconfig.SessionTimeoutValidator(v); err != nil {
			return &ValidationError{Name: "session_timeout", err: fmt.Errorf(`ent: validator failed for field "LoginEndpointConfig.session_timeout": %w`, err)}
		}
	}
	if v, ok := lecc.mutation.ID(); ok {
		if err := loginendpointconfig.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "LoginEndpointConfig.id": %w`, err)}
		}
	}
	if _, ok := lecc.mutation.ServiceID(); !ok {
		return &ValidationError{Name: "service", err: errors.New(`ent: missing required edge "LoginEndpointConfig.service"`)}
	}
	return nil
}

func (lecc *LoginEndpointConfigCreate) sqlSave(ctx context.Context) (*LoginEndpointConfig, error) {
	if err := lecc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lecc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lecc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected LoginEndpointConfig.ID type: %T", _spec.ID.Value)
		}
	}
	lecc.mutation.id = &_node.ID
	lecc.mutation.done = true
	return _node, nil
}

func (lecc *LoginEndpointConfigCreate) createSpec() (*LoginEndpointConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &LoginEndpointConfig{config: lecc.config}
		_spec = sqlgraph.NewCreateSpec(loginendpointconfig.Table, sqlgraph.NewFieldSpec(loginendpointconfig.FieldID, field.TypeString))
	)
	if id, ok := lecc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := lecc.mutation.Endpoint(); ok {
		_spec.SetField(loginendpointconfig.FieldEndpoint, field.TypeString, value)
		_node.Endpoint = value
	}
	if value, ok := lecc.mutation.SessionTimeout(); ok {
		_spec.SetField(loginendpointconfig.FieldSessionTimeout, field.TypeInt64, value)
		_node.SessionTimeout = value
	}
	if nodes := lecc.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   loginendpointconfig.ServiceTable,
			Columns: []string{loginendpointconfig.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.service_service_login_endpoint_config = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LoginEndpointConfigCreateBulk is the builder for creating many LoginEndpointConfig entities in bulk.
type LoginEndpointConfigCreateBulk struct {
	config
	err      error
	builders []*LoginEndpointConfigCreate
}

// Save creates the LoginEndpointConfig entities in the database.
func (leccb *LoginEndpointConfigCreateBulk) Save(ctx context.Context) ([]*LoginEndpointConfig, error) {
	if leccb.err != nil {
		return nil, leccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(leccb.builders))
	nodes := make([]*LoginEndpointConfig, len(leccb.builders))
	mutators := make([]Mutator, len(leccb.builders))
	for i := range leccb.builders {
		func(i int, root context.Context) {
			builder := leccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LoginEndpointConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, leccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, leccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, leccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (leccb *LoginEndpointConfigCreateBulk) SaveX(ctx context.Context) []*LoginEndpointConfig {
	v, err := leccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (leccb *LoginEndpointConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := leccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (leccb *LoginEndpointConfigCreateBulk) ExecX(ctx context.Context) {
	if err := leccb.Exec(ctx); err != nil {
		panic(err)
	}
}
