// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.authbricks.com/bricks/ent/predicate"
	"go.authbricks.com/bricks/ent/service"
	"go.authbricks.com/bricks/ent/serviceintrospectionendpointconfig"
)

// ServiceIntrospectionEndpointConfigUpdate is the builder for updating ServiceIntrospectionEndpointConfig entities.
type ServiceIntrospectionEndpointConfigUpdate struct {
	config
	hooks    []Hook
	mutation *ServiceIntrospectionEndpointConfigMutation
}

// Where appends a list predicates to the ServiceIntrospectionEndpointConfigUpdate builder.
func (siecu *ServiceIntrospectionEndpointConfigUpdate) Where(ps ...predicate.ServiceIntrospectionEndpointConfig) *ServiceIntrospectionEndpointConfigUpdate {
	siecu.mutation.Where(ps...)
	return siecu
}

// SetEndpoint sets the "endpoint" field.
func (siecu *ServiceIntrospectionEndpointConfigUpdate) SetEndpoint(s string) *ServiceIntrospectionEndpointConfigUpdate {
	siecu.mutation.SetEndpoint(s)
	return siecu
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (siecu *ServiceIntrospectionEndpointConfigUpdate) SetNillableEndpoint(s *string) *ServiceIntrospectionEndpointConfigUpdate {
	if s != nil {
		siecu.SetEndpoint(*s)
	}
	return siecu
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (siecu *ServiceIntrospectionEndpointConfigUpdate) SetServiceID(id string) *ServiceIntrospectionEndpointConfigUpdate {
	siecu.mutation.SetServiceID(id)
	return siecu
}

// SetService sets the "service" edge to the Service entity.
func (siecu *ServiceIntrospectionEndpointConfigUpdate) SetService(s *Service) *ServiceIntrospectionEndpointConfigUpdate {
	return siecu.SetServiceID(s.ID)
}

// Mutation returns the ServiceIntrospectionEndpointConfigMutation object of the builder.
func (siecu *ServiceIntrospectionEndpointConfigUpdate) Mutation() *ServiceIntrospectionEndpointConfigMutation {
	return siecu.mutation
}

// ClearService clears the "service" edge to the Service entity.
func (siecu *ServiceIntrospectionEndpointConfigUpdate) ClearService() *ServiceIntrospectionEndpointConfigUpdate {
	siecu.mutation.ClearService()
	return siecu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (siecu *ServiceIntrospectionEndpointConfigUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, siecu.sqlSave, siecu.mutation, siecu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (siecu *ServiceIntrospectionEndpointConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := siecu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (siecu *ServiceIntrospectionEndpointConfigUpdate) Exec(ctx context.Context) error {
	_, err := siecu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (siecu *ServiceIntrospectionEndpointConfigUpdate) ExecX(ctx context.Context) {
	if err := siecu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (siecu *ServiceIntrospectionEndpointConfigUpdate) check() error {
	if v, ok := siecu.mutation.Endpoint(); ok {
		if err := serviceintrospectionendpointconfig.EndpointValidator(v); err != nil {
			return &ValidationError{Name: "endpoint", err: fmt.Errorf(`ent: validator failed for field "ServiceIntrospectionEndpointConfig.endpoint": %w`, err)}
		}
	}
	if _, ok := siecu.mutation.ServiceID(); siecu.mutation.ServiceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ServiceIntrospectionEndpointConfig.service"`)
	}
	return nil
}

func (siecu *ServiceIntrospectionEndpointConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := siecu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(serviceintrospectionendpointconfig.Table, serviceintrospectionendpointconfig.Columns, sqlgraph.NewFieldSpec(serviceintrospectionendpointconfig.FieldID, field.TypeString))
	if ps := siecu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := siecu.mutation.Endpoint(); ok {
		_spec.SetField(serviceintrospectionendpointconfig.FieldEndpoint, field.TypeString, value)
	}
	if siecu.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   serviceintrospectionendpointconfig.ServiceTable,
			Columns: []string{serviceintrospectionendpointconfig.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siecu.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   serviceintrospectionendpointconfig.ServiceTable,
			Columns: []string{serviceintrospectionendpointconfig.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, siecu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{serviceintrospectionendpointconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	siecu.mutation.done = true
	return n, nil
}

// ServiceIntrospectionEndpointConfigUpdateOne is the builder for updating a single ServiceIntrospectionEndpointConfig entity.
type ServiceIntrospectionEndpointConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServiceIntrospectionEndpointConfigMutation
}

// SetEndpoint sets the "endpoint" field.
func (siecuo *ServiceIntrospectionEndpointConfigUpdateOne) SetEndpoint(s string) *ServiceIntrospectionEndpointConfigUpdateOne {
	siecuo.mutation.SetEndpoint(s)
	return siecuo
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (siecuo *ServiceIntrospectionEndpointConfigUpdateOne) SetNillableEndpoint(s *string) *ServiceIntrospectionEndpointConfigUpdateOne {
	if s != nil {
		siecuo.SetEndpoint(*s)
	}
	return siecuo
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (siecuo *ServiceIntrospectionEndpointConfigUpdateOne) SetServiceID(id string) *ServiceIntrospectionEndpointConfigUpdateOne {
	siecuo.mutation.SetServiceID(id)
	return siecuo
}

// SetService sets the "service" edge to the Service entity.
func (siecuo *ServiceIntrospectionEndpointConfigUpdateOne) SetService(s *Service) *ServiceIntrospectionEndpointConfigUpdateOne {
	return siecuo.SetServiceID(s.ID)
}

// Mutation returns the ServiceIntrospectionEndpointConfigMutation object of the builder.
func (siecuo *ServiceIntrospectionEndpointConfigUpdateOne) Mutation() *ServiceIntrospectionEndpointConfigMutation {
	return siecuo.mutation
}

// ClearService clears the "service" edge to the Service entity.
func (siecuo *ServiceIntrospectionEndpointConfigUpdateOne) ClearService() *ServiceIntrospectionEndpointConfigUpdateOne {
	siecuo.mutation.ClearService()
	return siecuo
}

// Where appends a list predicates to the ServiceIntrospectionEndpointConfigUpdate builder.
func (siecuo *ServiceIntrospectionEndpointConfigUpdateOne) Where(ps ...predicate.ServiceIntrospectionEndpointConfig) *ServiceIntrospectionEndpointConfigUpdateOne {
	siecuo.mutation.Where(ps...)
	return siecuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (siecuo *ServiceIntrospectionEndpointConfigUpdateOne) Select(field string, fields ...string) *ServiceIntrospectionEndpointConfigUpdateOne {
	siecuo.fields = append([]string{field}, fields...)
	return siecuo
}

// Save executes the query and returns the updated ServiceIntrospectionEndpointConfig entity.
func (siecuo *ServiceIntrospectionEndpointConfigUpdateOne) Save(ctx context.Context) (*ServiceIntrospectionEndpointConfig, error) {
	return withHooks(ctx, siecuo.sqlSave, siecuo.mutation, siecuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (siecuo *ServiceIntrospectionEndpointConfigUpdateOne) SaveX(ctx context.Context) *ServiceIntrospectionEndpointConfig {
	node, err := siecuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (siecuo *ServiceIntrospectionEndpointConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := siecuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (siecuo *ServiceIntrospectionEndpointConfigUpdateOne) ExecX(ctx context.Context) {
	if err := siecuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (siecuo *ServiceIntrospectionEndpointConfigUpdateOne) check() error {
	if v, ok := siecuo.mutation.Endpoint(); ok {
		if err := serviceintrospectionendpointconfig.EndpointValidator(v); err != nil {
			return &ValidationError{Name: "endpoint", err: fmt.Errorf(`ent: validator failed for field "ServiceIntrospectionEndpointConfig.endpoint": %w`, err)}
		}
	}
	if _, ok := siecuo.mutation.ServiceID(); siecuo.mutation.ServiceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ServiceIntrospectionEndpointConfig.service"`)
	}
	return nil
}

func (siecuo *ServiceIntrospectionEndpointConfigUpdateOne) sqlSave(ctx context.Context) (_node *ServiceIntrospectionEndpointConfig, err error) {
	if err := siecuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(serviceintrospectionendpointconfig.Table, serviceintrospectionendpointconfig.Columns, sqlgraph.NewFieldSpec(serviceintrospectionendpointconfig.FieldID, field.TypeString))
	id, ok := siecuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ServiceIntrospectionEndpointConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := siecuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, serviceintrospectionendpointconfig.FieldID)
		for _, f := range fields {
			if !serviceintrospectionendpointconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != serviceintrospectionendpointconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := siecuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := siecuo.mutation.Endpoint(); ok {
		_spec.SetField(serviceintrospectionendpointconfig.FieldEndpoint, field.TypeString, value)
	}
	if siecuo.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   serviceintrospectionendpointconfig.ServiceTable,
			Columns: []string{serviceintrospectionendpointconfig.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siecuo.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   serviceintrospectionendpointconfig.ServiceTable,
			Columns: []string{serviceintrospectionendpointconfig.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ServiceIntrospectionEndpointConfig{config: siecuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, siecuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{serviceintrospectionendpointconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	siecuo.mutation.done = true
	return _node, nil
}
