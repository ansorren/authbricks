// Code generated by ent, DO NOT EDIT.

package credentials

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the credentials type in the database.
	Label = "credentials"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldClientID holds the string denoting the client_id field in the database.
	FieldClientID = "client_id"
	// FieldClientSecret holds the string denoting the client_secret field in the database.
	FieldClientSecret = "client_secret"
	// EdgeOauthClient holds the string denoting the oauth_client edge name in mutations.
	EdgeOauthClient = "oauth_client"
	// Table holds the table name of the credentials in the database.
	Table = "credentials"
	// OauthClientTable is the table that holds the oauth_client relation/edge.
	OauthClientTable = "credentials"
	// OauthClientInverseTable is the table name for the Application entity.
	// It exists in this package in order to avoid circular dependency with the "application" package.
	OauthClientInverseTable = "applications"
	// OauthClientColumn is the table column denoting the oauth_client relation/edge.
	OauthClientColumn = "application_credentials"
)

// Columns holds all SQL columns for credentials fields.
var Columns = []string{
	FieldID,
	FieldClientID,
	FieldClientSecret,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "credentials"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"application_credentials",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// ClientIDValidator is a validator for the "client_id" field. It is called by the builders before save.
	ClientIDValidator func(string) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the Credentials queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByClientID orders the results by the client_id field.
func ByClientID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientID, opts...).ToFunc()
}

// ByClientSecret orders the results by the client_secret field.
func ByClientSecret(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientSecret, opts...).ToFunc()
}

// ByOauthClientField orders the results by oauth_client field.
func ByOauthClientField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOauthClientStep(), sql.OrderByField(field, opts...))
	}
}
func newOauthClientStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OauthClientInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OauthClientTable, OauthClientColumn),
	)
}
