// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.authbricks.com/bricks/ent/cookiestore"
	"go.authbricks.com/bricks/ent/predicate"
)

// CookieStoreUpdate is the builder for updating CookieStore entities.
type CookieStoreUpdate struct {
	config
	hooks    []Hook
	mutation *CookieStoreMutation
}

// Where appends a list predicates to the CookieStoreUpdate builder.
func (csu *CookieStoreUpdate) Where(ps ...predicate.CookieStore) *CookieStoreUpdate {
	csu.mutation.Where(ps...)
	return csu
}

// SetAuthKey sets the "auth_key" field.
func (csu *CookieStoreUpdate) SetAuthKey(s string) *CookieStoreUpdate {
	csu.mutation.SetAuthKey(s)
	return csu
}

// SetNillableAuthKey sets the "auth_key" field if the given value is not nil.
func (csu *CookieStoreUpdate) SetNillableAuthKey(s *string) *CookieStoreUpdate {
	if s != nil {
		csu.SetAuthKey(*s)
	}
	return csu
}

// SetEncryptionKey sets the "encryption_key" field.
func (csu *CookieStoreUpdate) SetEncryptionKey(s string) *CookieStoreUpdate {
	csu.mutation.SetEncryptionKey(s)
	return csu
}

// SetNillableEncryptionKey sets the "encryption_key" field if the given value is not nil.
func (csu *CookieStoreUpdate) SetNillableEncryptionKey(s *string) *CookieStoreUpdate {
	if s != nil {
		csu.SetEncryptionKey(*s)
	}
	return csu
}

// Mutation returns the CookieStoreMutation object of the builder.
func (csu *CookieStoreUpdate) Mutation() *CookieStoreMutation {
	return csu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (csu *CookieStoreUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, csu.sqlSave, csu.mutation, csu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csu *CookieStoreUpdate) SaveX(ctx context.Context) int {
	affected, err := csu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (csu *CookieStoreUpdate) Exec(ctx context.Context) error {
	_, err := csu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csu *CookieStoreUpdate) ExecX(ctx context.Context) {
	if err := csu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csu *CookieStoreUpdate) check() error {
	if v, ok := csu.mutation.AuthKey(); ok {
		if err := cookiestore.AuthKeyValidator(v); err != nil {
			return &ValidationError{Name: "auth_key", err: fmt.Errorf(`ent: validator failed for field "CookieStore.auth_key": %w`, err)}
		}
	}
	if v, ok := csu.mutation.EncryptionKey(); ok {
		if err := cookiestore.EncryptionKeyValidator(v); err != nil {
			return &ValidationError{Name: "encryption_key", err: fmt.Errorf(`ent: validator failed for field "CookieStore.encryption_key": %w`, err)}
		}
	}
	return nil
}

func (csu *CookieStoreUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := csu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(cookiestore.Table, cookiestore.Columns, sqlgraph.NewFieldSpec(cookiestore.FieldID, field.TypeString))
	if ps := csu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csu.mutation.AuthKey(); ok {
		_spec.SetField(cookiestore.FieldAuthKey, field.TypeString, value)
	}
	if value, ok := csu.mutation.EncryptionKey(); ok {
		_spec.SetField(cookiestore.FieldEncryptionKey, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, csu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cookiestore.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	csu.mutation.done = true
	return n, nil
}

// CookieStoreUpdateOne is the builder for updating a single CookieStore entity.
type CookieStoreUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CookieStoreMutation
}

// SetAuthKey sets the "auth_key" field.
func (csuo *CookieStoreUpdateOne) SetAuthKey(s string) *CookieStoreUpdateOne {
	csuo.mutation.SetAuthKey(s)
	return csuo
}

// SetNillableAuthKey sets the "auth_key" field if the given value is not nil.
func (csuo *CookieStoreUpdateOne) SetNillableAuthKey(s *string) *CookieStoreUpdateOne {
	if s != nil {
		csuo.SetAuthKey(*s)
	}
	return csuo
}

// SetEncryptionKey sets the "encryption_key" field.
func (csuo *CookieStoreUpdateOne) SetEncryptionKey(s string) *CookieStoreUpdateOne {
	csuo.mutation.SetEncryptionKey(s)
	return csuo
}

// SetNillableEncryptionKey sets the "encryption_key" field if the given value is not nil.
func (csuo *CookieStoreUpdateOne) SetNillableEncryptionKey(s *string) *CookieStoreUpdateOne {
	if s != nil {
		csuo.SetEncryptionKey(*s)
	}
	return csuo
}

// Mutation returns the CookieStoreMutation object of the builder.
func (csuo *CookieStoreUpdateOne) Mutation() *CookieStoreMutation {
	return csuo.mutation
}

// Where appends a list predicates to the CookieStoreUpdate builder.
func (csuo *CookieStoreUpdateOne) Where(ps ...predicate.CookieStore) *CookieStoreUpdateOne {
	csuo.mutation.Where(ps...)
	return csuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (csuo *CookieStoreUpdateOne) Select(field string, fields ...string) *CookieStoreUpdateOne {
	csuo.fields = append([]string{field}, fields...)
	return csuo
}

// Save executes the query and returns the updated CookieStore entity.
func (csuo *CookieStoreUpdateOne) Save(ctx context.Context) (*CookieStore, error) {
	return withHooks(ctx, csuo.sqlSave, csuo.mutation, csuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csuo *CookieStoreUpdateOne) SaveX(ctx context.Context) *CookieStore {
	node, err := csuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (csuo *CookieStoreUpdateOne) Exec(ctx context.Context) error {
	_, err := csuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csuo *CookieStoreUpdateOne) ExecX(ctx context.Context) {
	if err := csuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csuo *CookieStoreUpdateOne) check() error {
	if v, ok := csuo.mutation.AuthKey(); ok {
		if err := cookiestore.AuthKeyValidator(v); err != nil {
			return &ValidationError{Name: "auth_key", err: fmt.Errorf(`ent: validator failed for field "CookieStore.auth_key": %w`, err)}
		}
	}
	if v, ok := csuo.mutation.EncryptionKey(); ok {
		if err := cookiestore.EncryptionKeyValidator(v); err != nil {
			return &ValidationError{Name: "encryption_key", err: fmt.Errorf(`ent: validator failed for field "CookieStore.encryption_key": %w`, err)}
		}
	}
	return nil
}

func (csuo *CookieStoreUpdateOne) sqlSave(ctx context.Context) (_node *CookieStore, err error) {
	if err := csuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(cookiestore.Table, cookiestore.Columns, sqlgraph.NewFieldSpec(cookiestore.FieldID, field.TypeString))
	id, ok := csuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CookieStore.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := csuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cookiestore.FieldID)
		for _, f := range fields {
			if !cookiestore.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cookiestore.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := csuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csuo.mutation.AuthKey(); ok {
		_spec.SetField(cookiestore.FieldAuthKey, field.TypeString, value)
	}
	if value, ok := csuo.mutation.EncryptionKey(); ok {
		_spec.SetField(cookiestore.FieldEncryptionKey, field.TypeString, value)
	}
	_node = &CookieStore{config: csuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, csuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cookiestore.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	csuo.mutation.done = true
	return _node, nil
}
