// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.authbricks.com/bricks/ent/connectionconfig"
	"go.authbricks.com/bricks/ent/emailpasswordconnection"
	"go.authbricks.com/bricks/ent/oidcconnection"
	"go.authbricks.com/bricks/ent/predicate"
	"go.authbricks.com/bricks/ent/service"
)

// ConnectionConfigUpdate is the builder for updating ConnectionConfig entities.
type ConnectionConfigUpdate struct {
	config
	hooks    []Hook
	mutation *ConnectionConfigMutation
}

// Where appends a list predicates to the ConnectionConfigUpdate builder.
func (ccu *ConnectionConfigUpdate) Where(ps ...predicate.ConnectionConfig) *ConnectionConfigUpdate {
	ccu.mutation.Where(ps...)
	return ccu
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (ccu *ConnectionConfigUpdate) SetServiceID(id string) *ConnectionConfigUpdate {
	ccu.mutation.SetServiceID(id)
	return ccu
}

// SetService sets the "service" edge to the Service entity.
func (ccu *ConnectionConfigUpdate) SetService(s *Service) *ConnectionConfigUpdate {
	return ccu.SetServiceID(s.ID)
}

// AddOidcConnectionIDs adds the "oidc_connections" edge to the OIDCConnection entity by IDs.
func (ccu *ConnectionConfigUpdate) AddOidcConnectionIDs(ids ...string) *ConnectionConfigUpdate {
	ccu.mutation.AddOidcConnectionIDs(ids...)
	return ccu
}

// AddOidcConnections adds the "oidc_connections" edges to the OIDCConnection entity.
func (ccu *ConnectionConfigUpdate) AddOidcConnections(o ...*OIDCConnection) *ConnectionConfigUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ccu.AddOidcConnectionIDs(ids...)
}

// SetEmailPasswordConnectionID sets the "email_password_connection" edge to the EmailPasswordConnection entity by ID.
func (ccu *ConnectionConfigUpdate) SetEmailPasswordConnectionID(id string) *ConnectionConfigUpdate {
	ccu.mutation.SetEmailPasswordConnectionID(id)
	return ccu
}

// SetNillableEmailPasswordConnectionID sets the "email_password_connection" edge to the EmailPasswordConnection entity by ID if the given value is not nil.
func (ccu *ConnectionConfigUpdate) SetNillableEmailPasswordConnectionID(id *string) *ConnectionConfigUpdate {
	if id != nil {
		ccu = ccu.SetEmailPasswordConnectionID(*id)
	}
	return ccu
}

// SetEmailPasswordConnection sets the "email_password_connection" edge to the EmailPasswordConnection entity.
func (ccu *ConnectionConfigUpdate) SetEmailPasswordConnection(e *EmailPasswordConnection) *ConnectionConfigUpdate {
	return ccu.SetEmailPasswordConnectionID(e.ID)
}

// Mutation returns the ConnectionConfigMutation object of the builder.
func (ccu *ConnectionConfigUpdate) Mutation() *ConnectionConfigMutation {
	return ccu.mutation
}

// ClearService clears the "service" edge to the Service entity.
func (ccu *ConnectionConfigUpdate) ClearService() *ConnectionConfigUpdate {
	ccu.mutation.ClearService()
	return ccu
}

// ClearOidcConnections clears all "oidc_connections" edges to the OIDCConnection entity.
func (ccu *ConnectionConfigUpdate) ClearOidcConnections() *ConnectionConfigUpdate {
	ccu.mutation.ClearOidcConnections()
	return ccu
}

// RemoveOidcConnectionIDs removes the "oidc_connections" edge to OIDCConnection entities by IDs.
func (ccu *ConnectionConfigUpdate) RemoveOidcConnectionIDs(ids ...string) *ConnectionConfigUpdate {
	ccu.mutation.RemoveOidcConnectionIDs(ids...)
	return ccu
}

// RemoveOidcConnections removes "oidc_connections" edges to OIDCConnection entities.
func (ccu *ConnectionConfigUpdate) RemoveOidcConnections(o ...*OIDCConnection) *ConnectionConfigUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ccu.RemoveOidcConnectionIDs(ids...)
}

// ClearEmailPasswordConnection clears the "email_password_connection" edge to the EmailPasswordConnection entity.
func (ccu *ConnectionConfigUpdate) ClearEmailPasswordConnection() *ConnectionConfigUpdate {
	ccu.mutation.ClearEmailPasswordConnection()
	return ccu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ccu *ConnectionConfigUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ccu.sqlSave, ccu.mutation, ccu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ccu *ConnectionConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := ccu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ccu *ConnectionConfigUpdate) Exec(ctx context.Context) error {
	_, err := ccu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccu *ConnectionConfigUpdate) ExecX(ctx context.Context) {
	if err := ccu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccu *ConnectionConfigUpdate) check() error {
	if _, ok := ccu.mutation.ServiceID(); ccu.mutation.ServiceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ConnectionConfig.service"`)
	}
	return nil
}

func (ccu *ConnectionConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ccu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(connectionconfig.Table, connectionconfig.Columns, sqlgraph.NewFieldSpec(connectionconfig.FieldID, field.TypeString))
	if ps := ccu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ccu.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   connectionconfig.ServiceTable,
			Columns: []string{connectionconfig.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccu.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   connectionconfig.ServiceTable,
			Columns: []string{connectionconfig.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ccu.mutation.OidcConnectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connectionconfig.OidcConnectionsTable,
			Columns: []string{connectionconfig.OidcConnectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oidcconnection.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccu.mutation.RemovedOidcConnectionsIDs(); len(nodes) > 0 && !ccu.mutation.OidcConnectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connectionconfig.OidcConnectionsTable,
			Columns: []string{connectionconfig.OidcConnectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oidcconnection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccu.mutation.OidcConnectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connectionconfig.OidcConnectionsTable,
			Columns: []string{connectionconfig.OidcConnectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oidcconnection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ccu.mutation.EmailPasswordConnectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   connectionconfig.EmailPasswordConnectionTable,
			Columns: []string{connectionconfig.EmailPasswordConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailpasswordconnection.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccu.mutation.EmailPasswordConnectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   connectionconfig.EmailPasswordConnectionTable,
			Columns: []string{connectionconfig.EmailPasswordConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailpasswordconnection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ccu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{connectionconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ccu.mutation.done = true
	return n, nil
}

// ConnectionConfigUpdateOne is the builder for updating a single ConnectionConfig entity.
type ConnectionConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConnectionConfigMutation
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (ccuo *ConnectionConfigUpdateOne) SetServiceID(id string) *ConnectionConfigUpdateOne {
	ccuo.mutation.SetServiceID(id)
	return ccuo
}

// SetService sets the "service" edge to the Service entity.
func (ccuo *ConnectionConfigUpdateOne) SetService(s *Service) *ConnectionConfigUpdateOne {
	return ccuo.SetServiceID(s.ID)
}

// AddOidcConnectionIDs adds the "oidc_connections" edge to the OIDCConnection entity by IDs.
func (ccuo *ConnectionConfigUpdateOne) AddOidcConnectionIDs(ids ...string) *ConnectionConfigUpdateOne {
	ccuo.mutation.AddOidcConnectionIDs(ids...)
	return ccuo
}

// AddOidcConnections adds the "oidc_connections" edges to the OIDCConnection entity.
func (ccuo *ConnectionConfigUpdateOne) AddOidcConnections(o ...*OIDCConnection) *ConnectionConfigUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ccuo.AddOidcConnectionIDs(ids...)
}

// SetEmailPasswordConnectionID sets the "email_password_connection" edge to the EmailPasswordConnection entity by ID.
func (ccuo *ConnectionConfigUpdateOne) SetEmailPasswordConnectionID(id string) *ConnectionConfigUpdateOne {
	ccuo.mutation.SetEmailPasswordConnectionID(id)
	return ccuo
}

// SetNillableEmailPasswordConnectionID sets the "email_password_connection" edge to the EmailPasswordConnection entity by ID if the given value is not nil.
func (ccuo *ConnectionConfigUpdateOne) SetNillableEmailPasswordConnectionID(id *string) *ConnectionConfigUpdateOne {
	if id != nil {
		ccuo = ccuo.SetEmailPasswordConnectionID(*id)
	}
	return ccuo
}

// SetEmailPasswordConnection sets the "email_password_connection" edge to the EmailPasswordConnection entity.
func (ccuo *ConnectionConfigUpdateOne) SetEmailPasswordConnection(e *EmailPasswordConnection) *ConnectionConfigUpdateOne {
	return ccuo.SetEmailPasswordConnectionID(e.ID)
}

// Mutation returns the ConnectionConfigMutation object of the builder.
func (ccuo *ConnectionConfigUpdateOne) Mutation() *ConnectionConfigMutation {
	return ccuo.mutation
}

// ClearService clears the "service" edge to the Service entity.
func (ccuo *ConnectionConfigUpdateOne) ClearService() *ConnectionConfigUpdateOne {
	ccuo.mutation.ClearService()
	return ccuo
}

// ClearOidcConnections clears all "oidc_connections" edges to the OIDCConnection entity.
func (ccuo *ConnectionConfigUpdateOne) ClearOidcConnections() *ConnectionConfigUpdateOne {
	ccuo.mutation.ClearOidcConnections()
	return ccuo
}

// RemoveOidcConnectionIDs removes the "oidc_connections" edge to OIDCConnection entities by IDs.
func (ccuo *ConnectionConfigUpdateOne) RemoveOidcConnectionIDs(ids ...string) *ConnectionConfigUpdateOne {
	ccuo.mutation.RemoveOidcConnectionIDs(ids...)
	return ccuo
}

// RemoveOidcConnections removes "oidc_connections" edges to OIDCConnection entities.
func (ccuo *ConnectionConfigUpdateOne) RemoveOidcConnections(o ...*OIDCConnection) *ConnectionConfigUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ccuo.RemoveOidcConnectionIDs(ids...)
}

// ClearEmailPasswordConnection clears the "email_password_connection" edge to the EmailPasswordConnection entity.
func (ccuo *ConnectionConfigUpdateOne) ClearEmailPasswordConnection() *ConnectionConfigUpdateOne {
	ccuo.mutation.ClearEmailPasswordConnection()
	return ccuo
}

// Where appends a list predicates to the ConnectionConfigUpdate builder.
func (ccuo *ConnectionConfigUpdateOne) Where(ps ...predicate.ConnectionConfig) *ConnectionConfigUpdateOne {
	ccuo.mutation.Where(ps...)
	return ccuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ccuo *ConnectionConfigUpdateOne) Select(field string, fields ...string) *ConnectionConfigUpdateOne {
	ccuo.fields = append([]string{field}, fields...)
	return ccuo
}

// Save executes the query and returns the updated ConnectionConfig entity.
func (ccuo *ConnectionConfigUpdateOne) Save(ctx context.Context) (*ConnectionConfig, error) {
	return withHooks(ctx, ccuo.sqlSave, ccuo.mutation, ccuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ccuo *ConnectionConfigUpdateOne) SaveX(ctx context.Context) *ConnectionConfig {
	node, err := ccuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ccuo *ConnectionConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := ccuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccuo *ConnectionConfigUpdateOne) ExecX(ctx context.Context) {
	if err := ccuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccuo *ConnectionConfigUpdateOne) check() error {
	if _, ok := ccuo.mutation.ServiceID(); ccuo.mutation.ServiceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ConnectionConfig.service"`)
	}
	return nil
}

func (ccuo *ConnectionConfigUpdateOne) sqlSave(ctx context.Context) (_node *ConnectionConfig, err error) {
	if err := ccuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(connectionconfig.Table, connectionconfig.Columns, sqlgraph.NewFieldSpec(connectionconfig.FieldID, field.TypeString))
	id, ok := ccuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ConnectionConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ccuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, connectionconfig.FieldID)
		for _, f := range fields {
			if !connectionconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != connectionconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ccuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ccuo.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   connectionconfig.ServiceTable,
			Columns: []string{connectionconfig.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccuo.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   connectionconfig.ServiceTable,
			Columns: []string{connectionconfig.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ccuo.mutation.OidcConnectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connectionconfig.OidcConnectionsTable,
			Columns: []string{connectionconfig.OidcConnectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oidcconnection.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccuo.mutation.RemovedOidcConnectionsIDs(); len(nodes) > 0 && !ccuo.mutation.OidcConnectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connectionconfig.OidcConnectionsTable,
			Columns: []string{connectionconfig.OidcConnectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oidcconnection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccuo.mutation.OidcConnectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connectionconfig.OidcConnectionsTable,
			Columns: []string{connectionconfig.OidcConnectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oidcconnection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ccuo.mutation.EmailPasswordConnectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   connectionconfig.EmailPasswordConnectionTable,
			Columns: []string{connectionconfig.EmailPasswordConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailpasswordconnection.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccuo.mutation.EmailPasswordConnectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   connectionconfig.EmailPasswordConnectionTable,
			Columns: []string{connectionconfig.EmailPasswordConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailpasswordconnection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ConnectionConfig{config: ccuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ccuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{connectionconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ccuo.mutation.done = true
	return _node, nil
}
