// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.authbricks.com/bricks/ent/predicate"
	"go.authbricks.com/bricks/ent/service"
	"go.authbricks.com/bricks/ent/wellknownendpointconfig"
)

// WellKnownEndpointConfigUpdate is the builder for updating WellKnownEndpointConfig entities.
type WellKnownEndpointConfigUpdate struct {
	config
	hooks    []Hook
	mutation *WellKnownEndpointConfigMutation
}

// Where appends a list predicates to the WellKnownEndpointConfigUpdate builder.
func (wkecu *WellKnownEndpointConfigUpdate) Where(ps ...predicate.WellKnownEndpointConfig) *WellKnownEndpointConfigUpdate {
	wkecu.mutation.Where(ps...)
	return wkecu
}

// SetEndpoint sets the "endpoint" field.
func (wkecu *WellKnownEndpointConfigUpdate) SetEndpoint(s string) *WellKnownEndpointConfigUpdate {
	wkecu.mutation.SetEndpoint(s)
	return wkecu
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (wkecu *WellKnownEndpointConfigUpdate) SetNillableEndpoint(s *string) *WellKnownEndpointConfigUpdate {
	if s != nil {
		wkecu.SetEndpoint(*s)
	}
	return wkecu
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (wkecu *WellKnownEndpointConfigUpdate) SetServiceID(id string) *WellKnownEndpointConfigUpdate {
	wkecu.mutation.SetServiceID(id)
	return wkecu
}

// SetService sets the "service" edge to the Service entity.
func (wkecu *WellKnownEndpointConfigUpdate) SetService(s *Service) *WellKnownEndpointConfigUpdate {
	return wkecu.SetServiceID(s.ID)
}

// Mutation returns the WellKnownEndpointConfigMutation object of the builder.
func (wkecu *WellKnownEndpointConfigUpdate) Mutation() *WellKnownEndpointConfigMutation {
	return wkecu.mutation
}

// ClearService clears the "service" edge to the Service entity.
func (wkecu *WellKnownEndpointConfigUpdate) ClearService() *WellKnownEndpointConfigUpdate {
	wkecu.mutation.ClearService()
	return wkecu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wkecu *WellKnownEndpointConfigUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wkecu.sqlSave, wkecu.mutation, wkecu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wkecu *WellKnownEndpointConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := wkecu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wkecu *WellKnownEndpointConfigUpdate) Exec(ctx context.Context) error {
	_, err := wkecu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wkecu *WellKnownEndpointConfigUpdate) ExecX(ctx context.Context) {
	if err := wkecu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wkecu *WellKnownEndpointConfigUpdate) check() error {
	if v, ok := wkecu.mutation.Endpoint(); ok {
		if err := wellknownendpointconfig.EndpointValidator(v); err != nil {
			return &ValidationError{Name: "endpoint", err: fmt.Errorf(`ent: validator failed for field "WellKnownEndpointConfig.endpoint": %w`, err)}
		}
	}
	if _, ok := wkecu.mutation.ServiceID(); wkecu.mutation.ServiceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "WellKnownEndpointConfig.service"`)
	}
	return nil
}

func (wkecu *WellKnownEndpointConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wkecu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(wellknownendpointconfig.Table, wellknownendpointconfig.Columns, sqlgraph.NewFieldSpec(wellknownendpointconfig.FieldID, field.TypeString))
	if ps := wkecu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wkecu.mutation.Endpoint(); ok {
		_spec.SetField(wellknownendpointconfig.FieldEndpoint, field.TypeString, value)
	}
	if wkecu.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   wellknownendpointconfig.ServiceTable,
			Columns: []string{wellknownendpointconfig.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wkecu.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   wellknownendpointconfig.ServiceTable,
			Columns: []string{wellknownendpointconfig.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wkecu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wellknownendpointconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wkecu.mutation.done = true
	return n, nil
}

// WellKnownEndpointConfigUpdateOne is the builder for updating a single WellKnownEndpointConfig entity.
type WellKnownEndpointConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WellKnownEndpointConfigMutation
}

// SetEndpoint sets the "endpoint" field.
func (wkecuo *WellKnownEndpointConfigUpdateOne) SetEndpoint(s string) *WellKnownEndpointConfigUpdateOne {
	wkecuo.mutation.SetEndpoint(s)
	return wkecuo
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (wkecuo *WellKnownEndpointConfigUpdateOne) SetNillableEndpoint(s *string) *WellKnownEndpointConfigUpdateOne {
	if s != nil {
		wkecuo.SetEndpoint(*s)
	}
	return wkecuo
}

// SetServiceID sets the "service" edge to the Service entity by ID.
func (wkecuo *WellKnownEndpointConfigUpdateOne) SetServiceID(id string) *WellKnownEndpointConfigUpdateOne {
	wkecuo.mutation.SetServiceID(id)
	return wkecuo
}

// SetService sets the "service" edge to the Service entity.
func (wkecuo *WellKnownEndpointConfigUpdateOne) SetService(s *Service) *WellKnownEndpointConfigUpdateOne {
	return wkecuo.SetServiceID(s.ID)
}

// Mutation returns the WellKnownEndpointConfigMutation object of the builder.
func (wkecuo *WellKnownEndpointConfigUpdateOne) Mutation() *WellKnownEndpointConfigMutation {
	return wkecuo.mutation
}

// ClearService clears the "service" edge to the Service entity.
func (wkecuo *WellKnownEndpointConfigUpdateOne) ClearService() *WellKnownEndpointConfigUpdateOne {
	wkecuo.mutation.ClearService()
	return wkecuo
}

// Where appends a list predicates to the WellKnownEndpointConfigUpdate builder.
func (wkecuo *WellKnownEndpointConfigUpdateOne) Where(ps ...predicate.WellKnownEndpointConfig) *WellKnownEndpointConfigUpdateOne {
	wkecuo.mutation.Where(ps...)
	return wkecuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wkecuo *WellKnownEndpointConfigUpdateOne) Select(field string, fields ...string) *WellKnownEndpointConfigUpdateOne {
	wkecuo.fields = append([]string{field}, fields...)
	return wkecuo
}

// Save executes the query and returns the updated WellKnownEndpointConfig entity.
func (wkecuo *WellKnownEndpointConfigUpdateOne) Save(ctx context.Context) (*WellKnownEndpointConfig, error) {
	return withHooks(ctx, wkecuo.sqlSave, wkecuo.mutation, wkecuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wkecuo *WellKnownEndpointConfigUpdateOne) SaveX(ctx context.Context) *WellKnownEndpointConfig {
	node, err := wkecuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wkecuo *WellKnownEndpointConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := wkecuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wkecuo *WellKnownEndpointConfigUpdateOne) ExecX(ctx context.Context) {
	if err := wkecuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wkecuo *WellKnownEndpointConfigUpdateOne) check() error {
	if v, ok := wkecuo.mutation.Endpoint(); ok {
		if err := wellknownendpointconfig.EndpointValidator(v); err != nil {
			return &ValidationError{Name: "endpoint", err: fmt.Errorf(`ent: validator failed for field "WellKnownEndpointConfig.endpoint": %w`, err)}
		}
	}
	if _, ok := wkecuo.mutation.ServiceID(); wkecuo.mutation.ServiceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "WellKnownEndpointConfig.service"`)
	}
	return nil
}

func (wkecuo *WellKnownEndpointConfigUpdateOne) sqlSave(ctx context.Context) (_node *WellKnownEndpointConfig, err error) {
	if err := wkecuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(wellknownendpointconfig.Table, wellknownendpointconfig.Columns, sqlgraph.NewFieldSpec(wellknownendpointconfig.FieldID, field.TypeString))
	id, ok := wkecuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WellKnownEndpointConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wkecuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, wellknownendpointconfig.FieldID)
		for _, f := range fields {
			if !wellknownendpointconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != wellknownendpointconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wkecuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wkecuo.mutation.Endpoint(); ok {
		_spec.SetField(wellknownendpointconfig.FieldEndpoint, field.TypeString, value)
	}
	if wkecuo.mutation.ServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   wellknownendpointconfig.ServiceTable,
			Columns: []string{wellknownendpointconfig.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wkecuo.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   wellknownendpointconfig.ServiceTable,
			Columns: []string{wellknownendpointconfig.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WellKnownEndpointConfig{config: wkecuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wkecuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wellknownendpointconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wkecuo.mutation.done = true
	return _node, nil
}
