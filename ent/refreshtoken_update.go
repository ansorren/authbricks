// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.authbricks.com/bricks/ent/predicate"
	"go.authbricks.com/bricks/ent/refreshtoken"
)

// RefreshTokenUpdate is the builder for updating RefreshToken entities.
type RefreshTokenUpdate struct {
	config
	hooks    []Hook
	mutation *RefreshTokenMutation
}

// Where appends a list predicates to the RefreshTokenUpdate builder.
func (rtu *RefreshTokenUpdate) Where(ps ...predicate.RefreshToken) *RefreshTokenUpdate {
	rtu.mutation.Where(ps...)
	return rtu
}

// SetClientName sets the "client_name" field.
func (rtu *RefreshTokenUpdate) SetClientName(s string) *RefreshTokenUpdate {
	rtu.mutation.SetClientName(s)
	return rtu
}

// SetNillableClientName sets the "client_name" field if the given value is not nil.
func (rtu *RefreshTokenUpdate) SetNillableClientName(s *string) *RefreshTokenUpdate {
	if s != nil {
		rtu.SetClientName(*s)
	}
	return rtu
}

// SetServerName sets the "server_name" field.
func (rtu *RefreshTokenUpdate) SetServerName(s string) *RefreshTokenUpdate {
	rtu.mutation.SetServerName(s)
	return rtu
}

// SetNillableServerName sets the "server_name" field if the given value is not nil.
func (rtu *RefreshTokenUpdate) SetNillableServerName(s *string) *RefreshTokenUpdate {
	if s != nil {
		rtu.SetServerName(*s)
	}
	return rtu
}

// SetScopes sets the "scopes" field.
func (rtu *RefreshTokenUpdate) SetScopes(s string) *RefreshTokenUpdate {
	rtu.mutation.SetScopes(s)
	return rtu
}

// SetNillableScopes sets the "scopes" field if the given value is not nil.
func (rtu *RefreshTokenUpdate) SetNillableScopes(s *string) *RefreshTokenUpdate {
	if s != nil {
		rtu.SetScopes(*s)
	}
	return rtu
}

// SetCreatedAt sets the "created_at" field.
func (rtu *RefreshTokenUpdate) SetCreatedAt(i int64) *RefreshTokenUpdate {
	rtu.mutation.ResetCreatedAt()
	rtu.mutation.SetCreatedAt(i)
	return rtu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rtu *RefreshTokenUpdate) SetNillableCreatedAt(i *int64) *RefreshTokenUpdate {
	if i != nil {
		rtu.SetCreatedAt(*i)
	}
	return rtu
}

// AddCreatedAt adds i to the "created_at" field.
func (rtu *RefreshTokenUpdate) AddCreatedAt(i int64) *RefreshTokenUpdate {
	rtu.mutation.AddCreatedAt(i)
	return rtu
}

// SetAccessTokenID sets the "access_token_id" field.
func (rtu *RefreshTokenUpdate) SetAccessTokenID(s string) *RefreshTokenUpdate {
	rtu.mutation.SetAccessTokenID(s)
	return rtu
}

// SetNillableAccessTokenID sets the "access_token_id" field if the given value is not nil.
func (rtu *RefreshTokenUpdate) SetNillableAccessTokenID(s *string) *RefreshTokenUpdate {
	if s != nil {
		rtu.SetAccessTokenID(*s)
	}
	return rtu
}

// SetLifetime sets the "lifetime" field.
func (rtu *RefreshTokenUpdate) SetLifetime(i int64) *RefreshTokenUpdate {
	rtu.mutation.ResetLifetime()
	rtu.mutation.SetLifetime(i)
	return rtu
}

// SetNillableLifetime sets the "lifetime" field if the given value is not nil.
func (rtu *RefreshTokenUpdate) SetNillableLifetime(i *int64) *RefreshTokenUpdate {
	if i != nil {
		rtu.SetLifetime(*i)
	}
	return rtu
}

// AddLifetime adds i to the "lifetime" field.
func (rtu *RefreshTokenUpdate) AddLifetime(i int64) *RefreshTokenUpdate {
	rtu.mutation.AddLifetime(i)
	return rtu
}

// SetSubject sets the "subject" field.
func (rtu *RefreshTokenUpdate) SetSubject(s string) *RefreshTokenUpdate {
	rtu.mutation.SetSubject(s)
	return rtu
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (rtu *RefreshTokenUpdate) SetNillableSubject(s *string) *RefreshTokenUpdate {
	if s != nil {
		rtu.SetSubject(*s)
	}
	return rtu
}

// SetKeyID sets the "key_id" field.
func (rtu *RefreshTokenUpdate) SetKeyID(s string) *RefreshTokenUpdate {
	rtu.mutation.SetKeyID(s)
	return rtu
}

// SetNillableKeyID sets the "key_id" field if the given value is not nil.
func (rtu *RefreshTokenUpdate) SetNillableKeyID(s *string) *RefreshTokenUpdate {
	if s != nil {
		rtu.SetKeyID(*s)
	}
	return rtu
}

// SetAuthTime sets the "auth_time" field.
func (rtu *RefreshTokenUpdate) SetAuthTime(t time.Time) *RefreshTokenUpdate {
	rtu.mutation.SetAuthTime(t)
	return rtu
}

// SetNillableAuthTime sets the "auth_time" field if the given value is not nil.
func (rtu *RefreshTokenUpdate) SetNillableAuthTime(t *time.Time) *RefreshTokenUpdate {
	if t != nil {
		rtu.SetAuthTime(*t)
	}
	return rtu
}

// Mutation returns the RefreshTokenMutation object of the builder.
func (rtu *RefreshTokenUpdate) Mutation() *RefreshTokenMutation {
	return rtu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rtu *RefreshTokenUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rtu.sqlSave, rtu.mutation, rtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rtu *RefreshTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := rtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rtu *RefreshTokenUpdate) Exec(ctx context.Context) error {
	_, err := rtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtu *RefreshTokenUpdate) ExecX(ctx context.Context) {
	if err := rtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rtu *RefreshTokenUpdate) check() error {
	if v, ok := rtu.mutation.CreatedAt(); ok {
		if err := refreshtoken.CreatedAtValidator(v); err != nil {
			return &ValidationError{Name: "created_at", err: fmt.Errorf(`ent: validator failed for field "RefreshToken.created_at": %w`, err)}
		}
	}
	if v, ok := rtu.mutation.Lifetime(); ok {
		if err := refreshtoken.LifetimeValidator(v); err != nil {
			return &ValidationError{Name: "lifetime", err: fmt.Errorf(`ent: validator failed for field "RefreshToken.lifetime": %w`, err)}
		}
	}
	return nil
}

func (rtu *RefreshTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rtu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(refreshtoken.Table, refreshtoken.Columns, sqlgraph.NewFieldSpec(refreshtoken.FieldID, field.TypeString))
	if ps := rtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rtu.mutation.ClientName(); ok {
		_spec.SetField(refreshtoken.FieldClientName, field.TypeString, value)
	}
	if value, ok := rtu.mutation.ServerName(); ok {
		_spec.SetField(refreshtoken.FieldServerName, field.TypeString, value)
	}
	if value, ok := rtu.mutation.Scopes(); ok {
		_spec.SetField(refreshtoken.FieldScopes, field.TypeString, value)
	}
	if value, ok := rtu.mutation.CreatedAt(); ok {
		_spec.SetField(refreshtoken.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := rtu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(refreshtoken.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := rtu.mutation.AccessTokenID(); ok {
		_spec.SetField(refreshtoken.FieldAccessTokenID, field.TypeString, value)
	}
	if value, ok := rtu.mutation.Lifetime(); ok {
		_spec.SetField(refreshtoken.FieldLifetime, field.TypeInt64, value)
	}
	if value, ok := rtu.mutation.AddedLifetime(); ok {
		_spec.AddField(refreshtoken.FieldLifetime, field.TypeInt64, value)
	}
	if value, ok := rtu.mutation.Subject(); ok {
		_spec.SetField(refreshtoken.FieldSubject, field.TypeString, value)
	}
	if value, ok := rtu.mutation.KeyID(); ok {
		_spec.SetField(refreshtoken.FieldKeyID, field.TypeString, value)
	}
	if value, ok := rtu.mutation.AuthTime(); ok {
		_spec.SetField(refreshtoken.FieldAuthTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{refreshtoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rtu.mutation.done = true
	return n, nil
}

// RefreshTokenUpdateOne is the builder for updating a single RefreshToken entity.
type RefreshTokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RefreshTokenMutation
}

// SetClientName sets the "client_name" field.
func (rtuo *RefreshTokenUpdateOne) SetClientName(s string) *RefreshTokenUpdateOne {
	rtuo.mutation.SetClientName(s)
	return rtuo
}

// SetNillableClientName sets the "client_name" field if the given value is not nil.
func (rtuo *RefreshTokenUpdateOne) SetNillableClientName(s *string) *RefreshTokenUpdateOne {
	if s != nil {
		rtuo.SetClientName(*s)
	}
	return rtuo
}

// SetServerName sets the "server_name" field.
func (rtuo *RefreshTokenUpdateOne) SetServerName(s string) *RefreshTokenUpdateOne {
	rtuo.mutation.SetServerName(s)
	return rtuo
}

// SetNillableServerName sets the "server_name" field if the given value is not nil.
func (rtuo *RefreshTokenUpdateOne) SetNillableServerName(s *string) *RefreshTokenUpdateOne {
	if s != nil {
		rtuo.SetServerName(*s)
	}
	return rtuo
}

// SetScopes sets the "scopes" field.
func (rtuo *RefreshTokenUpdateOne) SetScopes(s string) *RefreshTokenUpdateOne {
	rtuo.mutation.SetScopes(s)
	return rtuo
}

// SetNillableScopes sets the "scopes" field if the given value is not nil.
func (rtuo *RefreshTokenUpdateOne) SetNillableScopes(s *string) *RefreshTokenUpdateOne {
	if s != nil {
		rtuo.SetScopes(*s)
	}
	return rtuo
}

// SetCreatedAt sets the "created_at" field.
func (rtuo *RefreshTokenUpdateOne) SetCreatedAt(i int64) *RefreshTokenUpdateOne {
	rtuo.mutation.ResetCreatedAt()
	rtuo.mutation.SetCreatedAt(i)
	return rtuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rtuo *RefreshTokenUpdateOne) SetNillableCreatedAt(i *int64) *RefreshTokenUpdateOne {
	if i != nil {
		rtuo.SetCreatedAt(*i)
	}
	return rtuo
}

// AddCreatedAt adds i to the "created_at" field.
func (rtuo *RefreshTokenUpdateOne) AddCreatedAt(i int64) *RefreshTokenUpdateOne {
	rtuo.mutation.AddCreatedAt(i)
	return rtuo
}

// SetAccessTokenID sets the "access_token_id" field.
func (rtuo *RefreshTokenUpdateOne) SetAccessTokenID(s string) *RefreshTokenUpdateOne {
	rtuo.mutation.SetAccessTokenID(s)
	return rtuo
}

// SetNillableAccessTokenID sets the "access_token_id" field if the given value is not nil.
func (rtuo *RefreshTokenUpdateOne) SetNillableAccessTokenID(s *string) *RefreshTokenUpdateOne {
	if s != nil {
		rtuo.SetAccessTokenID(*s)
	}
	return rtuo
}

// SetLifetime sets the "lifetime" field.
func (rtuo *RefreshTokenUpdateOne) SetLifetime(i int64) *RefreshTokenUpdateOne {
	rtuo.mutation.ResetLifetime()
	rtuo.mutation.SetLifetime(i)
	return rtuo
}

// SetNillableLifetime sets the "lifetime" field if the given value is not nil.
func (rtuo *RefreshTokenUpdateOne) SetNillableLifetime(i *int64) *RefreshTokenUpdateOne {
	if i != nil {
		rtuo.SetLifetime(*i)
	}
	return rtuo
}

// AddLifetime adds i to the "lifetime" field.
func (rtuo *RefreshTokenUpdateOne) AddLifetime(i int64) *RefreshTokenUpdateOne {
	rtuo.mutation.AddLifetime(i)
	return rtuo
}

// SetSubject sets the "subject" field.
func (rtuo *RefreshTokenUpdateOne) SetSubject(s string) *RefreshTokenUpdateOne {
	rtuo.mutation.SetSubject(s)
	return rtuo
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (rtuo *RefreshTokenUpdateOne) SetNillableSubject(s *string) *RefreshTokenUpdateOne {
	if s != nil {
		rtuo.SetSubject(*s)
	}
	return rtuo
}

// SetKeyID sets the "key_id" field.
func (rtuo *RefreshTokenUpdateOne) SetKeyID(s string) *RefreshTokenUpdateOne {
	rtuo.mutation.SetKeyID(s)
	return rtuo
}

// SetNillableKeyID sets the "key_id" field if the given value is not nil.
func (rtuo *RefreshTokenUpdateOne) SetNillableKeyID(s *string) *RefreshTokenUpdateOne {
	if s != nil {
		rtuo.SetKeyID(*s)
	}
	return rtuo
}

// SetAuthTime sets the "auth_time" field.
func (rtuo *RefreshTokenUpdateOne) SetAuthTime(t time.Time) *RefreshTokenUpdateOne {
	rtuo.mutation.SetAuthTime(t)
	return rtuo
}

// SetNillableAuthTime sets the "auth_time" field if the given value is not nil.
func (rtuo *RefreshTokenUpdateOne) SetNillableAuthTime(t *time.Time) *RefreshTokenUpdateOne {
	if t != nil {
		rtuo.SetAuthTime(*t)
	}
	return rtuo
}

// Mutation returns the RefreshTokenMutation object of the builder.
func (rtuo *RefreshTokenUpdateOne) Mutation() *RefreshTokenMutation {
	return rtuo.mutation
}

// Where appends a list predicates to the RefreshTokenUpdate builder.
func (rtuo *RefreshTokenUpdateOne) Where(ps ...predicate.RefreshToken) *RefreshTokenUpdateOne {
	rtuo.mutation.Where(ps...)
	return rtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rtuo *RefreshTokenUpdateOne) Select(field string, fields ...string) *RefreshTokenUpdateOne {
	rtuo.fields = append([]string{field}, fields...)
	return rtuo
}

// Save executes the query and returns the updated RefreshToken entity.
func (rtuo *RefreshTokenUpdateOne) Save(ctx context.Context) (*RefreshToken, error) {
	return withHooks(ctx, rtuo.sqlSave, rtuo.mutation, rtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rtuo *RefreshTokenUpdateOne) SaveX(ctx context.Context) *RefreshToken {
	node, err := rtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rtuo *RefreshTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := rtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtuo *RefreshTokenUpdateOne) ExecX(ctx context.Context) {
	if err := rtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rtuo *RefreshTokenUpdateOne) check() error {
	if v, ok := rtuo.mutation.CreatedAt(); ok {
		if err := refreshtoken.CreatedAtValidator(v); err != nil {
			return &ValidationError{Name: "created_at", err: fmt.Errorf(`ent: validator failed for field "RefreshToken.created_at": %w`, err)}
		}
	}
	if v, ok := rtuo.mutation.Lifetime(); ok {
		if err := refreshtoken.LifetimeValidator(v); err != nil {
			return &ValidationError{Name: "lifetime", err: fmt.Errorf(`ent: validator failed for field "RefreshToken.lifetime": %w`, err)}
		}
	}
	return nil
}

func (rtuo *RefreshTokenUpdateOne) sqlSave(ctx context.Context) (_node *RefreshToken, err error) {
	if err := rtuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(refreshtoken.Table, refreshtoken.Columns, sqlgraph.NewFieldSpec(refreshtoken.FieldID, field.TypeString))
	id, ok := rtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RefreshToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, refreshtoken.FieldID)
		for _, f := range fields {
			if !refreshtoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != refreshtoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rtuo.mutation.ClientName(); ok {
		_spec.SetField(refreshtoken.FieldClientName, field.TypeString, value)
	}
	if value, ok := rtuo.mutation.ServerName(); ok {
		_spec.SetField(refreshtoken.FieldServerName, field.TypeString, value)
	}
	if value, ok := rtuo.mutation.Scopes(); ok {
		_spec.SetField(refreshtoken.FieldScopes, field.TypeString, value)
	}
	if value, ok := rtuo.mutation.CreatedAt(); ok {
		_spec.SetField(refreshtoken.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := rtuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(refreshtoken.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := rtuo.mutation.AccessTokenID(); ok {
		_spec.SetField(refreshtoken.FieldAccessTokenID, field.TypeString, value)
	}
	if value, ok := rtuo.mutation.Lifetime(); ok {
		_spec.SetField(refreshtoken.FieldLifetime, field.TypeInt64, value)
	}
	if value, ok := rtuo.mutation.AddedLifetime(); ok {
		_spec.AddField(refreshtoken.FieldLifetime, field.TypeInt64, value)
	}
	if value, ok := rtuo.mutation.Subject(); ok {
		_spec.SetField(refreshtoken.FieldSubject, field.TypeString, value)
	}
	if value, ok := rtuo.mutation.KeyID(); ok {
		_spec.SetField(refreshtoken.FieldKeyID, field.TypeString, value)
	}
	if value, ok := rtuo.mutation.AuthTime(); ok {
		_spec.SetField(refreshtoken.FieldAuthTime, field.TypeTime, value)
	}
	_node = &RefreshToken{config: rtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{refreshtoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rtuo.mutation.done = true
	return _node, nil
}
