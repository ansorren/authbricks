// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"go.authbricks.com/bricks/ent/application"
	"go.authbricks.com/bricks/ent/codegrant"
)

// CodeGrant is the model entity for the CodeGrant schema.
type CodeGrant struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id"`
	// Scopes holds the value of the "scopes" field.
	Scopes []string `json:"scopes"`
	// Callbacks holds the value of the "callbacks" field.
	Callbacks []string `json:"callbacks"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CodeGrantQuery when eager-loading is set.
	Edges                  CodeGrantEdges `json:"edges"`
	application_code_grant *string
	selectValues           sql.SelectValues
}

// CodeGrantEdges holds the relations/edges for other nodes in the graph.
type CodeGrantEdges struct {
	// Application holds the value of the application edge.
	Application *Application `json:"application,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ApplicationOrErr returns the Application value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CodeGrantEdges) ApplicationOrErr() (*Application, error) {
	if e.Application != nil {
		return e.Application, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: application.Label}
	}
	return nil, &NotLoadedError{edge: "application"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CodeGrant) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case codegrant.FieldScopes, codegrant.FieldCallbacks:
			values[i] = new([]byte)
		case codegrant.FieldID:
			values[i] = new(sql.NullString)
		case codegrant.ForeignKeys[0]: // application_code_grant
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CodeGrant fields.
func (cg *CodeGrant) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case codegrant.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				cg.ID = value.String
			}
		case codegrant.FieldScopes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field scopes", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &cg.Scopes); err != nil {
					return fmt.Errorf("unmarshal field scopes: %w", err)
				}
			}
		case codegrant.FieldCallbacks:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field callbacks", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &cg.Callbacks); err != nil {
					return fmt.Errorf("unmarshal field callbacks: %w", err)
				}
			}
		case codegrant.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field application_code_grant", values[i])
			} else if value.Valid {
				cg.application_code_grant = new(string)
				*cg.application_code_grant = value.String
			}
		default:
			cg.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CodeGrant.
// This includes values selected through modifiers, order, etc.
func (cg *CodeGrant) Value(name string) (ent.Value, error) {
	return cg.selectValues.Get(name)
}

// QueryApplication queries the "application" edge of the CodeGrant entity.
func (cg *CodeGrant) QueryApplication() *ApplicationQuery {
	return NewCodeGrantClient(cg.config).QueryApplication(cg)
}

// Update returns a builder for updating this CodeGrant.
// Note that you need to call CodeGrant.Unwrap() before calling this method if this CodeGrant
// was returned from a transaction, and the transaction was committed or rolled back.
func (cg *CodeGrant) Update() *CodeGrantUpdateOne {
	return NewCodeGrantClient(cg.config).UpdateOne(cg)
}

// Unwrap unwraps the CodeGrant entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cg *CodeGrant) Unwrap() *CodeGrant {
	_tx, ok := cg.config.driver.(*txDriver)
	if !ok {
		panic("ent: CodeGrant is not a transactional entity")
	}
	cg.config.driver = _tx.drv
	return cg
}

// String implements the fmt.Stringer.
func (cg *CodeGrant) String() string {
	var builder strings.Builder
	builder.WriteString("CodeGrant(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cg.ID))
	builder.WriteString("scopes=")
	builder.WriteString(fmt.Sprintf("%v", cg.Scopes))
	builder.WriteString(", ")
	builder.WriteString("callbacks=")
	builder.WriteString(fmt.Sprintf("%v", cg.Callbacks))
	builder.WriteByte(')')
	return builder.String()
}

// CodeGrants is a parsable slice of CodeGrant.
type CodeGrants []*CodeGrant
