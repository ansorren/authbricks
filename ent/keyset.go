// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"go.authbricks.com/bricks/ent/keyset"
	"go.authbricks.com/bricks/ent/service"
)

// KeySet is the model entity for the KeySet schema.
type KeySet struct {
	config
	// ID of the ent.
	ID string `json:"id" hcl:"id"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the KeySetQuery when eager-loading is set.
	Edges           KeySetEdges `json:"edges"`
	service_key_set *string
	selectValues    sql.SelectValues
}

// KeySetEdges holds the relations/edges for other nodes in the graph.
type KeySetEdges struct {
	// Service holds the value of the service edge.
	Service *Service `json:"service,omitempty"`
	// SigningKeys holds the value of the signing_keys edge.
	SigningKeys []*SigningKey `json:"signing_keys,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ServiceOrErr returns the Service value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e KeySetEdges) ServiceOrErr() (*Service, error) {
	if e.Service != nil {
		return e.Service, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: service.Label}
	}
	return nil, &NotLoadedError{edge: "service"}
}

// SigningKeysOrErr returns the SigningKeys value or an error if the edge
// was not loaded in eager-loading.
func (e KeySetEdges) SigningKeysOrErr() ([]*SigningKey, error) {
	if e.loadedTypes[1] {
		return e.SigningKeys, nil
	}
	return nil, &NotLoadedError{edge: "signing_keys"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*KeySet) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case keyset.FieldID:
			values[i] = new(sql.NullString)
		case keyset.ForeignKeys[0]: // service_key_set
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the KeySet fields.
func (ks *KeySet) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case keyset.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ks.ID = value.String
			}
		case keyset.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field service_key_set", values[i])
			} else if value.Valid {
				ks.service_key_set = new(string)
				*ks.service_key_set = value.String
			}
		default:
			ks.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the KeySet.
// This includes values selected through modifiers, order, etc.
func (ks *KeySet) Value(name string) (ent.Value, error) {
	return ks.selectValues.Get(name)
}

// QueryService queries the "service" edge of the KeySet entity.
func (ks *KeySet) QueryService() *ServiceQuery {
	return NewKeySetClient(ks.config).QueryService(ks)
}

// QuerySigningKeys queries the "signing_keys" edge of the KeySet entity.
func (ks *KeySet) QuerySigningKeys() *SigningKeyQuery {
	return NewKeySetClient(ks.config).QuerySigningKeys(ks)
}

// Update returns a builder for updating this KeySet.
// Note that you need to call KeySet.Unwrap() before calling this method if this KeySet
// was returned from a transaction, and the transaction was committed or rolled back.
func (ks *KeySet) Update() *KeySetUpdateOne {
	return NewKeySetClient(ks.config).UpdateOne(ks)
}

// Unwrap unwraps the KeySet entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ks *KeySet) Unwrap() *KeySet {
	_tx, ok := ks.config.driver.(*txDriver)
	if !ok {
		panic("ent: KeySet is not a transactional entity")
	}
	ks.config.driver = _tx.drv
	return ks
}

// String implements the fmt.Stringer.
func (ks *KeySet) String() string {
	var builder strings.Builder
	builder.WriteString("KeySet(")
	builder.WriteString(fmt.Sprintf("id=%v", ks.ID))
	builder.WriteByte(')')
	return builder.String()
}

// KeySets is a parsable slice of KeySet.
type KeySets []*KeySet
