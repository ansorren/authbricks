// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.authbricks.com/bricks/ent/application"
	"go.authbricks.com/bricks/ent/codegrant"
)

// CodeGrantCreate is the builder for creating a CodeGrant entity.
type CodeGrantCreate struct {
	config
	mutation *CodeGrantMutation
	hooks    []Hook
}

// SetScopes sets the "scopes" field.
func (cgc *CodeGrantCreate) SetScopes(s []string) *CodeGrantCreate {
	cgc.mutation.SetScopes(s)
	return cgc
}

// SetCallbacks sets the "callbacks" field.
func (cgc *CodeGrantCreate) SetCallbacks(s []string) *CodeGrantCreate {
	cgc.mutation.SetCallbacks(s)
	return cgc
}

// SetID sets the "id" field.
func (cgc *CodeGrantCreate) SetID(s string) *CodeGrantCreate {
	cgc.mutation.SetID(s)
	return cgc
}

// SetApplicationID sets the "application" edge to the Application entity by ID.
func (cgc *CodeGrantCreate) SetApplicationID(id string) *CodeGrantCreate {
	cgc.mutation.SetApplicationID(id)
	return cgc
}

// SetNillableApplicationID sets the "application" edge to the Application entity by ID if the given value is not nil.
func (cgc *CodeGrantCreate) SetNillableApplicationID(id *string) *CodeGrantCreate {
	if id != nil {
		cgc = cgc.SetApplicationID(*id)
	}
	return cgc
}

// SetApplication sets the "application" edge to the Application entity.
func (cgc *CodeGrantCreate) SetApplication(a *Application) *CodeGrantCreate {
	return cgc.SetApplicationID(a.ID)
}

// Mutation returns the CodeGrantMutation object of the builder.
func (cgc *CodeGrantCreate) Mutation() *CodeGrantMutation {
	return cgc.mutation
}

// Save creates the CodeGrant in the database.
func (cgc *CodeGrantCreate) Save(ctx context.Context) (*CodeGrant, error) {
	return withHooks(ctx, cgc.sqlSave, cgc.mutation, cgc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cgc *CodeGrantCreate) SaveX(ctx context.Context) *CodeGrant {
	v, err := cgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cgc *CodeGrantCreate) Exec(ctx context.Context) error {
	_, err := cgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cgc *CodeGrantCreate) ExecX(ctx context.Context) {
	if err := cgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cgc *CodeGrantCreate) check() error {
	if _, ok := cgc.mutation.Scopes(); !ok {
		return &ValidationError{Name: "scopes", err: errors.New(`ent: missing required field "CodeGrant.scopes"`)}
	}
	if _, ok := cgc.mutation.Callbacks(); !ok {
		return &ValidationError{Name: "callbacks", err: errors.New(`ent: missing required field "CodeGrant.callbacks"`)}
	}
	if v, ok := cgc.mutation.ID(); ok {
		if err := codegrant.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "CodeGrant.id": %w`, err)}
		}
	}
	return nil
}

func (cgc *CodeGrantCreate) sqlSave(ctx context.Context) (*CodeGrant, error) {
	if err := cgc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected CodeGrant.ID type: %T", _spec.ID.Value)
		}
	}
	cgc.mutation.id = &_node.ID
	cgc.mutation.done = true
	return _node, nil
}

func (cgc *CodeGrantCreate) createSpec() (*CodeGrant, *sqlgraph.CreateSpec) {
	var (
		_node = &CodeGrant{config: cgc.config}
		_spec = sqlgraph.NewCreateSpec(codegrant.Table, sqlgraph.NewFieldSpec(codegrant.FieldID, field.TypeString))
	)
	if id, ok := cgc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cgc.mutation.Scopes(); ok {
		_spec.SetField(codegrant.FieldScopes, field.TypeJSON, value)
		_node.Scopes = value
	}
	if value, ok := cgc.mutation.Callbacks(); ok {
		_spec.SetField(codegrant.FieldCallbacks, field.TypeJSON, value)
		_node.Callbacks = value
	}
	if nodes := cgc.mutation.ApplicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   codegrant.ApplicationTable,
			Columns: []string{codegrant.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.application_code_grant = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CodeGrantCreateBulk is the builder for creating many CodeGrant entities in bulk.
type CodeGrantCreateBulk struct {
	config
	err      error
	builders []*CodeGrantCreate
}

// Save creates the CodeGrant entities in the database.
func (cgcb *CodeGrantCreateBulk) Save(ctx context.Context) ([]*CodeGrant, error) {
	if cgcb.err != nil {
		return nil, cgcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cgcb.builders))
	nodes := make([]*CodeGrant, len(cgcb.builders))
	mutators := make([]Mutator, len(cgcb.builders))
	for i := range cgcb.builders {
		func(i int, root context.Context) {
			builder := cgcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CodeGrantMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cgcb *CodeGrantCreateBulk) SaveX(ctx context.Context) []*CodeGrant {
	v, err := cgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cgcb *CodeGrantCreateBulk) Exec(ctx context.Context) error {
	_, err := cgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cgcb *CodeGrantCreateBulk) ExecX(ctx context.Context) {
	if err := cgcb.Exec(ctx); err != nil {
		panic(err)
	}
}
